CCS PCM C Compiler, Version 5.025, 42287               27-Mar-20 02:23

               Filename:   D:\ThapChuong\main.lst

               ROM used:   1865 words (23%)
                           Largest free fragment is 2048
               RAM used:   56 (15%) at main() level
                           88 (24%) worst case
               Stack used: 3 locations (2 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  05
0001:  MOVWF  0A
0002:  GOTO   5DB
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.4
0018:  GOTO   01B
0019:  BTFSC  0B.1
001A:  GOTO   036
001B:  MOVLW  8C
001C:  MOVWF  04
001D:  BTFSS  00.2
001E:  GOTO   021
001F:  BTFSC  0C.2
0020:  GOTO   039
0021:  BTFSS  0B.5
0022:  GOTO   025
0023:  BTFSC  0B.2
0024:  GOTO   03C
0025:  MOVF   22,W
0026:  MOVWF  04
0027:  MOVF   23,W
0028:  MOVWF  77
0029:  MOVF   24,W
002A:  MOVWF  78
002B:  MOVF   25,W
002C:  MOVWF  79
002D:  MOVF   26,W
002E:  MOVWF  7A
002F:  MOVF   20,W
0030:  MOVWF  0A
0031:  SWAPF  21,W
0032:  MOVWF  03
0033:  SWAPF  7F,F
0034:  SWAPF  7F,W
0035:  RETFIE
0036:  BCF    0A.3
0037:  BCF    0A.4
0038:  GOTO   03F
0039:  BCF    0A.3
003A:  BCF    0A.4
003B:  GOTO   063
003C:  BCF    0A.3
003D:  BCF    0A.4
003E:  GOTO   052
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
*
007A:  MOVLW  80
007B:  BTFSC  03.1
007C:  XORWF  68,F
007D:  CLRF   6D
007E:  CLRF   6E
007F:  MOVF   64,W
0080:  MOVWF  6C
0081:  MOVF   68,W
0082:  XORWF  6C,F
0083:  MOVF   63,W
0084:  BTFSC  03.2
0085:  GOTO   16A
0086:  MOVWF  6B
0087:  MOVWF  77
0088:  MOVF   67,W
0089:  BTFSC  03.2
008A:  GOTO   173
008B:  SUBWF  6B,F
008C:  BTFSC  03.2
008D:  GOTO   10F
008E:  BTFSS  03.0
008F:  GOTO   0CD
0090:  MOVF   68,W
0091:  MOVWF  71
0092:  BSF    71.7
0093:  MOVF   69,W
0094:  MOVWF  70
0095:  MOVF   6A,W
0096:  MOVWF  6F
0097:  CLRF   6E
0098:  BCF    03.0
0099:  RRF    71,F
009A:  RRF    70,F
009B:  RRF    6F,F
009C:  RRF    6E,F
009D:  DECFSZ 6B,F
009E:  GOTO   097
009F:  BTFSS  6C.7
00A0:  GOTO   0A4
00A1:  BSF    6D.0
00A2:  GOTO   187
00A3:  BCF    6D.0
00A4:  BCF    6B.0
00A5:  BSF    6D.4
00A6:  MOVLW  66
00A7:  MOVWF  04
00A8:  BCF    03.7
00A9:  GOTO   19C
00AA:  BCF    6D.4
00AB:  BTFSC  6C.7
00AC:  GOTO   0B7
00AD:  BTFSS  6B.0
00AE:  GOTO   0C2
00AF:  RRF    71,F
00B0:  RRF    70,F
00B1:  RRF    6F,F
00B2:  RRF    6E,F
00B3:  INCF   77,F
00B4:  BTFSC  03.2
00B5:  GOTO   182
00B6:  GOTO   0C2
00B7:  BTFSC  71.7
00B8:  GOTO   0C5
00B9:  BCF    03.0
00BA:  RLF    6E,F
00BB:  RLF    6F,F
00BC:  RLF    70,F
00BD:  RLF    71,F
00BE:  DECF   77,F
00BF:  BTFSC  03.2
00C0:  GOTO   182
00C1:  GOTO   0B7
00C2:  BSF    6D.6
00C3:  GOTO   12F
00C4:  BCF    6D.6
00C5:  MOVF   64,W
00C6:  MOVWF  6C
00C7:  BTFSS  6C.7
00C8:  GOTO   0CB
00C9:  BSF    71.7
00CA:  GOTO   17B
00CB:  BCF    71.7
00CC:  GOTO   17B
00CD:  MOVF   67,W
00CE:  MOVWF  6B
00CF:  MOVWF  77
00D0:  MOVF   63,W
00D1:  SUBWF  6B,F
00D2:  MOVF   64,W
00D3:  MOVWF  71
00D4:  BSF    71.7
00D5:  MOVF   65,W
00D6:  MOVWF  70
00D7:  MOVF   66,W
00D8:  MOVWF  6F
00D9:  CLRF   6E
00DA:  BCF    03.0
00DB:  RRF    71,F
00DC:  RRF    70,F
00DD:  RRF    6F,F
00DE:  RRF    6E,F
00DF:  DECFSZ 6B,F
00E0:  GOTO   0D9
00E1:  BTFSS  6C.7
00E2:  GOTO   0E6
00E3:  BSF    6D.1
00E4:  GOTO   187
00E5:  BCF    6D.1
00E6:  BCF    6B.0
00E7:  BSF    6D.5
00E8:  MOVLW  6A
00E9:  MOVWF  04
00EA:  BCF    03.7
00EB:  GOTO   19C
00EC:  BCF    6D.5
00ED:  BTFSC  6C.7
00EE:  GOTO   0F9
00EF:  BTFSS  6B.0
00F0:  GOTO   104
00F1:  RRF    71,F
00F2:  RRF    70,F
00F3:  RRF    6F,F
00F4:  RRF    6E,F
00F5:  INCF   77,F
00F6:  BTFSC  03.2
00F7:  GOTO   182
00F8:  GOTO   104
00F9:  BTFSC  71.7
00FA:  GOTO   107
00FB:  BCF    03.0
00FC:  RLF    6E,F
00FD:  RLF    6F,F
00FE:  RLF    70,F
00FF:  RLF    71,F
0100:  DECF   77,F
0101:  BTFSC  03.2
0102:  GOTO   182
0103:  GOTO   0F9
0104:  BSF    6D.7
0105:  GOTO   12F
0106:  BCF    6D.7
0107:  MOVF   68,W
0108:  MOVWF  6C
0109:  BTFSS  6C.7
010A:  GOTO   10D
010B:  BSF    71.7
010C:  GOTO   17B
010D:  BCF    71.7
010E:  GOTO   17B
010F:  MOVF   68,W
0110:  MOVWF  71
0111:  BSF    71.7
0112:  MOVF   69,W
0113:  MOVWF  70
0114:  MOVF   6A,W
0115:  MOVWF  6F
0116:  BTFSS  6C.7
0117:  GOTO   11C
0118:  BCF    71.7
0119:  BSF    6D.2
011A:  GOTO   187
011B:  BCF    6D.2
011C:  CLRF   6E
011D:  BCF    6B.0
011E:  MOVLW  66
011F:  MOVWF  04
0120:  BCF    03.7
0121:  GOTO   19C
0122:  BTFSC  6C.7
0123:  GOTO   145
0124:  MOVF   64,W
0125:  MOVWF  6C
0126:  BTFSS  6B.0
0127:  GOTO   12F
0128:  RRF    71,F
0129:  RRF    70,F
012A:  RRF    6F,F
012B:  RRF    6E,F
012C:  INCF   77,F
012D:  BTFSC  03.2
012E:  GOTO   182
012F:  BTFSS  6E.7
0130:  GOTO   140
0131:  INCF   6F,F
0132:  BTFSS  03.2
0133:  GOTO   140
0134:  INCF   70,F
0135:  BTFSS  03.2
0136:  GOTO   140
0137:  INCF   71,F
0138:  BTFSS  03.2
0139:  GOTO   140
013A:  RRF    71,F
013B:  RRF    70,F
013C:  RRF    6F,F
013D:  INCF   77,F
013E:  BTFSC  03.2
013F:  GOTO   182
0140:  BTFSC  6D.6
0141:  GOTO   0C4
0142:  BTFSC  6D.7
0143:  GOTO   106
0144:  GOTO   164
0145:  MOVLW  80
0146:  XORWF  71,F
0147:  BTFSS  71.7
0148:  GOTO   14D
0149:  GOTO   187
014A:  MOVF   68,W
014B:  MOVWF  6C
014C:  GOTO   15A
014D:  MOVF   64,W
014E:  MOVWF  6C
014F:  MOVF   71,F
0150:  BTFSS  03.2
0151:  GOTO   15A
0152:  MOVF   70,F
0153:  BTFSS  03.2
0154:  GOTO   15A
0155:  MOVF   6F,F
0156:  BTFSS  03.2
0157:  GOTO   15A
0158:  CLRF   77
0159:  GOTO   17B
015A:  BTFSC  71.7
015B:  GOTO   164
015C:  BCF    03.0
015D:  RLF    6E,F
015E:  RLF    6F,F
015F:  RLF    70,F
0160:  RLF    71,F
0161:  DECFSZ 77,F
0162:  GOTO   15A
0163:  GOTO   182
0164:  BTFSS  6C.7
0165:  GOTO   168
0166:  BSF    71.7
0167:  GOTO   17B
0168:  BCF    71.7
0169:  GOTO   17B
016A:  MOVF   67,W
016B:  MOVWF  77
016C:  MOVF   68,W
016D:  MOVWF  71
016E:  MOVF   69,W
016F:  MOVWF  70
0170:  MOVF   6A,W
0171:  MOVWF  6F
0172:  GOTO   17B
0173:  MOVF   63,W
0174:  MOVWF  77
0175:  MOVF   64,W
0176:  MOVWF  71
0177:  MOVF   65,W
0178:  MOVWF  70
0179:  MOVF   66,W
017A:  MOVWF  6F
017B:  MOVF   71,W
017C:  MOVWF  78
017D:  MOVF   70,W
017E:  MOVWF  79
017F:  MOVF   6F,W
0180:  MOVWF  7A
0181:  GOTO   1BA
0182:  CLRF   77
0183:  CLRF   78
0184:  CLRF   79
0185:  CLRF   7A
0186:  GOTO   1BA
0187:  CLRF   6E
0188:  COMF   6F,F
0189:  COMF   70,F
018A:  COMF   71,F
018B:  COMF   6E,F
018C:  INCF   6E,F
018D:  BTFSS  03.2
018E:  GOTO   195
018F:  INCF   6F,F
0190:  BTFSS  03.2
0191:  GOTO   195
0192:  INCF   70,F
0193:  BTFSC  03.2
0194:  INCF   71,F
0195:  BTFSC  6D.0
0196:  GOTO   0A3
0197:  BTFSC  6D.1
0198:  GOTO   0E5
0199:  BTFSC  6D.2
019A:  GOTO   11B
019B:  GOTO   14A
019C:  MOVF   00,W
019D:  ADDWF  6F,F
019E:  BTFSS  03.0
019F:  GOTO   1A6
01A0:  INCF   70,F
01A1:  BTFSS  03.2
01A2:  GOTO   1A6
01A3:  INCF   71,F
01A4:  BTFSC  03.2
01A5:  BSF    6B.0
01A6:  DECF   04,F
01A7:  MOVF   00,W
01A8:  ADDWF  70,F
01A9:  BTFSS  03.0
01AA:  GOTO   1AE
01AB:  INCF   71,F
01AC:  BTFSC  03.2
01AD:  BSF    6B.0
01AE:  DECF   04,F
01AF:  MOVF   00,W
01B0:  BTFSS  00.7
01B1:  XORLW  80
01B2:  ADDWF  71,F
01B3:  BTFSC  03.0
01B4:  BSF    6B.0
01B5:  BTFSC  6D.4
01B6:  GOTO   0AA
01B7:  BTFSC  6D.5
01B8:  GOTO   0EC
01B9:  GOTO   122
01BA:  RETURN
01BB:  MOVF   50,W
01BC:  BTFSC  03.2
01BD:  GOTO   280
01BE:  MOVWF  5C
01BF:  MOVF   54,W
01C0:  BTFSC  03.2
01C1:  GOTO   280
01C2:  SUBWF  5C,F
01C3:  BTFSS  03.0
01C4:  GOTO   1CA
01C5:  MOVLW  7F
01C6:  ADDWF  5C,F
01C7:  BTFSC  03.0
01C8:  GOTO   280
01C9:  GOTO   1D0
01CA:  MOVLW  81
01CB:  SUBWF  5C,F
01CC:  BTFSS  03.0
01CD:  GOTO   280
01CE:  BTFSC  03.2
01CF:  GOTO   280
01D0:  MOVF   5C,W
01D1:  MOVWF  77
01D2:  CLRF   78
01D3:  CLRF   79
01D4:  CLRF   7A
01D5:  CLRF   5B
01D6:  MOVF   51,W
01D7:  MOVWF  5A
01D8:  BSF    5A.7
01D9:  MOVF   52,W
01DA:  MOVWF  59
01DB:  MOVF   53,W
01DC:  MOVWF  58
01DD:  MOVLW  19
01DE:  MOVWF  5C
01DF:  MOVF   57,W
01E0:  SUBWF  58,F
01E1:  BTFSC  03.0
01E2:  GOTO   1F3
01E3:  MOVLW  01
01E4:  SUBWF  59,F
01E5:  BTFSC  03.0
01E6:  GOTO   1F3
01E7:  SUBWF  5A,F
01E8:  BTFSC  03.0
01E9:  GOTO   1F3
01EA:  SUBWF  5B,F
01EB:  BTFSC  03.0
01EC:  GOTO   1F3
01ED:  INCF   5B,F
01EE:  INCF   5A,F
01EF:  INCF   59,F
01F0:  MOVF   57,W
01F1:  ADDWF  58,F
01F2:  GOTO   225
01F3:  MOVF   56,W
01F4:  SUBWF  59,F
01F5:  BTFSC  03.0
01F6:  GOTO   20E
01F7:  MOVLW  01
01F8:  SUBWF  5A,F
01F9:  BTFSC  03.0
01FA:  GOTO   20E
01FB:  SUBWF  5B,F
01FC:  BTFSC  03.0
01FD:  GOTO   20E
01FE:  INCF   5B,F
01FF:  INCF   5A,F
0200:  MOVF   56,W
0201:  ADDWF  59,F
0202:  MOVF   57,W
0203:  ADDWF  58,F
0204:  BTFSS  03.0
0205:  GOTO   225
0206:  INCF   59,F
0207:  BTFSS  03.2
0208:  GOTO   225
0209:  INCF   5A,F
020A:  BTFSS  03.2
020B:  GOTO   225
020C:  INCF   5B,F
020D:  GOTO   225
020E:  MOVF   55,W
020F:  IORLW  80
0210:  SUBWF  5A,F
0211:  BTFSC  03.0
0212:  GOTO   224
0213:  MOVLW  01
0214:  SUBWF  5B,F
0215:  BTFSC  03.0
0216:  GOTO   224
0217:  INCF   5B,F
0218:  MOVF   55,W
0219:  IORLW  80
021A:  ADDWF  5A,F
021B:  MOVF   56,W
021C:  ADDWF  59,F
021D:  BTFSS  03.0
021E:  GOTO   202
021F:  INCF   5A,F
0220:  BTFSS  03.2
0221:  GOTO   202
0222:  INCF   5B,F
0223:  GOTO   202
0224:  BSF    7A.0
0225:  DECFSZ 5C,F
0226:  GOTO   228
0227:  GOTO   233
0228:  BCF    03.0
0229:  RLF    58,F
022A:  RLF    59,F
022B:  RLF    5A,F
022C:  RLF    5B,F
022D:  BCF    03.0
022E:  RLF    7A,F
022F:  RLF    79,F
0230:  RLF    78,F
0231:  RLF    5D,F
0232:  GOTO   1DF
0233:  BTFSS  5D.0
0234:  GOTO   23B
0235:  BCF    03.0
0236:  RRF    78,F
0237:  RRF    79,F
0238:  RRF    7A,F
0239:  RRF    5D,F
023A:  GOTO   23E
023B:  DECF   77,F
023C:  BTFSC  03.2
023D:  GOTO   280
023E:  BTFSC  5D.7
023F:  GOTO   267
0240:  BCF    03.0
0241:  RLF    58,F
0242:  RLF    59,F
0243:  RLF    5A,F
0244:  RLF    5B,F
0245:  MOVF   57,W
0246:  SUBWF  58,F
0247:  BTFSC  03.0
0248:  GOTO   253
0249:  MOVLW  01
024A:  SUBWF  59,F
024B:  BTFSC  03.0
024C:  GOTO   253
024D:  SUBWF  5A,F
024E:  BTFSC  03.0
024F:  GOTO   253
0250:  SUBWF  5B,F
0251:  BTFSS  03.0
0252:  GOTO   276
0253:  MOVF   56,W
0254:  SUBWF  59,F
0255:  BTFSC  03.0
0256:  GOTO   25E
0257:  MOVLW  01
0258:  SUBWF  5A,F
0259:  BTFSC  03.0
025A:  GOTO   25E
025B:  SUBWF  5B,F
025C:  BTFSS  03.0
025D:  GOTO   276
025E:  MOVF   55,W
025F:  IORLW  80
0260:  SUBWF  5A,F
0261:  BTFSC  03.0
0262:  GOTO   267
0263:  MOVLW  01
0264:  SUBWF  5B,F
0265:  BTFSS  03.0
0266:  GOTO   276
0267:  INCF   7A,F
0268:  BTFSS  03.2
0269:  GOTO   276
026A:  INCF   79,F
026B:  BTFSS  03.2
026C:  GOTO   276
026D:  INCF   78,F
026E:  BTFSS  03.2
026F:  GOTO   276
0270:  INCF   77,F
0271:  BTFSC  03.2
0272:  GOTO   280
0273:  RRF    78,F
0274:  RRF    79,F
0275:  RRF    7A,F
0276:  MOVF   51,W
0277:  MOVWF  5C
0278:  MOVF   55,W
0279:  XORWF  5C,F
027A:  BTFSS  5C.7
027B:  GOTO   27E
027C:  BSF    78.7
027D:  GOTO   284
027E:  BCF    78.7
027F:  GOTO   284
0280:  CLRF   77
0281:  CLRF   78
0282:  CLRF   79
0283:  CLRF   7A
0284:  RETURN
0285:  MOVF   60,W
0286:  MOVWF  67
0287:  MOVF   64,W
0288:  XORWF  67,F
0289:  BTFSS  67.7
028A:  GOTO   290
028B:  BCF    03.2
028C:  BCF    03.0
028D:  BTFSC  60.7
028E:  BSF    03.0
028F:  GOTO   2C3
0290:  MOVF   60,W
0291:  MOVWF  67
0292:  MOVF   63,W
0293:  MOVWF  68
0294:  MOVF   5F,W
0295:  SUBWF  68,F
0296:  BTFSC  03.2
0297:  GOTO   29E
0298:  BTFSS  67.7
0299:  GOTO   2C3
029A:  MOVF   03,W
029B:  XORLW  01
029C:  MOVWF  03
029D:  GOTO   2C3
029E:  MOVF   64,W
029F:  MOVWF  68
02A0:  MOVF   60,W
02A1:  SUBWF  68,F
02A2:  BTFSC  03.2
02A3:  GOTO   2AA
02A4:  BTFSS  67.7
02A5:  GOTO   2C3
02A6:  MOVF   03,W
02A7:  XORLW  01
02A8:  MOVWF  03
02A9:  GOTO   2C3
02AA:  MOVF   65,W
02AB:  MOVWF  68
02AC:  MOVF   61,W
02AD:  SUBWF  68,F
02AE:  BTFSC  03.2
02AF:  GOTO   2B6
02B0:  BTFSS  67.7
02B1:  GOTO   2C3
02B2:  MOVF   03,W
02B3:  XORLW  01
02B4:  MOVWF  03
02B5:  GOTO   2C3
02B6:  MOVF   66,W
02B7:  MOVWF  68
02B8:  MOVF   62,W
02B9:  SUBWF  68,F
02BA:  BTFSC  03.2
02BB:  GOTO   2C2
02BC:  BTFSS  67.7
02BD:  GOTO   2C3
02BE:  MOVF   03,W
02BF:  XORLW  01
02C0:  MOVWF  03
02C1:  GOTO   2C3
02C2:  BCF    03.0
02C3:  RETURN
02C4:  MOVLW  8E
02C5:  MOVWF  77
02C6:  MOVF   5F,W
02C7:  SUBWF  77,F
02C8:  MOVF   60,W
02C9:  MOVWF  79
02CA:  MOVF   61,W
02CB:  MOVWF  78
02CC:  BSF    79.7
02CD:  MOVF   77,F
02CE:  BTFSC  03.2
02CF:  GOTO   2DB
02D0:  BCF    03.0
02D1:  MOVF   79,F
02D2:  BTFSS  03.2
02D3:  GOTO   2D7
02D4:  MOVF   78,F
02D5:  BTFSC  03.2
02D6:  GOTO   2DB
02D7:  RRF    79,F
02D8:  RRF    78,F
02D9:  DECFSZ 77,F
02DA:  GOTO   2D0
02DB:  BTFSS  60.7
02DC:  GOTO   2E2
02DD:  COMF   78,F
02DE:  COMF   79,F
02DF:  INCF   78,F
02E0:  BTFSC  03.2
02E1:  INCF   79,F
02E2:  RETURN
02E3:  MOVLW  8E
02E4:  MOVWF  77
02E5:  MOVF   64,W
02E6:  MOVWF  78
02E7:  MOVF   63,W
02E8:  MOVWF  79
02E9:  CLRF   7A
02EA:  MOVF   78,F
02EB:  BTFSS  03.2
02EC:  GOTO   2F7
02ED:  MOVF   79,W
02EE:  MOVWF  78
02EF:  CLRF   79
02F0:  MOVLW  08
02F1:  SUBWF  77,F
02F2:  MOVF   78,F
02F3:  BTFSS  03.2
02F4:  GOTO   2F7
02F5:  CLRF   77
02F6:  GOTO   2FF
02F7:  BCF    03.0
02F8:  BTFSC  78.7
02F9:  GOTO   2FE
02FA:  RLF    79,F
02FB:  RLF    78,F
02FC:  DECF   77,F
02FD:  GOTO   2F7
02FE:  BCF    78.7
02FF:  RETURN
0300:  MOVF   5F,W
0301:  BTFSC  03.2
0302:  GOTO   370
0303:  MOVWF  67
0304:  MOVF   63,W
0305:  BTFSC  03.2
0306:  GOTO   370
0307:  ADDWF  67,F
0308:  BTFSC  03.0
0309:  GOTO   311
030A:  MOVLW  7F
030B:  SUBWF  67,F
030C:  BTFSS  03.0
030D:  GOTO   370
030E:  BTFSC  03.2
030F:  GOTO   370
0310:  GOTO   315
0311:  MOVLW  81
0312:  ADDWF  67,F
0313:  BTFSC  03.0
0314:  GOTO   370
0315:  MOVF   67,W
0316:  MOVWF  77
0317:  CLRF   78
0318:  CLRF   79
0319:  CLRF   7A
031A:  MOVF   60,W
031B:  MOVWF  6B
031C:  BSF    6B.7
031D:  MOVF   61,W
031E:  MOVWF  6A
031F:  MOVF   62,W
0320:  MOVWF  69
0321:  MOVLW  18
0322:  MOVWF  67
0323:  CLRF   68
0324:  BTFSS  69.0
0325:  GOTO   33E
0326:  MOVF   66,W
0327:  ADDWF  7A,F
0328:  BTFSS  03.0
0329:  GOTO   330
032A:  INCF   79,F
032B:  BTFSS  03.2
032C:  GOTO   330
032D:  INCF   78,F
032E:  BTFSC  03.2
032F:  BSF    68.7
0330:  MOVF   65,W
0331:  ADDWF  79,F
0332:  BTFSS  03.0
0333:  GOTO   337
0334:  INCF   78,F
0335:  BTFSC  03.2
0336:  BSF    68.7
0337:  MOVF   64,W
0338:  MOVWF  61
0339:  BSF    61.7
033A:  MOVF   61,W
033B:  ADDWF  78,F
033C:  BTFSC  03.0
033D:  BSF    68.7
033E:  RLF    68,F
033F:  RRF    78,F
0340:  RRF    79,F
0341:  RRF    7A,F
0342:  RRF    6B,F
0343:  RRF    6A,F
0344:  RRF    69,F
0345:  BCF    03.0
0346:  DECFSZ 67,F
0347:  GOTO   323
0348:  MOVLW  01
0349:  ADDWF  77,F
034A:  BTFSC  03.0
034B:  GOTO   370
034C:  BTFSC  78.7
034D:  GOTO   355
034E:  RLF    6B,F
034F:  RLF    7A,F
0350:  RLF    79,F
0351:  RLF    78,F
0352:  DECF   77,F
0353:  BTFSC  03.2
0354:  GOTO   370
0355:  BTFSS  6B.7
0356:  GOTO   366
0357:  INCF   7A,F
0358:  BTFSS  03.2
0359:  GOTO   366
035A:  INCF   79,F
035B:  BTFSS  03.2
035C:  GOTO   366
035D:  INCF   78,F
035E:  BTFSS  03.2
035F:  GOTO   366
0360:  RRF    78,F
0361:  RRF    79,F
0362:  RRF    7A,F
0363:  INCF   77,F
0364:  BTFSC  03.2
0365:  GOTO   370
0366:  MOVF   60,W
0367:  MOVWF  68
0368:  MOVF   64,W
0369:  XORWF  68,F
036A:  BTFSS  68.7
036B:  GOTO   36E
036C:  BSF    78.7
036D:  GOTO   374
036E:  BCF    78.7
036F:  GOTO   374
0370:  CLRF   77
0371:  CLRF   78
0372:  CLRF   79
0373:  CLRF   7A
0374:  RETURN
*
04E8:  MOVF   4C,W
04E9:  SUBLW  B6
04EA:  MOVWF  4C
04EB:  CLRF   7A
04EC:  MOVF   4D,W
04ED:  MOVWF  50
04EE:  BSF    4D.7
04EF:  BCF    03.0
04F0:  RRF    4D,F
04F1:  RRF    4E,F
04F2:  RRF    4F,F
04F3:  RRF    7A,F
04F4:  RRF    79,F
04F5:  RRF    78,F
04F6:  RRF    77,F
04F7:  DECFSZ 4C,F
04F8:  GOTO   4EF
04F9:  BTFSS  50.7
04FA:  GOTO   506
04FB:  COMF   77,F
04FC:  COMF   78,F
04FD:  COMF   79,F
04FE:  COMF   7A,F
04FF:  INCF   77,F
0500:  BTFSC  03.2
0501:  INCF   78,F
0502:  BTFSC  03.2
0503:  INCF   79,F
0504:  BTFSC  03.2
0505:  INCF   7A,F
0506:  RETURN
*
0550:  BTFSC  03.1
0551:  GOTO   555
0552:  MOVLW  56
0553:  MOVWF  04
0554:  BCF    03.7
0555:  MOVF   51,W
0556:  XORWF  55,W
0557:  ANDLW  80
0558:  MOVWF  5B
0559:  BTFSS  51.7
055A:  GOTO   566
055B:  COMF   4E,F
055C:  COMF   4F,F
055D:  COMF   50,F
055E:  COMF   51,F
055F:  INCF   4E,F
0560:  BTFSC  03.2
0561:  INCF   4F,F
0562:  BTFSC  03.2
0563:  INCF   50,F
0564:  BTFSC  03.2
0565:  INCF   51,F
0566:  BTFSS  55.7
0567:  GOTO   573
0568:  COMF   52,F
0569:  COMF   53,F
056A:  COMF   54,F
056B:  COMF   55,F
056C:  INCF   52,F
056D:  BTFSC  03.2
056E:  INCF   53,F
056F:  BTFSC  03.2
0570:  INCF   54,F
0571:  BTFSC  03.2
0572:  INCF   55,F
0573:  CLRF   77
0574:  CLRF   78
0575:  CLRF   79
0576:  CLRF   7A
0577:  CLRF   56
0578:  CLRF   57
0579:  CLRF   58
057A:  CLRF   59
057B:  MOVF   55,W
057C:  IORWF  54,W
057D:  IORWF  53,W
057E:  IORWF  52,W
057F:  BTFSC  03.2
0580:  GOTO   5B1
0581:  MOVLW  20
0582:  MOVWF  5A
0583:  BCF    03.0
0584:  RLF    4E,F
0585:  RLF    4F,F
0586:  RLF    50,F
0587:  RLF    51,F
0588:  RLF    56,F
0589:  RLF    57,F
058A:  RLF    58,F
058B:  RLF    59,F
058C:  MOVF   55,W
058D:  SUBWF  59,W
058E:  BTFSS  03.2
058F:  GOTO   59A
0590:  MOVF   54,W
0591:  SUBWF  58,W
0592:  BTFSS  03.2
0593:  GOTO   59A
0594:  MOVF   53,W
0595:  SUBWF  57,W
0596:  BTFSS  03.2
0597:  GOTO   59A
0598:  MOVF   52,W
0599:  SUBWF  56,W
059A:  BTFSS  03.0
059B:  GOTO   5AB
059C:  MOVF   52,W
059D:  SUBWF  56,F
059E:  MOVF   53,W
059F:  BTFSS  03.0
05A0:  INCFSZ 53,W
05A1:  SUBWF  57,F
05A2:  MOVF   54,W
05A3:  BTFSS  03.0
05A4:  INCFSZ 54,W
05A5:  SUBWF  58,F
05A6:  MOVF   55,W
05A7:  BTFSS  03.0
05A8:  INCFSZ 55,W
05A9:  SUBWF  59,F
05AA:  BSF    03.0
05AB:  RLF    77,F
05AC:  RLF    78,F
05AD:  RLF    79,F
05AE:  RLF    7A,F
05AF:  DECFSZ 5A,F
05B0:  GOTO   583
05B1:  BTFSS  5B.7
05B2:  GOTO   5BE
05B3:  COMF   77,F
05B4:  COMF   78,F
05B5:  COMF   79,F
05B6:  COMF   7A,F
05B7:  INCF   77,F
05B8:  BTFSC  03.2
05B9:  INCF   78,F
05BA:  BTFSC  03.2
05BB:  INCF   79,F
05BC:  BTFSC  03.2
05BD:  INCF   7A,F
05BE:  MOVF   56,W
05BF:  MOVWF  00
05C0:  INCF   04,F
05C1:  MOVF   57,W
05C2:  MOVWF  00
05C3:  INCF   04,F
05C4:  MOVF   58,W
05C5:  MOVWF  00
05C6:  INCF   04,F
05C7:  MOVF   59,W
05C8:  MOVWF  00
05C9:  RETURN
....................  
.................... #list 
....................  
.................... #include <def_16f877a.h> 
.................... //========================= Register Definitions ========================== 
.................... //-----Register Files------------------------------------------------------ 
.................... #byte INDF         =0x00 
.................... #byte TMR0         =0x01 
.................... #byte PCL          =0x02 
.................... #byte STATUS       =0x03 
.................... #byte FSR          =0x04 
.................... #byte PORTA    = 0x05 
.................... #byte PORTB    = 0x06 
.................... #byte PORTC    = 0x07 
.................... #byte PORTD    = 0x08 
.................... #byte PORTE    = 0x09 
.................... #byte PCLATH       =0x0A 
.................... #byte INTCON       =0x0B 
.................... #byte PIR1	   =0x0C 
.................... #byte PIR2	   =0x0D 
.................... #byte TMR1L	   =0x0E 
.................... #byte TMR1H        =0x0F 
.................... #byte T1CON        =0x10 
.................... #byte TMR2	   =0x11 
.................... #byte T2CON	   =0x12 
.................... #byte SSPBUF       =0x13 
.................... #byte SSPCON       =0x14 
.................... #byte CCPR1L       =0x15 
.................... #byte CCPR1H       =0x16 
.................... #byte CCP1CON      =0x17 
.................... #byte RCSTA        =0x18 
.................... #byte TXREG        =0x19 
.................... #byte RCREG        =0x1A 
.................... #byte CCPR2L       =0x1B 
.................... #byte CCPR2H       =0x1C 
.................... #byte CCP2CON      =0x1D 
.................... #byte ADRESH       =0x1E 
.................... #byte ADCON0	   =0x1F 
.................... #byte OPTION_REG   =0x81 
.................... //-------------- TRIS PORT ----------------------------- 
.................... #byte TRISA        =0x85 
.................... #byte TRISB	   =0x86 
.................... #byte TRISC	   =0x87 
.................... #byte TRISD        =0x88 
.................... #byte TRISE	   =0x89 
.................... #byte PIE1	   =0x8C 
.................... #byte PIE2	   =0x8D 
.................... #byte PCON	   =0x8E 
....................  
.................... #byte SSPCON2      =0x91 
.................... #byte PR2          =0x92 
.................... #byte SSPADD       =0x93 
.................... #byte SSPSTAT      =0x94 
....................  
.................... #byte TXSTA        =0x98 
.................... #byte SPBRG        =0x99 
....................  
.................... #byte ADRESL       =0x9E 
.................... #byte ADCON1       =0x9F 
....................  
.................... /*	bank 2 registers */ 
....................  
.................... #byte EEDATA	   =0x010C 
.................... #byte EEADR	   =0x010D 
.................... #byte EEDATH       =0x010E 
.................... #byte EEADRH       =0x010F 
....................  
.................... /*	bank 3 registers */ 
....................  
.................... #byte EECON1	   =0x018C 
.................... #byte EECON2	   =0x018D 
....................  
.................... //----- STATUS Bits -------------------------------------------------------- 
....................  
.................... // For Assembly Language - Note upper case 
.................... #define IRP 	7 
.................... #define RP1 	6 
.................... #define RP0 	5 
.................... #define NOT_TO 	4 
.................... #define NOT_PD 	3 
.................... #define Z 	2 
.................... #define DC 	1 
.................... #define C  	0 
....................  
.................... //---------------- TRIS BIT PORT-------------------------------------- 
.................... //------------------TRISA bits--------------------------- 
....................  
.................... #bit TRISA5     =0x85.5 
.................... #bit TRISA4     =0x85.4 
.................... #bit TRISA3     =0x85.3 
.................... #bit TRISA2     =0x85.2 
.................... #bit TRISA1     =0x85.1 
.................... #bit TRISA0     =0x85.0 
....................  
.................... //-----------------TRISB bits----------------------------- 
....................  
.................... #bit TRISB7     =0x86.7 
.................... #bit TRISB6     =0x86.6 
.................... #bit TRISB5     =0x86.5 
.................... #bit TRISB4     =0x86.4 
.................... #bit TRISB3     =0x86.3 
.................... #bit TRISB2     =0x86.2 
.................... #bit TRISB1     =0x86.1 
.................... #bit TRISB0     =0x86.0 
....................  
.................... //----------------TRISC bits------------------- 
....................  
.................... #bit TRISC7     =0x87.7 
.................... #bit TRISC6     =0x87.6 
.................... #bit TRISC5     =0x87.5 
.................... #bit TRISC4     =0x87.4 
.................... #bit TRISC3     =0x87.3 
.................... #bit TRISC2     =0x87.2 
.................... #bit TRISC1     =0x87.1 
.................... #bit TRISC0     =0x87.0 
.................... //------------------TRISD bit------------------ 
.................... #bit TRISD7     =0x88.7 
.................... #bit TRISD6     =0x88.6 
.................... #bit TRISD5     =0x88.5 
.................... #bit TRISD4     =0x88.4 
.................... #bit TRISD3     =0x88.3 
.................... #bit TRISD2     =0x88.2 
.................... #bit TRISD1     =0x88.1 
.................... #bit TRISD0     =0x88.0 
.................... //-------------TRISE bit---------------------- 
.................... #bit TRISE2     =0x89.2 
.................... #bit TRISE1     =0x89.1 
.................... #bit TRISE0     =0x89.0 
.................... //--------------------------------------------------------------------------- 
.................... //---------PORTA bits------------------ 
.................... #bit RA4			= 0x05.4 
.................... #bit RA3			= 0x05.3 
.................... #bit RA2			= 0x05.2 
.................... #bit RA1			= 0x05.1 
.................... #bit RA0			= 0x05.0 
.................... //---------PORTB bits------------------ 
.................... #bit RB7			= 0x06.7 
.................... #bit RB6			= 0x06.6 
.................... #bit RB5			= 0x06.5 
.................... #bit RB4			= 0x06.4 
.................... #bit RB3			= 0x06.3 
.................... #bit RB2			= 0x06.2 
.................... #bit RB1			= 0x06.1 
.................... #bit RB0			= 0x06.0 
.................... //---------PORTC bits------------------ 
.................... #bit RC7			= 0x07.7 
.................... #bit RC6			= 0x07.6 
.................... #bit RC5			= 0x07.5 
.................... #bit RC4			= 0x07.4 
.................... #bit RC3			= 0x07.3 
.................... #bit RC2			= 0x07.2 
.................... #bit RC1			= 0x07.1 
.................... #bit RC0			= 0x07.0 
.................... //---------PORTD bits------------------ 
.................... #bit RD7			= 0x08.7 
.................... #bit RD6			= 0x08.6 
.................... #bit RD5			= 0x08.5 
.................... #bit RD4			= 0x08.4 
.................... #bit RD3			= 0x08.3 
.................... #bit RD2			= 0x08.2 
.................... #bit RD1			= 0x08.1 
.................... #bit RD0			= 0x08.0 
.................... //---------PORTE bits------------------ 
.................... #bit RE2			= 0x09.2 
.................... #bit RE1			= 0x09.1 
.................... #bit RE0			= 0x09.0 
....................  
.................... //----- INTCON ------------------------------------------------------------- 
....................  
.................... #bit	GIE      = 0x0b.7 
.................... #bit	PEIE     = 0x0b.6 
.................... #bit	TMR0IE   = 0x0b.5 
.................... #bit	INTE     = 0x0b.4 
.................... #bit	RBIE     = 0x0b.3 
.................... #bit	TMR0IF   = 0x0b.2 
.................... #bit	INTF     = 0x0b.1 
.................... #bit	RBIF     = 0x0b.0 
....................  
.................... //----- PIR1 --------------------------------------------------------------- 
....................  
.................... #bit pspif     = 0x0c.7 
.................... #bit adif      = 0x0c.6 
.................... #bit rcif      = 0x0c.5 
.................... #bit txif      = 0x0c.4 
.................... #bit sspif     = 0x0c.3 
.................... #bit ccp1if    = 0x0c.2 
.................... #bit tmr2if    = 0x0c.1 
.................... #bit tmr1if    = 0x0c.0 
....................  
.................... //----- PIR2 --------------------------------------------------------------- 
....................  
.................... #bit cmif      = 0x0d.6 
.................... #bit eeif      = 0x0d.4 
.................... #bit bclif     = 0x0d.3 
.................... #bit ccp2if    = 0x0d.0 
....................  
.................... //----- PIE1 --------------------------------------------------------------- 
....................  
.................... #bit pspie     = 0x8c.7 
.................... #bit adie      = 0x8c.6 
.................... #bit rcie      = 0x8c.5 
.................... #bit txie      = 0x8c.4 
.................... #bit sspie     = 0x8c.3 
.................... #bit ccp1ie    = 0x8c.2 
.................... #bit tmr2ie    = 0x8c.1 
.................... #bit tmr1ie    = 0x8c.0 
....................  
.................... //----- PIE2 --------------------------------------------------------------- 
....................  
.................... #bit cmie      = 0x8d.6 
.................... #bit eeie      = 0x8d.4 
.................... #bit bclie     = 0x8d.3 
.................... #bit ccp2ie    = 0x8d.0 
.................... //----- T1CON Bits --------------------------------------------------------- 
.................... #bit T1CKPS1    =0x10.5 
.................... #bit T1CKPS0    =0x10.4 
.................... #bit T1OSCEN    =0x10.3 
.................... #bit T1SYNC     =0x10.2 
.................... #bit TMR1CS     =0x10.1 
.................... #bit TMR1ON     =0x10.0 
....................  
.................... //----- T2CON Bits --------------------------------------------------------- 
.................... #bit TOUTPS3    =0x12.6 
.................... #bit TOUTPS2    =0x12.5 
.................... #bit TOUTPS1    =0x12.4 
.................... #bit TOUTPS0    =0x12.3 
.................... #bit TMR2ON     =0x12.2 
.................... #bit T2CKPS1    =0x12.1 
.................... #bit T2CKPS0    =0x12.0 
....................  
.................... //-------------SSPCON bits-------------------------- 
.................... #bit WCOL       =0x14.7 
.................... #bit SSPOV      =0x14.6 
.................... #bit SSPEN      =0x14.5 
.................... #bit CKP        =0x14.4 
.................... #bit SSPM3      =0x14.3 
.................... #bit SSPM2      =0x14.2 
.................... #bit SSPM1      =0x14.1 
.................... #bit SSPM0      =0x14.0 
....................  
.................... //---------------CCP1CON bits-------- 
.................... #bit CCP1X      =0x17.5 
.................... #bit CCP1Y      =0x17.4 
.................... #bit CCP1M3     =0x17.3 
.................... #bit CCP1M2     =0x17.2 
.................... #bit CCP1M1     =0x17.1 
.................... #bit CCP1M0     =0x17.0 
....................  
.................... //---------------RCSTA bits------------------- 
....................  
.................... #bit SPEN       =0x18.7 
.................... #bit RX9        =0x18.6 
.................... #bit SREN       =0x18.5 
.................... #bit CREN       =0x18.4 
.................... #bit ADDEN      =0x18.3 
.................... #bit FERR       =0x18.2 
.................... #bit OERR       =0x18.1 
.................... #bit RX9D       =0x18.0 
....................  
.................... //-----------------------CCP2CON bits---------- 
....................  
.................... #bit CCP2X      =0x1D.5 
.................... #bit CCP2Y      =0x1D.4 
.................... #bit CCP2M3     =0x1D.3 
.................... #bit CCP2M2     =0x1D.2 
.................... #bit CCP2M1     =0x1D.1 
.................... #bit CCP2M0     =0x1D.0 
....................  
.................... //----- ADCON0 Bits -------------------------------------------------------- 
.................... #bit ADCS1      =0x1F.7 
.................... #bit ADCS0      =0x1F.6 
.................... #bit CHS2       =0x1F.5 
.................... #bit CHS1       =0x1F.4 
.................... #bit CHS0       =0x1F.3 
.................... #bit ADGO       =0x1F.2 
.................... #bit ADON       =0x1F.0 
....................  
.................... //----- OPTION_reg Bits -------------------------------------------------------- 
....................  
.................... #bit RBPU       =0x81.7 
.................... #bit INTEDG     =0x81.6 
.................... #bit T0CS       =0x81.5 
.................... #bit T0SE       =0x81.4 
.................... #bit PSA        =0x81.3 
.................... #bit PS2        =0x81.2 
.................... #bit PS1        =0x81.1 
.................... #bit PS0        =0x81.0 
.................... //----- PCON Bits ---------------------------------------------------------- 
....................  
.................... #bit POR        =0x8E.1 
.................... #bit BOD        =0x8E.0 
....................  
.................... //-----------SSPCON2 bits--------------------------------------------- 
....................  
.................... #bit GCEN       =0x91.7 
.................... #bit ACKSTAT    =0x91.6 
.................... #bit ACKDT      =0x91.5 
.................... #bit ACKEN      =0x91.4 
.................... #bit RCEN       =0x91.3 
.................... #bit PEN        =0x91.2 
.................... #bit RSEN       =0x91.1 
.................... #bit SEN        =0x91.0 
....................  
.................... //---------------------SSPSTAT bits------------------------ 
....................  
.................... #bit STAT_SMP   =0x94.7 
.................... #bit STAT_CKE   =0x94.6 
.................... #bit STAT_DA    =0x94.5 
.................... #bit STAT_P     =0x94.4 
.................... #bit STAT_S     =0x94.3 
.................... #bit STAT_RW    =0x94.2 
.................... #bit STAT_UA    =0x94.1 
.................... #bit STAT_BF    =0x94.0 
....................  
.................... //----------------TXSTA bits----------------- 
....................  
.................... #bit CSRC       =0x98.7 
.................... #bit TX9        =0x98.6 
.................... #bit TXEN       =0x98.5 
.................... #bit SYNC       =0x98.4 
.................... #bit BRGH       =0x98.2 
.................... #bit TRMT       =0x98.1 
.................... #bit TX9D       =0x98.0 
....................  
.................... //--------------ADCON1 bits--------------- 
....................  
.................... #bit ADFM       =0x9F.7 
.................... #bit ADCS2      =0x9F.6 
.................... #bit PCFG3      =0x9F.3 
.................... #bit PCFG2      =0x9F.2 
.................... #bit PCFG1      =0x9F.1 
.................... #bit PCFG0      =0x9F.0 
....................  
.................... //-----------EECON1 bits---------- 
....................  
.................... #bit EEPGD      =0x018C.7 
.................... #bit WRERR      =0x018C.3 
.................... #bit WREN       =0x018C.2 
.................... #bit WR         =0x018C.1 
.................... #bit RD         =0x018C.0 
....................  
....................  
.................... // #device ADC=16 
....................  
.................... #FUSES NOWDT      //No Watch Dog Timer 
.................... #FUSES NOBROWNOUT //No brownout reset 
.................... #FUSES NOLVP      //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal = 20000000) 
*
0507:  MOVLW  54
0508:  MOVWF  04
0509:  BCF    03.7
050A:  MOVF   00,W
050B:  BTFSC  03.2
050C:  GOTO   51A
050D:  MOVLW  06
050E:  MOVWF  78
050F:  CLRF   77
0510:  DECFSZ 77,F
0511:  GOTO   510
0512:  DECFSZ 78,F
0513:  GOTO   50F
0514:  MOVLW  7B
0515:  MOVWF  77
0516:  DECFSZ 77,F
0517:  GOTO   516
0518:  DECFSZ 00,F
0519:  GOTO   50D
051A:  RETURN
051B:  MOVLW  03
051C:  SUBWF  55,F
051D:  BTFSS  03.0
051E:  GOTO   529
051F:  MOVLW  55
0520:  MOVWF  04
0521:  BCF    03.7
0522:  MOVF   00,W
0523:  BTFSC  03.2
0524:  GOTO   529
0525:  GOTO   527
0526:  GOTO   527
0527:  DECFSZ 00,F
0528:  GOTO   526
0529:  RETURN
....................  
.................... #include "def_lcd.c" 
.................... #define RS RC3 
.................... #define RW RC4 
.................... #define E RC5 
.................... #define LCD PORTD 
....................  
.................... // CONST Char gd[4][21] = {"    Thap Chuong     ", 
.................... //                         "                    ", 
.................... //                         "Sensor 1:           ", 
.................... //                         "Sensor 2:           "}; 
.................... char arrNumber[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'}; 
*
06C2:  MOVLW  30
06C3:  BCF    03.5
06C4:  MOVWF  27
06C5:  MOVLW  31
06C6:  MOVWF  28
06C7:  MOVLW  32
06C8:  MOVWF  29
06C9:  MOVLW  33
06CA:  MOVWF  2A
06CB:  MOVLW  34
06CC:  MOVWF  2B
06CD:  MOVLW  35
06CE:  MOVWF  2C
06CF:  MOVLW  36
06D0:  MOVWF  2D
06D1:  MOVLW  37
06D2:  MOVWF  2E
06D3:  MOVLW  38
06D4:  MOVWF  2F
06D5:  MOVLW  39
06D6:  MOVWF  30
....................  
.................... void ghima(int8 data) 
.................... { 
....................   LCD = data; 
*
052A:  MOVF   4A,W
052B:  MOVWF  08
....................   RS = 0; 
052C:  BCF    07.3
....................   RW = 0; 
052D:  BCF    07.4
....................   E = 1; 
052E:  BSF    07.5
....................   E = 0; 
052F:  BCF    07.5
....................   delay_us(1500); 
0530:  MOVLW  01
0531:  MOVWF  54
0532:  CALL   507
0533:  MOVLW  02
0534:  MOVWF  4B
0535:  MOVLW  F9
0536:  MOVWF  55
0537:  CALL   51B
0538:  DECFSZ 4B,F
0539:  GOTO   535
053A:  RETURN
.................... } 
.................... void hienthi(int8 data) 
.................... { 
....................   LCD = data; 
*
05CA:  MOVF   53,W
05CB:  MOVWF  08
....................   RS = 1; 
05CC:  BSF    07.3
....................   RW = 0; 
05CD:  BCF    07.4
....................   E = 1; 
05CE:  BSF    07.5
....................   E = 0; 
05CF:  BCF    07.5
....................   delay_us(1500); 
05D0:  MOVLW  01
05D1:  MOVWF  54
05D2:  CALL   507
05D3:  MOVLW  02
05D4:  MOVWF  54
05D5:  MOVLW  F9
05D6:  MOVWF  55
05D7:  CALL   51B
05D8:  DECFSZ 54,F
05D9:  GOTO   5D5
05DA:  RETURN
.................... } 
....................  
.................... void initLCD() 
.................... { 
....................   TRISD = 0; 
*
053B:  BSF    03.5
053C:  CLRF   08
....................   TRISC3 = TRISC4 = TRISC5 = 0; 
053D:  BCF    07.5
053E:  BCF    07.4
053F:  BCF    07.3
....................  
....................   ghima(0x38); //giao tiep 8bit, hien thi 2 dong, kich thuoc 5x7 
0540:  MOVLW  38
0541:  BCF    03.5
0542:  MOVWF  4A
0543:  CALL   52A
....................   ghima(0x0C); //bat man hinh 
0544:  MOVLW  0C
0545:  MOVWF  4A
0546:  CALL   52A
....................   ghima(0x01); //xoa man hinh 
0547:  MOVLW  01
0548:  MOVWF  4A
0549:  CALL   52A
....................   ghima(0x80); // dua con tro ve du dong 1 
054A:  MOVLW  80
054B:  MOVWF  4A
054C:  CALL   52A
054D:  BCF    0A.3
054E:  BCF    0A.4
054F:  GOTO   6D8 (RETURN)
....................  
....................   // int8 i, j; 
....................   // for (i = 0; i < 4; i++) 
....................   //   for (j = 0; j < 20; j++) 
....................   //   { 
....................   //     hienthi(gd[i][j]); 
....................   //     if ((j == 19) && (i == 0)) 
....................   //       ghima(0xc0); 
....................   //     if ((j == 19) && (i == 1)) 
....................   //       ghima(0x94); 
....................   //     if ((j == 19) && (i == 2)) 
....................   //       ghima(0xd4); 
....................   //   } 
.................... } 
....................  
.................... #include "floor.c" 
.................... float32 FLOOR(float32 x) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
*
0375:  BCF    5E.0
....................    y = x; 
0376:  MOVF   53,W
0377:  MOVWF  57
0378:  MOVF   52,W
0379:  MOVWF  56
037A:  MOVF   51,W
037B:  MOVWF  55
037C:  MOVF   50,W
037D:  MOVWF  54
....................  
....................    if (x < 0) 
037E:  MOVF   53,W
037F:  MOVWF  62
0380:  MOVF   52,W
0381:  MOVWF  61
0382:  MOVF   51,W
0383:  MOVWF  60
0384:  MOVF   50,W
0385:  MOVWF  5F
0386:  CLRF   66
0387:  CLRF   65
0388:  CLRF   64
0389:  CLRF   63
038A:  CALL   285
038B:  BTFSS  03.0
038C:  GOTO   391
....................    { 
....................       s = 1; 
038D:  BSF    5E.0
....................       y = -y; 
038E:  MOVF   55,W
038F:  XORLW  80
0390:  MOVWF  55
....................    } 
....................  
....................    if (y <= 32768.0) 
0391:  MOVF   57,W
0392:  MOVWF  62
0393:  MOVF   56,W
0394:  MOVWF  61
0395:  MOVF   55,W
0396:  MOVWF  60
0397:  MOVF   54,W
0398:  MOVWF  5F
0399:  CLRF   66
039A:  CLRF   65
039B:  CLRF   64
039C:  MOVLW  8E
039D:  MOVWF  63
039E:  CALL   285
039F:  BTFSC  03.0
03A0:  GOTO   3A3
03A1:  BTFSS  03.2
03A2:  GOTO   3BA
....................       res = (float32)(unsigned int16)y; 
03A3:  MOVF   57,W
03A4:  MOVWF  62
03A5:  MOVF   56,W
03A6:  MOVWF  61
03A7:  MOVF   55,W
03A8:  MOVWF  60
03A9:  MOVF   54,W
03AA:  MOVWF  5F
03AB:  CALL   2C4
03AC:  MOVF   79,W
03AD:  MOVWF  64
03AE:  MOVF   78,W
03AF:  MOVWF  63
03B0:  CALL   2E3
03B1:  MOVF   7A,W
03B2:  MOVWF  5B
03B3:  MOVF   79,W
03B4:  MOVWF  5A
03B5:  MOVF   78,W
03B6:  MOVWF  59
03B7:  MOVF   77,W
03B8:  MOVWF  58
03B9:  GOTO   477
....................  
....................    else if (y < 10000000.0) 
03BA:  MOVF   57,W
03BB:  MOVWF  62
03BC:  MOVF   56,W
03BD:  MOVWF  61
03BE:  MOVF   55,W
03BF:  MOVWF  60
03C0:  MOVF   54,W
03C1:  MOVWF  5F
03C2:  MOVLW  80
03C3:  MOVWF  66
03C4:  MOVLW  96
03C5:  MOVWF  65
03C6:  MOVLW  18
03C7:  MOVWF  64
03C8:  MOVLW  96
03C9:  MOVWF  63
03CA:  CALL   285
03CB:  BTFSS  03.0
03CC:  GOTO   46F
....................    { 
....................       l = (unsigned int16)(y * 0.000030517578125); 
03CD:  MOVF   57,W
03CE:  MOVWF  62
03CF:  MOVF   56,W
03D0:  MOVWF  61
03D1:  MOVF   55,W
03D2:  MOVWF  60
03D3:  MOVF   54,W
03D4:  MOVWF  5F
03D5:  CLRF   66
03D6:  CLRF   65
03D7:  CLRF   64
03D8:  MOVLW  70
03D9:  MOVWF  63
03DA:  CALL   300
03DB:  MOVF   7A,W
03DC:  MOVWF  62
03DD:  MOVF   79,W
03DE:  MOVWF  61
03DF:  MOVF   78,W
03E0:  MOVWF  60
03E1:  MOVF   77,W
03E2:  MOVWF  5F
03E3:  CALL   2C4
03E4:  MOVF   79,W
03E5:  MOVWF  5D
03E6:  MOVF   78,W
03E7:  MOVWF  5C
....................       y = 32768.0 * (y * 0.000030517578125 - (float32)l); 
03E8:  MOVF   57,W
03E9:  MOVWF  62
03EA:  MOVF   56,W
03EB:  MOVWF  61
03EC:  MOVF   55,W
03ED:  MOVWF  60
03EE:  MOVF   54,W
03EF:  MOVWF  5F
03F0:  CLRF   66
03F1:  CLRF   65
03F2:  CLRF   64
03F3:  MOVLW  70
03F4:  MOVWF  63
03F5:  CALL   300
03F6:  MOVF   7A,W
03F7:  MOVWF  62
03F8:  MOVF   79,W
03F9:  MOVWF  61
03FA:  MOVF   78,W
03FB:  MOVWF  60
03FC:  MOVF   77,W
03FD:  MOVWF  5F
03FE:  MOVF   5D,W
03FF:  MOVWF  64
0400:  MOVF   5C,W
0401:  MOVWF  63
0402:  CALL   2E3
0403:  BSF    03.1
0404:  MOVF   62,W
0405:  MOVWF  66
0406:  MOVF   61,W
0407:  MOVWF  65
0408:  MOVF   60,W
0409:  MOVWF  64
040A:  MOVF   5F,W
040B:  MOVWF  63
040C:  MOVF   7A,W
040D:  MOVWF  6A
040E:  MOVF   79,W
040F:  MOVWF  69
0410:  MOVF   78,W
0411:  MOVWF  68
0412:  MOVF   77,W
0413:  MOVWF  67
0414:  CALL   07A
0415:  CLRF   62
0416:  CLRF   61
0417:  CLRF   60
0418:  MOVLW  8E
0419:  MOVWF  5F
041A:  MOVF   7A,W
041B:  MOVWF  66
041C:  MOVF   79,W
041D:  MOVWF  65
041E:  MOVF   78,W
041F:  MOVWF  64
0420:  MOVF   77,W
0421:  MOVWF  63
0422:  CALL   300
0423:  MOVF   7A,W
0424:  MOVWF  57
0425:  MOVF   79,W
0426:  MOVWF  56
0427:  MOVF   78,W
0428:  MOVWF  55
0429:  MOVF   77,W
042A:  MOVWF  54
....................       res = 32768.0 * (float32)l; 
042B:  MOVF   5D,W
042C:  MOVWF  64
042D:  MOVF   5C,W
042E:  MOVWF  63
042F:  CALL   2E3
0430:  CLRF   62
0431:  CLRF   61
0432:  CLRF   60
0433:  MOVLW  8E
0434:  MOVWF  5F
0435:  MOVF   7A,W
0436:  MOVWF  66
0437:  MOVF   79,W
0438:  MOVWF  65
0439:  MOVF   78,W
043A:  MOVWF  64
043B:  MOVF   77,W
043C:  MOVWF  63
043D:  CALL   300
043E:  MOVF   7A,W
043F:  MOVWF  5B
0440:  MOVF   79,W
0441:  MOVWF  5A
0442:  MOVF   78,W
0443:  MOVWF  59
0444:  MOVF   77,W
0445:  MOVWF  58
....................       res += (float32)(unsigned int16)y; 
0446:  MOVF   57,W
0447:  MOVWF  62
0448:  MOVF   56,W
0449:  MOVWF  61
044A:  MOVF   55,W
044B:  MOVWF  60
044C:  MOVF   54,W
044D:  MOVWF  5F
044E:  CALL   2C4
044F:  MOVF   79,W
0450:  MOVWF  64
0451:  MOVF   78,W
0452:  MOVWF  63
0453:  CALL   2E3
0454:  BCF    03.1
0455:  MOVF   5B,W
0456:  MOVWF  66
0457:  MOVF   5A,W
0458:  MOVWF  65
0459:  MOVF   59,W
045A:  MOVWF  64
045B:  MOVF   58,W
045C:  MOVWF  63
045D:  MOVF   7A,W
045E:  MOVWF  6A
045F:  MOVF   79,W
0460:  MOVWF  69
0461:  MOVF   78,W
0462:  MOVWF  68
0463:  MOVF   77,W
0464:  MOVWF  67
0465:  CALL   07A
0466:  MOVF   7A,W
0467:  MOVWF  5B
0468:  MOVF   79,W
0469:  MOVWF  5A
046A:  MOVF   78,W
046B:  MOVWF  59
046C:  MOVF   77,W
046D:  MOVWF  58
....................    } 
046E:  GOTO   477
....................  
....................    else 
....................       res = y; 
046F:  MOVF   57,W
0470:  MOVWF  5B
0471:  MOVF   56,W
0472:  MOVWF  5A
0473:  MOVF   55,W
0474:  MOVWF  59
0475:  MOVF   54,W
0476:  MOVWF  58
....................  
....................    y = y - (float32)(unsigned int16)y; 
0477:  MOVF   57,W
0478:  MOVWF  62
0479:  MOVF   56,W
047A:  MOVWF  61
047B:  MOVF   55,W
047C:  MOVWF  60
047D:  MOVF   54,W
047E:  MOVWF  5F
047F:  CALL   2C4
0480:  MOVF   79,W
0481:  MOVWF  64
0482:  MOVF   78,W
0483:  MOVWF  63
0484:  CALL   2E3
0485:  BSF    03.1
0486:  MOVF   57,W
0487:  MOVWF  66
0488:  MOVF   56,W
0489:  MOVWF  65
048A:  MOVF   55,W
048B:  MOVWF  64
048C:  MOVF   54,W
048D:  MOVWF  63
048E:  MOVF   7A,W
048F:  MOVWF  6A
0490:  MOVF   79,W
0491:  MOVWF  69
0492:  MOVF   78,W
0493:  MOVWF  68
0494:  MOVF   77,W
0495:  MOVWF  67
0496:  CALL   07A
0497:  MOVF   7A,W
0498:  MOVWF  57
0499:  MOVF   79,W
049A:  MOVWF  56
049B:  MOVF   78,W
049C:  MOVWF  55
049D:  MOVF   77,W
049E:  MOVWF  54
....................  
....................    if (s) 
049F:  BTFSS  5E.0
04A0:  GOTO   4A4
....................       res = -res; 
04A1:  MOVF   59,W
04A2:  XORLW  80
04A3:  MOVWF  59
....................  
....................    if (y != 0) 
04A4:  MOVF   57,W
04A5:  MOVWF  62
04A6:  MOVF   56,W
04A7:  MOVWF  61
04A8:  MOVF   55,W
04A9:  MOVWF  60
04AA:  MOVF   54,W
04AB:  MOVWF  5F
04AC:  CLRF   66
04AD:  CLRF   65
04AE:  CLRF   64
04AF:  CLRF   63
04B0:  CALL   285
04B1:  BTFSC  03.2
04B2:  GOTO   4CC
....................    { 
....................       if (s == 1) 
04B3:  BTFSS  5E.0
04B4:  GOTO   4CC
....................          res -= 1.0; 
04B5:  BSF    03.1
04B6:  MOVF   5B,W
04B7:  MOVWF  66
04B8:  MOVF   5A,W
04B9:  MOVWF  65
04BA:  MOVF   59,W
04BB:  MOVWF  64
04BC:  MOVF   58,W
04BD:  MOVWF  63
04BE:  CLRF   6A
04BF:  CLRF   69
04C0:  CLRF   68
04C1:  MOVLW  7F
04C2:  MOVWF  67
04C3:  CALL   07A
04C4:  MOVF   7A,W
04C5:  MOVWF  5B
04C6:  MOVF   79,W
04C7:  MOVWF  5A
04C8:  MOVF   78,W
04C9:  MOVWF  59
04CA:  MOVF   77,W
04CB:  MOVWF  58
....................    } 
....................    if (x == 0) 
04CC:  MOVF   53,W
04CD:  MOVWF  62
04CE:  MOVF   52,W
04CF:  MOVWF  61
04D0:  MOVF   51,W
04D1:  MOVWF  60
04D2:  MOVF   50,W
04D3:  MOVWF  5F
04D4:  CLRF   66
04D5:  CLRF   65
04D6:  CLRF   64
04D7:  CLRF   63
04D8:  CALL   285
04D9:  BTFSS  03.2
04DA:  GOTO   4DF
....................       res = 0; 
04DB:  CLRF   5B
04DC:  CLRF   5A
04DD:  CLRF   59
04DE:  CLRF   58
....................  
....................    return (res); 
04DF:  MOVF   58,W
04E0:  MOVWF  77
04E1:  MOVF   59,W
04E2:  MOVWF  78
04E3:  MOVF   5A,W
04E4:  MOVWF  79
04E5:  MOVF   5B,W
04E6:  MOVWF  7A
04E7:  RETURN
.................... } 
....................  
....................  
.................... #define triac1 RB7 
.................... #define triac2 RB6 
.................... #define relay RB5 
....................  
.................... // set angle (10 levels) 
.................... float32 angleStarter = 10; 
.................... float32 angleRingTheBell = 5; 
....................  
.................... int32 valTimer0SetStarter = (int32)FLOOR((13.1072 - angleStarter) / 0.0512) - 1; 
.................... int32 valTimer0SetRingTheBell = (int32)FLOOR((13.1072 - angleRingTheBell) / 0.0512) - 1; 
....................  
.................... signed int32 count = 0; 
.................... int8 countTime = 0; 
.................... int1 flagForward = true; 
.................... int1 flagStarter = true; 
.................... int flagSTOP = false; 
.................... int8 anglePercent = 0; 
....................  
.................... #INT_EXT 
.................... void ext_isr() 
.................... { 
....................    // cross zero point detector 50Hz >> 1/50/2 sec per half pulse after diode brighet 
....................  
....................    if (flagForward) 
*
003F:  BTFSS  46.0
0040:  GOTO   043
....................       triac1 = 0; 
0041:  BCF    06.7
0042:  GOTO   044
....................    else 
....................       triac2 = 0; 
0043:  BCF    06.6
....................  
....................    if (flagStarter) 
0044:  BTFSS  46.1
0045:  GOTO   049
....................       set_timer0(valTimer0SetStarter); 
0046:  MOVF   39,W
0047:  MOVWF  01
0048:  GOTO   04B
....................    else 
....................       set_timer0(valTimer0SetRingTheBell); 
0049:  MOVF   3D,W
004A:  MOVWF  01
....................  
....................    clear_interrupt(INT_TIMER0); 
004B:  BCF    0B.2
....................    enable_interrupts(INT_TIMER0); 
004C:  BSF    0B.5
....................    clear_interrupt(INT_EXT); // waiting for next EXT 
004D:  BCF    0B.1
.................... } 
....................  
004E:  BCF    0B.1
004F:  BCF    0A.3
0050:  BCF    0A.4
0051:  GOTO   025
.................... #INT_TIMER0 
.................... void timer0_isr() 
.................... { 
....................    // ++countTime; 
....................    // if (countTime == 100) 
....................    // { 
....................    //    countTime = 0; 
....................    //    //set_timer0((int32)59.00); 
....................    //    PORTA = 0xFF; 
....................    //    delay_ms(500); 
....................    //    PORTA = 0; 
....................    // } 
....................    if (flagForward && !flagSTOP) 
0052:  BTFSS  46.0
0053:  GOTO   059
0054:  MOVF   47,F
0055:  BTFSS  03.2
0056:  GOTO   059
....................       triac1 = 1; 
0057:  BSF    06.7
0058:  GOTO   05E
....................    else if (!flagForward && !flagSTOP) 
0059:  BTFSC  46.0
005A:  GOTO   05E
005B:  MOVF   47,F
005C:  BTFSC  03.2
....................       triac2 = 1; 
005D:  BSF    06.6
....................  
....................    // set_timer0(200.00); 
....................    disable_interrupts(INT_TIMER0); 
005E:  BCF    0B.5
.................... } 
....................  
005F:  BCF    0B.2
0060:  BCF    0A.3
0061:  BCF    0A.4
0062:  GOTO   025
.................... #INT_CCP1 
.................... void ccp1_isr() 
.................... { 
....................    // encoder 
....................    if (RB1) 
0063:  BTFSS  06.1
0064:  GOTO   06E
....................    { 
....................       //clockwise 
....................       ++count; 
0065:  MOVLW  01
0066:  ADDWF  41,F
0067:  BTFSC  03.0
0068:  INCF   42,F
0069:  BTFSC  03.2
006A:  INCF   43,F
006B:  BTFSC  03.2
006C:  INCF   44,F
....................    } 
006D:  GOTO   076
....................    else 
....................    { 
....................       --count; 
006E:  MOVLW  FF
006F:  ADDWF  41,F
0070:  BTFSS  03.0
0071:  ADDWF  42,F
0072:  BTFSS  03.0
0073:  ADDWF  43,F
0074:  BTFSS  03.0
0075:  ADDWF  44,F
....................    } 
0076:  BCF    0C.2
0077:  BCF    0A.3
0078:  BCF    0A.4
0079:  GOTO   025
.................... } 
....................  
.................... void FORWARD() 
.................... { 
....................    triac2 = 0; 
....................    flagForward = true; 
.................... } 
.................... void REVERSE() 
.................... { 
....................    triac1 = 0; 
....................    flagForward = false; 
.................... } 
.................... void STOP() 
.................... { 
....................    flagSTOP = true; 
....................    triac1 = triac2 = 0; 
.................... } 
....................  
.................... void starter() 
.................... { 
....................    while (count <= 400) 
....................       FORWARD(); 
....................    STOP(); 
....................  
....................    ghima(0x01); // clear 
....................    ghima(0x80); // set 0,0 
....................    hienthi(arrNumber[count / 10]); 
....................    hienthi(arrNumber[count % 10]); 
....................  
....................    while (count >= 0) 
....................       STOP(); 
....................  
....................    ghima(0x01); // clear 
....................    ghima(0x80); // set 0,0 
....................    hienthi(arrNumber[count / 10]); 
....................    hienthi(arrNumber[count % 10]); 
....................  
....................    while (count >= -400) 
....................       REVERSE(); 
....................    STOP(); 
....................  
....................    ghima(0x01); // clear 
....................    ghima(0x80); // set 0,0 
....................    hienthi(arrNumber[count / 10]); 
....................    hienthi(arrNumber[count % 10]); 
....................  
....................    while (count <= 0) 
....................       STOP(); 
....................  
....................    ghima(0x01); // clear 
....................    ghima(0x80); // set 0,0 
....................    hienthi(arrNumber[count / 10]); 
....................    hienthi(arrNumber[count % 10]); 
....................  
....................    while (count <= 800) 
....................       FORWARD(); 
....................    STOP(); 
....................  
....................    ghima(0x01); // clear 
....................    ghima(0x80); // set 0,0 
....................    hienthi(arrNumber[count / 10]); 
....................    hienthi(arrNumber[count % 10]); 
....................  
....................    while (count >= 0) 
....................       STOP(); 
....................  
....................    ghima(0x01); // clear 
....................    ghima(0x80); // set 0,0 
....................    hienthi(arrNumber[count / 10]); 
....................    hienthi(arrNumber[count % 10]); 
....................  
....................    while (count >= -800) 
....................       REVERSE(); 
....................    STOP(); 
....................  
....................    ghima(0x01); // clear 
....................    ghima(0x80); // set 0,0 
....................    hienthi(arrNumber[count / 10]); 
....................    hienthi(arrNumber[count % 10]); 
....................  
....................    while (count <= 0) 
....................       STOP(); 
....................  
....................    ghima(0x01); // clear 
....................    ghima(0x80); // set 0,0 
....................    hienthi(arrNumber[count / 10]); 
....................    hienthi(arrNumber[count % 10]); 
....................  
....................    while (count <= 1200) 
....................       FORWARD(); 
....................    STOP(); 
....................  
....................    ghima(0x01); // clear 
....................    ghima(0x80); // set 0,0 
....................    hienthi(arrNumber[count / 10]); 
....................    hienthi(arrNumber[count % 10]); 
....................  
....................    flagStarter = false; 
.................... } 
....................  
.................... void RingTheBell() 
.................... { 
....................    while (count >= 400) 
....................       STOP(); 
....................  
....................    ghima(0x01); // clear 
....................    ghima(0x80); // set 0,0 
....................    hienthi(arrNumber[count / 10]); 
....................    hienthi(arrNumber[count % 10]); 
....................  
....................    while (count >= -800) 
....................       REVERSE(); 
....................    STOP(); 
....................  
....................    ghima(0x01); // clear 
....................    ghima(0x80); // set 0,0 
....................    hienthi(arrNumber[count / 10]); 
....................    hienthi(arrNumber[count % 10]); 
....................  
....................    while (count <= -400) 
....................       STOP(); 
....................  
....................    ghima(0x01); // clear 
....................    ghima(0x80); // set 0,0 
....................    hienthi(arrNumber[count / 10]); 
....................    hienthi(arrNumber[count % 10]); 
....................  
....................    while (count <= 800) 
....................       FORWARD(); 
....................    STOP(); 
....................  
....................    ghima(0x01); // clear 
....................    ghima(0x80); // set 0,0 
....................    hienthi(arrNumber[count / 10]); 
....................    hienthi(arrNumber[count % 10]); 
.................... } 
....................  
.................... void main() 
*
05DB:  MOVF   03,W
05DC:  ANDLW  1F
05DD:  MOVWF  03
05DE:  CLRF   34
05DF:  CLRF   33
05E0:  MOVLW  20
05E1:  MOVWF  32
05E2:  MOVLW  82
05E3:  MOVWF  31
05E4:  CLRF   38
05E5:  CLRF   37
05E6:  MOVLW  20
05E7:  MOVWF  36
05E8:  MOVLW  81
05E9:  MOVWF  35
05EA:  BSF    03.1
05EB:  MOVLW  17
05EC:  MOVWF  66
05ED:  MOVLW  B7
05EE:  MOVWF  65
05EF:  MOVLW  51
05F0:  MOVWF  64
05F1:  MOVLW  82
05F2:  MOVWF  63
05F3:  MOVF   34,W
05F4:  MOVWF  6A
05F5:  MOVF   33,W
05F6:  MOVWF  69
05F7:  MOVF   32,W
05F8:  MOVWF  68
05F9:  MOVF   31,W
05FA:  MOVWF  67
05FB:  CALL   07A
05FC:  MOVF   7A,W
05FD:  MOVWF  4D
05FE:  MOVF   79,W
05FF:  MOVWF  4C
0600:  MOVF   78,W
0601:  MOVWF  4B
0602:  MOVF   77,W
0603:  MOVWF  4A
0604:  MOVF   7A,W
0605:  MOVWF  53
0606:  MOVF   79,W
0607:  MOVWF  52
0608:  MOVF   78,W
0609:  MOVWF  51
060A:  MOVF   77,W
060B:  MOVWF  50
060C:  MOVLW  17
060D:  MOVWF  57
060E:  MOVLW  B7
060F:  MOVWF  56
0610:  MOVLW  51
0611:  MOVWF  55
0612:  MOVLW  7A
0613:  MOVWF  54
0614:  CALL   1BB
0615:  MOVF   7A,W
0616:  MOVWF  4D
0617:  MOVF   79,W
0618:  MOVWF  4C
0619:  MOVF   78,W
061A:  MOVWF  4B
061B:  MOVF   77,W
061C:  MOVWF  4A
061D:  MOVF   7A,W
061E:  MOVWF  53
061F:  MOVF   79,W
0620:  MOVWF  52
0621:  MOVF   78,W
0622:  MOVWF  51
0623:  MOVF   77,W
0624:  MOVWF  50
0625:  CALL   375
0626:  MOVF   7A,W
0627:  MOVWF  4F
0628:  MOVF   79,W
0629:  MOVWF  4E
062A:  MOVF   78,W
062B:  MOVWF  4D
062C:  MOVF   77,W
062D:  MOVWF  4C
062E:  CALL   4E8
062F:  MOVF   7A,W
0630:  MOVWF  4D
0631:  MOVF   79,W
0632:  MOVWF  4C
0633:  MOVF   78,W
0634:  MOVWF  4B
0635:  MOVLW  01
0636:  SUBWF  77,W
0637:  MOVWF  39
0638:  MOVF   78,W
0639:  MOVWF  3A
063A:  MOVLW  00
063B:  BTFSS  03.0
063C:  MOVLW  01
063D:  SUBWF  3A,F
063E:  MOVF   79,W
063F:  MOVWF  3B
0640:  MOVLW  00
0641:  BTFSS  03.0
0642:  MOVLW  01
0643:  SUBWF  3B,F
0644:  MOVF   7A,W
0645:  MOVWF  3C
0646:  MOVLW  00
0647:  BTFSS  03.0
0648:  MOVLW  01
0649:  SUBWF  3C,F
064A:  CLRF   4B
064B:  MOVF   04,W
064C:  MOVWF  4A
064D:  BCF    4B.0
064E:  BTFSC  03.7
064F:  BSF    4B.0
0650:  BSF    03.1
0651:  MOVLW  17
0652:  MOVWF  66
0653:  MOVLW  B7
0654:  MOVWF  65
0655:  MOVLW  51
0656:  MOVWF  64
0657:  MOVLW  82
0658:  MOVWF  63
0659:  MOVF   38,W
065A:  MOVWF  6A
065B:  MOVF   37,W
065C:  MOVWF  69
065D:  MOVF   36,W
065E:  MOVWF  68
065F:  MOVF   35,W
0660:  MOVWF  67
0661:  CALL   07A
0662:  MOVF   4A,W
0663:  MOVWF  04
0664:  BCF    03.7
0665:  BTFSC  4B.0
0666:  BSF    03.7
0667:  MOVF   7A,W
0668:  MOVWF  4F
0669:  MOVF   79,W
066A:  MOVWF  4E
066B:  MOVF   78,W
066C:  MOVWF  4D
066D:  MOVF   77,W
066E:  MOVWF  4C
066F:  MOVF   7A,W
0670:  MOVWF  53
0671:  MOVF   79,W
0672:  MOVWF  52
0673:  MOVF   78,W
0674:  MOVWF  51
0675:  MOVF   77,W
0676:  MOVWF  50
0677:  MOVLW  17
0678:  MOVWF  57
0679:  MOVLW  B7
067A:  MOVWF  56
067B:  MOVLW  51
067C:  MOVWF  55
067D:  MOVLW  7A
067E:  MOVWF  54
067F:  CALL   1BB
0680:  MOVF   7A,W
0681:  MOVWF  4F
0682:  MOVF   79,W
0683:  MOVWF  4E
0684:  MOVF   78,W
0685:  MOVWF  4D
0686:  MOVF   77,W
0687:  MOVWF  4C
0688:  MOVF   7A,W
0689:  MOVWF  53
068A:  MOVF   79,W
068B:  MOVWF  52
068C:  MOVF   78,W
068D:  MOVWF  51
068E:  MOVF   77,W
068F:  MOVWF  50
0690:  CALL   375
0691:  MOVF   7A,W
0692:  MOVWF  4F
0693:  MOVF   79,W
0694:  MOVWF  4E
0695:  MOVF   78,W
0696:  MOVWF  4D
0697:  MOVF   77,W
0698:  MOVWF  4C
0699:  CALL   4E8
069A:  MOVLW  01
069B:  SUBWF  77,W
069C:  MOVWF  3D
069D:  MOVF   78,W
069E:  MOVWF  3E
069F:  MOVLW  00
06A0:  BTFSS  03.0
06A1:  MOVLW  01
06A2:  SUBWF  3E,F
06A3:  MOVF   79,W
06A4:  MOVWF  3F
06A5:  MOVLW  00
06A6:  BTFSS  03.0
06A7:  MOVLW  01
06A8:  SUBWF  3F,F
06A9:  MOVF   7A,W
06AA:  MOVWF  40
06AB:  MOVLW  00
06AC:  BTFSS  03.0
06AD:  MOVLW  01
06AE:  SUBWF  40,F
06AF:  CLRF   44
06B0:  CLRF   43
06B1:  CLRF   42
06B2:  CLRF   41
06B3:  CLRF   45
06B4:  BSF    46.0
06B5:  BSF    46.1
06B6:  CLRF   47
06B7:  CLRF   48
06B8:  MOVLW  FF
06B9:  MOVWF  49
06BA:  BSF    03.5
06BB:  BSF    1F.0
06BC:  BSF    1F.1
06BD:  BSF    1F.2
06BE:  BCF    1F.3
06BF:  MOVLW  07
06C0:  MOVWF  1C
06C1:  BCF    03.7
.................... { 
....................    initLCD(); 
*
06D7:  GOTO   53B
....................  
....................    ghima(0x01); // clear 
06D8:  MOVLW  01
06D9:  MOVWF  4A
06DA:  CALL   52A
....................    ghima(0x80); // set 0,0 
06DB:  MOVLW  80
06DC:  MOVWF  4A
06DD:  CALL   52A
....................    hienthi(arrNumber[count / 10]); 
06DE:  BCF    03.1
06DF:  MOVF   44,W
06E0:  MOVWF  51
06E1:  MOVF   43,W
06E2:  MOVWF  50
06E3:  MOVF   42,W
06E4:  MOVWF  4F
06E5:  MOVF   41,W
06E6:  MOVWF  4E
06E7:  CLRF   55
06E8:  CLRF   54
06E9:  CLRF   53
06EA:  MOVLW  0A
06EB:  MOVWF  52
06EC:  CALL   550
06ED:  MOVF   7A,W
06EE:  MOVWF  4D
06EF:  MOVF   79,W
06F0:  MOVWF  4C
06F1:  MOVF   78,W
06F2:  MOVWF  4B
06F3:  MOVF   77,W
06F4:  MOVWF  4A
06F5:  MOVLW  27
06F6:  ADDWF  77,W
06F7:  MOVWF  04
06F8:  BCF    03.7
06F9:  BTFSC  78.0
06FA:  BSF    03.7
06FB:  MOVF   00,W
06FC:  MOVWF  4E
06FD:  MOVWF  53
06FE:  CALL   5CA
....................    hienthi(arrNumber[count % 10]); 
06FF:  BSF    03.1
0700:  MOVLW  4A
0701:  MOVWF  04
0702:  BCF    03.7
0703:  MOVF   44,W
0704:  MOVWF  51
0705:  MOVF   43,W
0706:  MOVWF  50
0707:  MOVF   42,W
0708:  MOVWF  4F
0709:  MOVF   41,W
070A:  MOVWF  4E
070B:  CLRF   55
070C:  CLRF   54
070D:  CLRF   53
070E:  MOVLW  0A
070F:  MOVWF  52
0710:  CALL   550
0711:  MOVF   4D,W
0712:  MOVWF  51
0713:  MOVF   4C,W
0714:  MOVWF  50
0715:  MOVF   4B,W
0716:  MOVWF  4F
0717:  MOVF   4A,W
0718:  MOVWF  4E
0719:  MOVLW  27
071A:  ADDWF  4A,W
071B:  MOVWF  04
071C:  BCF    03.7
071D:  BTFSC  4B.0
071E:  BSF    03.7
071F:  MOVF   00,W
0720:  MOVWF  52
0721:  MOVWF  53
0722:  CALL   5CA
....................  
....................    TRISB0 = TRISB1 = TRISC2 = 1; //input 
0723:  BSF    03.5
0724:  BSF    07.2
0725:  BSF    06.1
0726:  BSF    06.0
....................    TRISB5 = TRISB6 = TRISB7 = 0; //output 
0727:  BCF    06.7
0728:  BCF    06.6
0729:  BCF    06.5
....................    TRISA = 0; 
072A:  CLRF   05
....................  
....................    clear_interrupt(INT_EXT); 
072B:  BCF    03.5
072C:  BCF    0B.1
....................    enable_interrupts(INT_EXT); 
072D:  BSF    0B.4
....................    ext_int_edge(H_TO_L); 
072E:  BSF    03.5
072F:  BCF    01.6
....................  
....................    setup_ccp1(CCP_CAPTURE_FE); 
0730:  BCF    03.5
0731:  BSF    49.2
0732:  MOVF   49,W
0733:  BSF    03.5
0734:  MOVWF  07
0735:  BCF    03.5
0736:  CLRF   17
0737:  MOVLW  04
0738:  MOVWF  17
....................    setup_timer_1(T1_INTERNAL); 
0739:  MOVLW  85
073A:  MOVWF  10
....................    enable_interrupts(INT_CCP1); 
073B:  BSF    03.5
073C:  BSF    0C.2
....................  
....................    setup_timer_0(RTCC_INTERNAL | RTCC_DIV_256); //51.2us 
073D:  MOVF   01,W
073E:  ANDLW  C0
073F:  IORLW  07
0740:  MOVWF  01
....................    set_timer0(200);                             //10.086ms 
0741:  MOVLW  C8
0742:  BCF    03.5
0743:  MOVWF  01
....................    enable_interrupts(INT_TIMER0); 
0744:  BSF    0B.5
....................  
....................    enable_interrupts(GLOBAL); 
0745:  MOVLW  C0
0746:  IORWF  0B,F
....................  
....................    // PORT_B_PULLUPS(0xff); 
....................  
....................    while (TRUE) 
....................    { 
0747:  GOTO   747
....................       // ghima(0x80); // set 0,0 
....................       // hienthi(arrNumber[count / 10]); 
....................       // hienthi(arrNumber[count % 10]); 
....................       // if (flag) 
....................       // { 
....................       //    RB2 = RB3 = RB4 = 1; 
....................       // } 
....................       // else 
....................       // { 
....................       //    RB2 = RB3 = RB4 = 0; 
....................       // } 
....................    } 
.................... } 
0748:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
