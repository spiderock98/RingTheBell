CCS PCM C Compiler, Version 5.025, 42287               27-Mar-20 21:42

               Filename:   D:\ThapChuong\main.lst

               ROM used:   2805 words (34%)
                           Largest free fragment is 2048
               RAM used:   46 (12%) at main() level
                           87 (24%) worst case
               Stack used: 3 locations (2 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  05
0001:  MOVWF  0A
0002:  GOTO   5F8
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.4
0018:  GOTO   01B
0019:  BTFSC  0B.1
001A:  GOTO   036
001B:  MOVLW  8C
001C:  MOVWF  04
001D:  BTFSS  00.2
001E:  GOTO   021
001F:  BTFSC  0C.2
0020:  GOTO   039
0021:  BTFSS  0B.5
0022:  GOTO   025
0023:  BTFSC  0B.2
0024:  GOTO   03C
0025:  MOVF   22,W
0026:  MOVWF  04
0027:  MOVF   23,W
0028:  MOVWF  77
0029:  MOVF   24,W
002A:  MOVWF  78
002B:  MOVF   25,W
002C:  MOVWF  79
002D:  MOVF   26,W
002E:  MOVWF  7A
002F:  MOVF   20,W
0030:  MOVWF  0A
0031:  SWAPF  21,W
0032:  MOVWF  03
0033:  SWAPF  7F,F
0034:  SWAPF  7F,W
0035:  RETFIE
0036:  BCF    0A.3
0037:  BCF    0A.4
0038:  GOTO   03F
0039:  BCF    0A.3
003A:  BCF    0A.4
003B:  GOTO   073
003C:  BCF    0A.3
003D:  BCF    0A.4
003E:  GOTO   059
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
*
008B:  MOVLW  80
008C:  BTFSC  03.1
008D:  XORWF  67,F
008E:  CLRF   6C
008F:  CLRF   6D
0090:  MOVF   63,W
0091:  MOVWF  6B
0092:  MOVF   67,W
0093:  XORWF  6B,F
0094:  MOVF   62,W
0095:  BTFSC  03.2
0096:  GOTO   17B
0097:  MOVWF  6A
0098:  MOVWF  77
0099:  MOVF   66,W
009A:  BTFSC  03.2
009B:  GOTO   184
009C:  SUBWF  6A,F
009D:  BTFSC  03.2
009E:  GOTO   120
009F:  BTFSS  03.0
00A0:  GOTO   0DE
00A1:  MOVF   67,W
00A2:  MOVWF  70
00A3:  BSF    70.7
00A4:  MOVF   68,W
00A5:  MOVWF  6F
00A6:  MOVF   69,W
00A7:  MOVWF  6E
00A8:  CLRF   6D
00A9:  BCF    03.0
00AA:  RRF    70,F
00AB:  RRF    6F,F
00AC:  RRF    6E,F
00AD:  RRF    6D,F
00AE:  DECFSZ 6A,F
00AF:  GOTO   0A8
00B0:  BTFSS  6B.7
00B1:  GOTO   0B5
00B2:  BSF    6C.0
00B3:  GOTO   198
00B4:  BCF    6C.0
00B5:  BCF    6A.0
00B6:  BSF    6C.4
00B7:  MOVLW  65
00B8:  MOVWF  04
00B9:  BCF    03.7
00BA:  GOTO   1AD
00BB:  BCF    6C.4
00BC:  BTFSC  6B.7
00BD:  GOTO   0C8
00BE:  BTFSS  6A.0
00BF:  GOTO   0D3
00C0:  RRF    70,F
00C1:  RRF    6F,F
00C2:  RRF    6E,F
00C3:  RRF    6D,F
00C4:  INCF   77,F
00C5:  BTFSC  03.2
00C6:  GOTO   193
00C7:  GOTO   0D3
00C8:  BTFSC  70.7
00C9:  GOTO   0D6
00CA:  BCF    03.0
00CB:  RLF    6D,F
00CC:  RLF    6E,F
00CD:  RLF    6F,F
00CE:  RLF    70,F
00CF:  DECF   77,F
00D0:  BTFSC  03.2
00D1:  GOTO   193
00D2:  GOTO   0C8
00D3:  BSF    6C.6
00D4:  GOTO   140
00D5:  BCF    6C.6
00D6:  MOVF   63,W
00D7:  MOVWF  6B
00D8:  BTFSS  6B.7
00D9:  GOTO   0DC
00DA:  BSF    70.7
00DB:  GOTO   18C
00DC:  BCF    70.7
00DD:  GOTO   18C
00DE:  MOVF   66,W
00DF:  MOVWF  6A
00E0:  MOVWF  77
00E1:  MOVF   62,W
00E2:  SUBWF  6A,F
00E3:  MOVF   63,W
00E4:  MOVWF  70
00E5:  BSF    70.7
00E6:  MOVF   64,W
00E7:  MOVWF  6F
00E8:  MOVF   65,W
00E9:  MOVWF  6E
00EA:  CLRF   6D
00EB:  BCF    03.0
00EC:  RRF    70,F
00ED:  RRF    6F,F
00EE:  RRF    6E,F
00EF:  RRF    6D,F
00F0:  DECFSZ 6A,F
00F1:  GOTO   0EA
00F2:  BTFSS  6B.7
00F3:  GOTO   0F7
00F4:  BSF    6C.1
00F5:  GOTO   198
00F6:  BCF    6C.1
00F7:  BCF    6A.0
00F8:  BSF    6C.5
00F9:  MOVLW  69
00FA:  MOVWF  04
00FB:  BCF    03.7
00FC:  GOTO   1AD
00FD:  BCF    6C.5
00FE:  BTFSC  6B.7
00FF:  GOTO   10A
0100:  BTFSS  6A.0
0101:  GOTO   115
0102:  RRF    70,F
0103:  RRF    6F,F
0104:  RRF    6E,F
0105:  RRF    6D,F
0106:  INCF   77,F
0107:  BTFSC  03.2
0108:  GOTO   193
0109:  GOTO   115
010A:  BTFSC  70.7
010B:  GOTO   118
010C:  BCF    03.0
010D:  RLF    6D,F
010E:  RLF    6E,F
010F:  RLF    6F,F
0110:  RLF    70,F
0111:  DECF   77,F
0112:  BTFSC  03.2
0113:  GOTO   193
0114:  GOTO   10A
0115:  BSF    6C.7
0116:  GOTO   140
0117:  BCF    6C.7
0118:  MOVF   67,W
0119:  MOVWF  6B
011A:  BTFSS  6B.7
011B:  GOTO   11E
011C:  BSF    70.7
011D:  GOTO   18C
011E:  BCF    70.7
011F:  GOTO   18C
0120:  MOVF   67,W
0121:  MOVWF  70
0122:  BSF    70.7
0123:  MOVF   68,W
0124:  MOVWF  6F
0125:  MOVF   69,W
0126:  MOVWF  6E
0127:  BTFSS  6B.7
0128:  GOTO   12D
0129:  BCF    70.7
012A:  BSF    6C.2
012B:  GOTO   198
012C:  BCF    6C.2
012D:  CLRF   6D
012E:  BCF    6A.0
012F:  MOVLW  65
0130:  MOVWF  04
0131:  BCF    03.7
0132:  GOTO   1AD
0133:  BTFSC  6B.7
0134:  GOTO   156
0135:  MOVF   63,W
0136:  MOVWF  6B
0137:  BTFSS  6A.0
0138:  GOTO   140
0139:  RRF    70,F
013A:  RRF    6F,F
013B:  RRF    6E,F
013C:  RRF    6D,F
013D:  INCF   77,F
013E:  BTFSC  03.2
013F:  GOTO   193
0140:  BTFSS  6D.7
0141:  GOTO   151
0142:  INCF   6E,F
0143:  BTFSS  03.2
0144:  GOTO   151
0145:  INCF   6F,F
0146:  BTFSS  03.2
0147:  GOTO   151
0148:  INCF   70,F
0149:  BTFSS  03.2
014A:  GOTO   151
014B:  RRF    70,F
014C:  RRF    6F,F
014D:  RRF    6E,F
014E:  INCF   77,F
014F:  BTFSC  03.2
0150:  GOTO   193
0151:  BTFSC  6C.6
0152:  GOTO   0D5
0153:  BTFSC  6C.7
0154:  GOTO   117
0155:  GOTO   175
0156:  MOVLW  80
0157:  XORWF  70,F
0158:  BTFSS  70.7
0159:  GOTO   15E
015A:  GOTO   198
015B:  MOVF   67,W
015C:  MOVWF  6B
015D:  GOTO   16B
015E:  MOVF   63,W
015F:  MOVWF  6B
0160:  MOVF   70,F
0161:  BTFSS  03.2
0162:  GOTO   16B
0163:  MOVF   6F,F
0164:  BTFSS  03.2
0165:  GOTO   16B
0166:  MOVF   6E,F
0167:  BTFSS  03.2
0168:  GOTO   16B
0169:  CLRF   77
016A:  GOTO   18C
016B:  BTFSC  70.7
016C:  GOTO   175
016D:  BCF    03.0
016E:  RLF    6D,F
016F:  RLF    6E,F
0170:  RLF    6F,F
0171:  RLF    70,F
0172:  DECFSZ 77,F
0173:  GOTO   16B
0174:  GOTO   193
0175:  BTFSS  6B.7
0176:  GOTO   179
0177:  BSF    70.7
0178:  GOTO   18C
0179:  BCF    70.7
017A:  GOTO   18C
017B:  MOVF   66,W
017C:  MOVWF  77
017D:  MOVF   67,W
017E:  MOVWF  70
017F:  MOVF   68,W
0180:  MOVWF  6F
0181:  MOVF   69,W
0182:  MOVWF  6E
0183:  GOTO   18C
0184:  MOVF   62,W
0185:  MOVWF  77
0186:  MOVF   63,W
0187:  MOVWF  70
0188:  MOVF   64,W
0189:  MOVWF  6F
018A:  MOVF   65,W
018B:  MOVWF  6E
018C:  MOVF   70,W
018D:  MOVWF  78
018E:  MOVF   6F,W
018F:  MOVWF  79
0190:  MOVF   6E,W
0191:  MOVWF  7A
0192:  GOTO   1CB
0193:  CLRF   77
0194:  CLRF   78
0195:  CLRF   79
0196:  CLRF   7A
0197:  GOTO   1CB
0198:  CLRF   6D
0199:  COMF   6E,F
019A:  COMF   6F,F
019B:  COMF   70,F
019C:  COMF   6D,F
019D:  INCF   6D,F
019E:  BTFSS  03.2
019F:  GOTO   1A6
01A0:  INCF   6E,F
01A1:  BTFSS  03.2
01A2:  GOTO   1A6
01A3:  INCF   6F,F
01A4:  BTFSC  03.2
01A5:  INCF   70,F
01A6:  BTFSC  6C.0
01A7:  GOTO   0B4
01A8:  BTFSC  6C.1
01A9:  GOTO   0F6
01AA:  BTFSC  6C.2
01AB:  GOTO   12C
01AC:  GOTO   15B
01AD:  MOVF   00,W
01AE:  ADDWF  6E,F
01AF:  BTFSS  03.0
01B0:  GOTO   1B7
01B1:  INCF   6F,F
01B2:  BTFSS  03.2
01B3:  GOTO   1B7
01B4:  INCF   70,F
01B5:  BTFSC  03.2
01B6:  BSF    6A.0
01B7:  DECF   04,F
01B8:  MOVF   00,W
01B9:  ADDWF  6F,F
01BA:  BTFSS  03.0
01BB:  GOTO   1BF
01BC:  INCF   70,F
01BD:  BTFSC  03.2
01BE:  BSF    6A.0
01BF:  DECF   04,F
01C0:  MOVF   00,W
01C1:  BTFSS  00.7
01C2:  XORLW  80
01C3:  ADDWF  70,F
01C4:  BTFSC  03.0
01C5:  BSF    6A.0
01C6:  BTFSC  6C.4
01C7:  GOTO   0BB
01C8:  BTFSC  6C.5
01C9:  GOTO   0FD
01CA:  GOTO   133
01CB:  RETURN
01CC:  MOVF   4F,W
01CD:  BTFSC  03.2
01CE:  GOTO   291
01CF:  MOVWF  5B
01D0:  MOVF   53,W
01D1:  BTFSC  03.2
01D2:  GOTO   291
01D3:  SUBWF  5B,F
01D4:  BTFSS  03.0
01D5:  GOTO   1DB
01D6:  MOVLW  7F
01D7:  ADDWF  5B,F
01D8:  BTFSC  03.0
01D9:  GOTO   291
01DA:  GOTO   1E1
01DB:  MOVLW  81
01DC:  SUBWF  5B,F
01DD:  BTFSS  03.0
01DE:  GOTO   291
01DF:  BTFSC  03.2
01E0:  GOTO   291
01E1:  MOVF   5B,W
01E2:  MOVWF  77
01E3:  CLRF   78
01E4:  CLRF   79
01E5:  CLRF   7A
01E6:  CLRF   5A
01E7:  MOVF   50,W
01E8:  MOVWF  59
01E9:  BSF    59.7
01EA:  MOVF   51,W
01EB:  MOVWF  58
01EC:  MOVF   52,W
01ED:  MOVWF  57
01EE:  MOVLW  19
01EF:  MOVWF  5B
01F0:  MOVF   56,W
01F1:  SUBWF  57,F
01F2:  BTFSC  03.0
01F3:  GOTO   204
01F4:  MOVLW  01
01F5:  SUBWF  58,F
01F6:  BTFSC  03.0
01F7:  GOTO   204
01F8:  SUBWF  59,F
01F9:  BTFSC  03.0
01FA:  GOTO   204
01FB:  SUBWF  5A,F
01FC:  BTFSC  03.0
01FD:  GOTO   204
01FE:  INCF   5A,F
01FF:  INCF   59,F
0200:  INCF   58,F
0201:  MOVF   56,W
0202:  ADDWF  57,F
0203:  GOTO   236
0204:  MOVF   55,W
0205:  SUBWF  58,F
0206:  BTFSC  03.0
0207:  GOTO   21F
0208:  MOVLW  01
0209:  SUBWF  59,F
020A:  BTFSC  03.0
020B:  GOTO   21F
020C:  SUBWF  5A,F
020D:  BTFSC  03.0
020E:  GOTO   21F
020F:  INCF   5A,F
0210:  INCF   59,F
0211:  MOVF   55,W
0212:  ADDWF  58,F
0213:  MOVF   56,W
0214:  ADDWF  57,F
0215:  BTFSS  03.0
0216:  GOTO   236
0217:  INCF   58,F
0218:  BTFSS  03.2
0219:  GOTO   236
021A:  INCF   59,F
021B:  BTFSS  03.2
021C:  GOTO   236
021D:  INCF   5A,F
021E:  GOTO   236
021F:  MOVF   54,W
0220:  IORLW  80
0221:  SUBWF  59,F
0222:  BTFSC  03.0
0223:  GOTO   235
0224:  MOVLW  01
0225:  SUBWF  5A,F
0226:  BTFSC  03.0
0227:  GOTO   235
0228:  INCF   5A,F
0229:  MOVF   54,W
022A:  IORLW  80
022B:  ADDWF  59,F
022C:  MOVF   55,W
022D:  ADDWF  58,F
022E:  BTFSS  03.0
022F:  GOTO   213
0230:  INCF   59,F
0231:  BTFSS  03.2
0232:  GOTO   213
0233:  INCF   5A,F
0234:  GOTO   213
0235:  BSF    7A.0
0236:  DECFSZ 5B,F
0237:  GOTO   239
0238:  GOTO   244
0239:  BCF    03.0
023A:  RLF    57,F
023B:  RLF    58,F
023C:  RLF    59,F
023D:  RLF    5A,F
023E:  BCF    03.0
023F:  RLF    7A,F
0240:  RLF    79,F
0241:  RLF    78,F
0242:  RLF    5C,F
0243:  GOTO   1F0
0244:  BTFSS  5C.0
0245:  GOTO   24C
0246:  BCF    03.0
0247:  RRF    78,F
0248:  RRF    79,F
0249:  RRF    7A,F
024A:  RRF    5C,F
024B:  GOTO   24F
024C:  DECF   77,F
024D:  BTFSC  03.2
024E:  GOTO   291
024F:  BTFSC  5C.7
0250:  GOTO   278
0251:  BCF    03.0
0252:  RLF    57,F
0253:  RLF    58,F
0254:  RLF    59,F
0255:  RLF    5A,F
0256:  MOVF   56,W
0257:  SUBWF  57,F
0258:  BTFSC  03.0
0259:  GOTO   264
025A:  MOVLW  01
025B:  SUBWF  58,F
025C:  BTFSC  03.0
025D:  GOTO   264
025E:  SUBWF  59,F
025F:  BTFSC  03.0
0260:  GOTO   264
0261:  SUBWF  5A,F
0262:  BTFSS  03.0
0263:  GOTO   287
0264:  MOVF   55,W
0265:  SUBWF  58,F
0266:  BTFSC  03.0
0267:  GOTO   26F
0268:  MOVLW  01
0269:  SUBWF  59,F
026A:  BTFSC  03.0
026B:  GOTO   26F
026C:  SUBWF  5A,F
026D:  BTFSS  03.0
026E:  GOTO   287
026F:  MOVF   54,W
0270:  IORLW  80
0271:  SUBWF  59,F
0272:  BTFSC  03.0
0273:  GOTO   278
0274:  MOVLW  01
0275:  SUBWF  5A,F
0276:  BTFSS  03.0
0277:  GOTO   287
0278:  INCF   7A,F
0279:  BTFSS  03.2
027A:  GOTO   287
027B:  INCF   79,F
027C:  BTFSS  03.2
027D:  GOTO   287
027E:  INCF   78,F
027F:  BTFSS  03.2
0280:  GOTO   287
0281:  INCF   77,F
0282:  BTFSC  03.2
0283:  GOTO   291
0284:  RRF    78,F
0285:  RRF    79,F
0286:  RRF    7A,F
0287:  MOVF   50,W
0288:  MOVWF  5B
0289:  MOVF   54,W
028A:  XORWF  5B,F
028B:  BTFSS  5B.7
028C:  GOTO   28F
028D:  BSF    78.7
028E:  GOTO   295
028F:  BCF    78.7
0290:  GOTO   295
0291:  CLRF   77
0292:  CLRF   78
0293:  CLRF   79
0294:  CLRF   7A
0295:  RETURN
0296:  MOVF   5F,W
0297:  MOVWF  66
0298:  MOVF   63,W
0299:  XORWF  66,F
029A:  BTFSS  66.7
029B:  GOTO   2A1
029C:  BCF    03.2
029D:  BCF    03.0
029E:  BTFSC  5F.7
029F:  BSF    03.0
02A0:  GOTO   2D4
02A1:  MOVF   5F,W
02A2:  MOVWF  66
02A3:  MOVF   62,W
02A4:  MOVWF  67
02A5:  MOVF   5E,W
02A6:  SUBWF  67,F
02A7:  BTFSC  03.2
02A8:  GOTO   2AF
02A9:  BTFSS  66.7
02AA:  GOTO   2D4
02AB:  MOVF   03,W
02AC:  XORLW  01
02AD:  MOVWF  03
02AE:  GOTO   2D4
02AF:  MOVF   63,W
02B0:  MOVWF  67
02B1:  MOVF   5F,W
02B2:  SUBWF  67,F
02B3:  BTFSC  03.2
02B4:  GOTO   2BB
02B5:  BTFSS  66.7
02B6:  GOTO   2D4
02B7:  MOVF   03,W
02B8:  XORLW  01
02B9:  MOVWF  03
02BA:  GOTO   2D4
02BB:  MOVF   64,W
02BC:  MOVWF  67
02BD:  MOVF   60,W
02BE:  SUBWF  67,F
02BF:  BTFSC  03.2
02C0:  GOTO   2C7
02C1:  BTFSS  66.7
02C2:  GOTO   2D4
02C3:  MOVF   03,W
02C4:  XORLW  01
02C5:  MOVWF  03
02C6:  GOTO   2D4
02C7:  MOVF   65,W
02C8:  MOVWF  67
02C9:  MOVF   61,W
02CA:  SUBWF  67,F
02CB:  BTFSC  03.2
02CC:  GOTO   2D3
02CD:  BTFSS  66.7
02CE:  GOTO   2D4
02CF:  MOVF   03,W
02D0:  XORLW  01
02D1:  MOVWF  03
02D2:  GOTO   2D4
02D3:  BCF    03.0
02D4:  RETURN
02D5:  MOVLW  8E
02D6:  MOVWF  77
02D7:  MOVF   5E,W
02D8:  SUBWF  77,F
02D9:  MOVF   5F,W
02DA:  MOVWF  79
02DB:  MOVF   60,W
02DC:  MOVWF  78
02DD:  BSF    79.7
02DE:  MOVF   77,F
02DF:  BTFSC  03.2
02E0:  GOTO   2EC
02E1:  BCF    03.0
02E2:  MOVF   79,F
02E3:  BTFSS  03.2
02E4:  GOTO   2E8
02E5:  MOVF   78,F
02E6:  BTFSC  03.2
02E7:  GOTO   2EC
02E8:  RRF    79,F
02E9:  RRF    78,F
02EA:  DECFSZ 77,F
02EB:  GOTO   2E1
02EC:  BTFSS  5F.7
02ED:  GOTO   2F3
02EE:  COMF   78,F
02EF:  COMF   79,F
02F0:  INCF   78,F
02F1:  BTFSC  03.2
02F2:  INCF   79,F
02F3:  RETURN
02F4:  MOVLW  8E
02F5:  MOVWF  77
02F6:  MOVF   63,W
02F7:  MOVWF  78
02F8:  MOVF   62,W
02F9:  MOVWF  79
02FA:  CLRF   7A
02FB:  MOVF   78,F
02FC:  BTFSS  03.2
02FD:  GOTO   308
02FE:  MOVF   79,W
02FF:  MOVWF  78
0300:  CLRF   79
0301:  MOVLW  08
0302:  SUBWF  77,F
0303:  MOVF   78,F
0304:  BTFSS  03.2
0305:  GOTO   308
0306:  CLRF   77
0307:  GOTO   310
0308:  BCF    03.0
0309:  BTFSC  78.7
030A:  GOTO   30F
030B:  RLF    79,F
030C:  RLF    78,F
030D:  DECF   77,F
030E:  GOTO   308
030F:  BCF    78.7
0310:  RETURN
0311:  MOVF   5E,W
0312:  BTFSC  03.2
0313:  GOTO   381
0314:  MOVWF  66
0315:  MOVF   62,W
0316:  BTFSC  03.2
0317:  GOTO   381
0318:  ADDWF  66,F
0319:  BTFSC  03.0
031A:  GOTO   322
031B:  MOVLW  7F
031C:  SUBWF  66,F
031D:  BTFSS  03.0
031E:  GOTO   381
031F:  BTFSC  03.2
0320:  GOTO   381
0321:  GOTO   326
0322:  MOVLW  81
0323:  ADDWF  66,F
0324:  BTFSC  03.0
0325:  GOTO   381
0326:  MOVF   66,W
0327:  MOVWF  77
0328:  CLRF   78
0329:  CLRF   79
032A:  CLRF   7A
032B:  MOVF   5F,W
032C:  MOVWF  6A
032D:  BSF    6A.7
032E:  MOVF   60,W
032F:  MOVWF  69
0330:  MOVF   61,W
0331:  MOVWF  68
0332:  MOVLW  18
0333:  MOVWF  66
0334:  CLRF   67
0335:  BTFSS  68.0
0336:  GOTO   34F
0337:  MOVF   65,W
0338:  ADDWF  7A,F
0339:  BTFSS  03.0
033A:  GOTO   341
033B:  INCF   79,F
033C:  BTFSS  03.2
033D:  GOTO   341
033E:  INCF   78,F
033F:  BTFSC  03.2
0340:  BSF    67.7
0341:  MOVF   64,W
0342:  ADDWF  79,F
0343:  BTFSS  03.0
0344:  GOTO   348
0345:  INCF   78,F
0346:  BTFSC  03.2
0347:  BSF    67.7
0348:  MOVF   63,W
0349:  MOVWF  60
034A:  BSF    60.7
034B:  MOVF   60,W
034C:  ADDWF  78,F
034D:  BTFSC  03.0
034E:  BSF    67.7
034F:  RLF    67,F
0350:  RRF    78,F
0351:  RRF    79,F
0352:  RRF    7A,F
0353:  RRF    6A,F
0354:  RRF    69,F
0355:  RRF    68,F
0356:  BCF    03.0
0357:  DECFSZ 66,F
0358:  GOTO   334
0359:  MOVLW  01
035A:  ADDWF  77,F
035B:  BTFSC  03.0
035C:  GOTO   381
035D:  BTFSC  78.7
035E:  GOTO   366
035F:  RLF    6A,F
0360:  RLF    7A,F
0361:  RLF    79,F
0362:  RLF    78,F
0363:  DECF   77,F
0364:  BTFSC  03.2
0365:  GOTO   381
0366:  BTFSS  6A.7
0367:  GOTO   377
0368:  INCF   7A,F
0369:  BTFSS  03.2
036A:  GOTO   377
036B:  INCF   79,F
036C:  BTFSS  03.2
036D:  GOTO   377
036E:  INCF   78,F
036F:  BTFSS  03.2
0370:  GOTO   377
0371:  RRF    78,F
0372:  RRF    79,F
0373:  RRF    7A,F
0374:  INCF   77,F
0375:  BTFSC  03.2
0376:  GOTO   381
0377:  MOVF   5F,W
0378:  MOVWF  67
0379:  MOVF   63,W
037A:  XORWF  67,F
037B:  BTFSS  67.7
037C:  GOTO   37F
037D:  BSF    78.7
037E:  GOTO   385
037F:  BCF    78.7
0380:  GOTO   385
0381:  CLRF   77
0382:  CLRF   78
0383:  CLRF   79
0384:  CLRF   7A
0385:  RETURN
*
04F9:  MOVF   4B,W
04FA:  SUBLW  B6
04FB:  MOVWF  4B
04FC:  CLRF   7A
04FD:  MOVF   4C,W
04FE:  MOVWF  4F
04FF:  BSF    4C.7
0500:  BCF    03.0
0501:  RRF    4C,F
0502:  RRF    4D,F
0503:  RRF    4E,F
0504:  RRF    7A,F
0505:  RRF    79,F
0506:  RRF    78,F
0507:  RRF    77,F
0508:  DECFSZ 4B,F
0509:  GOTO   500
050A:  BTFSS  4F.7
050B:  GOTO   517
050C:  COMF   77,F
050D:  COMF   78,F
050E:  COMF   79,F
050F:  COMF   7A,F
0510:  INCF   77,F
0511:  BTFSC  03.2
0512:  INCF   78,F
0513:  BTFSC  03.2
0514:  INCF   79,F
0515:  BTFSC  03.2
0516:  INCF   7A,F
0517:  RETURN
*
0564:  BTFSC  03.1
0565:  GOTO   569
0566:  MOVLW  55
0567:  MOVWF  04
0568:  BCF    03.7
0569:  MOVF   50,W
056A:  XORWF  54,W
056B:  ANDLW  80
056C:  MOVWF  5A
056D:  BTFSS  50.7
056E:  GOTO   57A
056F:  COMF   4D,F
0570:  COMF   4E,F
0571:  COMF   4F,F
0572:  COMF   50,F
0573:  INCF   4D,F
0574:  BTFSC  03.2
0575:  INCF   4E,F
0576:  BTFSC  03.2
0577:  INCF   4F,F
0578:  BTFSC  03.2
0579:  INCF   50,F
057A:  BTFSS  54.7
057B:  GOTO   587
057C:  COMF   51,F
057D:  COMF   52,F
057E:  COMF   53,F
057F:  COMF   54,F
0580:  INCF   51,F
0581:  BTFSC  03.2
0582:  INCF   52,F
0583:  BTFSC  03.2
0584:  INCF   53,F
0585:  BTFSC  03.2
0586:  INCF   54,F
0587:  CLRF   77
0588:  CLRF   78
0589:  CLRF   79
058A:  CLRF   7A
058B:  CLRF   55
058C:  CLRF   56
058D:  CLRF   57
058E:  CLRF   58
058F:  MOVF   54,W
0590:  IORWF  53,W
0591:  IORWF  52,W
0592:  IORWF  51,W
0593:  BTFSC  03.2
0594:  GOTO   5C5
0595:  MOVLW  20
0596:  MOVWF  59
0597:  BCF    03.0
0598:  RLF    4D,F
0599:  RLF    4E,F
059A:  RLF    4F,F
059B:  RLF    50,F
059C:  RLF    55,F
059D:  RLF    56,F
059E:  RLF    57,F
059F:  RLF    58,F
05A0:  MOVF   54,W
05A1:  SUBWF  58,W
05A2:  BTFSS  03.2
05A3:  GOTO   5AE
05A4:  MOVF   53,W
05A5:  SUBWF  57,W
05A6:  BTFSS  03.2
05A7:  GOTO   5AE
05A8:  MOVF   52,W
05A9:  SUBWF  56,W
05AA:  BTFSS  03.2
05AB:  GOTO   5AE
05AC:  MOVF   51,W
05AD:  SUBWF  55,W
05AE:  BTFSS  03.0
05AF:  GOTO   5BF
05B0:  MOVF   51,W
05B1:  SUBWF  55,F
05B2:  MOVF   52,W
05B3:  BTFSS  03.0
05B4:  INCFSZ 52,W
05B5:  SUBWF  56,F
05B6:  MOVF   53,W
05B7:  BTFSS  03.0
05B8:  INCFSZ 53,W
05B9:  SUBWF  57,F
05BA:  MOVF   54,W
05BB:  BTFSS  03.0
05BC:  INCFSZ 54,W
05BD:  SUBWF  58,F
05BE:  BSF    03.0
05BF:  RLF    77,F
05C0:  RLF    78,F
05C1:  RLF    79,F
05C2:  RLF    7A,F
05C3:  DECFSZ 59,F
05C4:  GOTO   597
05C5:  BTFSS  5A.7
05C6:  GOTO   5D2
05C7:  COMF   77,F
05C8:  COMF   78,F
05C9:  COMF   79,F
05CA:  COMF   7A,F
05CB:  INCF   77,F
05CC:  BTFSC  03.2
05CD:  INCF   78,F
05CE:  BTFSC  03.2
05CF:  INCF   79,F
05D0:  BTFSC  03.2
05D1:  INCF   7A,F
05D2:  MOVF   55,W
05D3:  MOVWF  00
05D4:  INCF   04,F
05D5:  MOVF   56,W
05D6:  MOVWF  00
05D7:  INCF   04,F
05D8:  MOVF   57,W
05D9:  MOVWF  00
05DA:  INCF   04,F
05DB:  MOVF   58,W
05DC:  MOVWF  00
05DD:  RETURN
....................  
.................... #list 
....................  
.................... #include <def_16f877a.h> 
.................... //========================= Register Definitions ========================== 
.................... //-----Register Files------------------------------------------------------ 
.................... #byte INDF         =0x00 
.................... #byte TMR0         =0x01 
.................... #byte PCL          =0x02 
.................... #byte STATUS       =0x03 
.................... #byte FSR          =0x04 
.................... #byte PORTA    = 0x05 
.................... #byte PORTB    = 0x06 
.................... #byte PORTC    = 0x07 
.................... #byte PORTD    = 0x08 
.................... #byte PORTE    = 0x09 
.................... #byte PCLATH       =0x0A 
.................... #byte INTCON       =0x0B 
.................... #byte PIR1	   =0x0C 
.................... #byte PIR2	   =0x0D 
.................... #byte TMR1L	   =0x0E 
.................... #byte TMR1H        =0x0F 
.................... #byte T1CON        =0x10 
.................... #byte TMR2	   =0x11 
.................... #byte T2CON	   =0x12 
.................... #byte SSPBUF       =0x13 
.................... #byte SSPCON       =0x14 
.................... #byte CCPR1L       =0x15 
.................... #byte CCPR1H       =0x16 
.................... #byte CCP1CON      =0x17 
.................... #byte RCSTA        =0x18 
.................... #byte TXREG        =0x19 
.................... #byte RCREG        =0x1A 
.................... #byte CCPR2L       =0x1B 
.................... #byte CCPR2H       =0x1C 
.................... #byte CCP2CON      =0x1D 
.................... #byte ADRESH       =0x1E 
.................... #byte ADCON0	   =0x1F 
.................... #byte OPTION_REG   =0x81 
.................... //-------------- TRIS PORT ----------------------------- 
.................... #byte TRISA        =0x85 
.................... #byte TRISB	   =0x86 
.................... #byte TRISC	   =0x87 
.................... #byte TRISD        =0x88 
.................... #byte TRISE	   =0x89 
.................... #byte PIE1	   =0x8C 
.................... #byte PIE2	   =0x8D 
.................... #byte PCON	   =0x8E 
....................  
.................... #byte SSPCON2      =0x91 
.................... #byte PR2          =0x92 
.................... #byte SSPADD       =0x93 
.................... #byte SSPSTAT      =0x94 
....................  
.................... #byte TXSTA        =0x98 
.................... #byte SPBRG        =0x99 
....................  
.................... #byte ADRESL       =0x9E 
.................... #byte ADCON1       =0x9F 
....................  
.................... /*	bank 2 registers */ 
....................  
.................... #byte EEDATA	   =0x010C 
.................... #byte EEADR	   =0x010D 
.................... #byte EEDATH       =0x010E 
.................... #byte EEADRH       =0x010F 
....................  
.................... /*	bank 3 registers */ 
....................  
.................... #byte EECON1	   =0x018C 
.................... #byte EECON2	   =0x018D 
....................  
.................... //----- STATUS Bits -------------------------------------------------------- 
....................  
.................... // For Assembly Language - Note upper case 
.................... #define IRP 	7 
.................... #define RP1 	6 
.................... #define RP0 	5 
.................... #define NOT_TO 	4 
.................... #define NOT_PD 	3 
.................... #define Z 	2 
.................... #define DC 	1 
.................... #define C  	0 
....................  
.................... //---------------- TRIS BIT PORT-------------------------------------- 
.................... //------------------TRISA bits--------------------------- 
....................  
.................... #bit TRISA5     =0x85.5 
.................... #bit TRISA4     =0x85.4 
.................... #bit TRISA3     =0x85.3 
.................... #bit TRISA2     =0x85.2 
.................... #bit TRISA1     =0x85.1 
.................... #bit TRISA0     =0x85.0 
....................  
.................... //-----------------TRISB bits----------------------------- 
....................  
.................... #bit TRISB7     =0x86.7 
.................... #bit TRISB6     =0x86.6 
.................... #bit TRISB5     =0x86.5 
.................... #bit TRISB4     =0x86.4 
.................... #bit TRISB3     =0x86.3 
.................... #bit TRISB2     =0x86.2 
.................... #bit TRISB1     =0x86.1 
.................... #bit TRISB0     =0x86.0 
....................  
.................... //----------------TRISC bits------------------- 
....................  
.................... #bit TRISC7     =0x87.7 
.................... #bit TRISC6     =0x87.6 
.................... #bit TRISC5     =0x87.5 
.................... #bit TRISC4     =0x87.4 
.................... #bit TRISC3     =0x87.3 
.................... #bit TRISC2     =0x87.2 
.................... #bit TRISC1     =0x87.1 
.................... #bit TRISC0     =0x87.0 
.................... //------------------TRISD bit------------------ 
.................... #bit TRISD7     =0x88.7 
.................... #bit TRISD6     =0x88.6 
.................... #bit TRISD5     =0x88.5 
.................... #bit TRISD4     =0x88.4 
.................... #bit TRISD3     =0x88.3 
.................... #bit TRISD2     =0x88.2 
.................... #bit TRISD1     =0x88.1 
.................... #bit TRISD0     =0x88.0 
.................... //-------------TRISE bit---------------------- 
.................... #bit TRISE2     =0x89.2 
.................... #bit TRISE1     =0x89.1 
.................... #bit TRISE0     =0x89.0 
.................... //--------------------------------------------------------------------------- 
.................... //---------PORTA bits------------------ 
.................... #bit RA4			= 0x05.4 
.................... #bit RA3			= 0x05.3 
.................... #bit RA2			= 0x05.2 
.................... #bit RA1			= 0x05.1 
.................... #bit RA0			= 0x05.0 
.................... //---------PORTB bits------------------ 
.................... #bit RB7			= 0x06.7 
.................... #bit RB6			= 0x06.6 
.................... #bit RB5			= 0x06.5 
.................... #bit RB4			= 0x06.4 
.................... #bit RB3			= 0x06.3 
.................... #bit RB2			= 0x06.2 
.................... #bit RB1			= 0x06.1 
.................... #bit RB0			= 0x06.0 
.................... //---------PORTC bits------------------ 
.................... #bit RC7			= 0x07.7 
.................... #bit RC6			= 0x07.6 
.................... #bit RC5			= 0x07.5 
.................... #bit RC4			= 0x07.4 
.................... #bit RC3			= 0x07.3 
.................... #bit RC2			= 0x07.2 
.................... #bit RC1			= 0x07.1 
.................... #bit RC0			= 0x07.0 
.................... //---------PORTD bits------------------ 
.................... #bit RD7			= 0x08.7 
.................... #bit RD6			= 0x08.6 
.................... #bit RD5			= 0x08.5 
.................... #bit RD4			= 0x08.4 
.................... #bit RD3			= 0x08.3 
.................... #bit RD2			= 0x08.2 
.................... #bit RD1			= 0x08.1 
.................... #bit RD0			= 0x08.0 
.................... //---------PORTE bits------------------ 
.................... #bit RE2			= 0x09.2 
.................... #bit RE1			= 0x09.1 
.................... #bit RE0			= 0x09.0 
....................  
.................... //----- INTCON ------------------------------------------------------------- 
....................  
.................... #bit	GIE      = 0x0b.7 
.................... #bit	PEIE     = 0x0b.6 
.................... #bit	TMR0IE   = 0x0b.5 
.................... #bit	INTE     = 0x0b.4 
.................... #bit	RBIE     = 0x0b.3 
.................... #bit	TMR0IF   = 0x0b.2 
.................... #bit	INTF     = 0x0b.1 
.................... #bit	RBIF     = 0x0b.0 
....................  
.................... //----- PIR1 --------------------------------------------------------------- 
....................  
.................... #bit pspif     = 0x0c.7 
.................... #bit adif      = 0x0c.6 
.................... #bit rcif      = 0x0c.5 
.................... #bit txif      = 0x0c.4 
.................... #bit sspif     = 0x0c.3 
.................... #bit ccp1if    = 0x0c.2 
.................... #bit tmr2if    = 0x0c.1 
.................... #bit tmr1if    = 0x0c.0 
....................  
.................... //----- PIR2 --------------------------------------------------------------- 
....................  
.................... #bit cmif      = 0x0d.6 
.................... #bit eeif      = 0x0d.4 
.................... #bit bclif     = 0x0d.3 
.................... #bit ccp2if    = 0x0d.0 
....................  
.................... //----- PIE1 --------------------------------------------------------------- 
....................  
.................... #bit pspie     = 0x8c.7 
.................... #bit adie      = 0x8c.6 
.................... #bit rcie      = 0x8c.5 
.................... #bit txie      = 0x8c.4 
.................... #bit sspie     = 0x8c.3 
.................... #bit ccp1ie    = 0x8c.2 
.................... #bit tmr2ie    = 0x8c.1 
.................... #bit tmr1ie    = 0x8c.0 
....................  
.................... //----- PIE2 --------------------------------------------------------------- 
....................  
.................... #bit cmie      = 0x8d.6 
.................... #bit eeie      = 0x8d.4 
.................... #bit bclie     = 0x8d.3 
.................... #bit ccp2ie    = 0x8d.0 
.................... //----- T1CON Bits --------------------------------------------------------- 
.................... #bit T1CKPS1    =0x10.5 
.................... #bit T1CKPS0    =0x10.4 
.................... #bit T1OSCEN    =0x10.3 
.................... #bit T1SYNC     =0x10.2 
.................... #bit TMR1CS     =0x10.1 
.................... #bit TMR1ON     =0x10.0 
....................  
.................... //----- T2CON Bits --------------------------------------------------------- 
.................... #bit TOUTPS3    =0x12.6 
.................... #bit TOUTPS2    =0x12.5 
.................... #bit TOUTPS1    =0x12.4 
.................... #bit TOUTPS0    =0x12.3 
.................... #bit TMR2ON     =0x12.2 
.................... #bit T2CKPS1    =0x12.1 
.................... #bit T2CKPS0    =0x12.0 
....................  
.................... //-------------SSPCON bits-------------------------- 
.................... #bit WCOL       =0x14.7 
.................... #bit SSPOV      =0x14.6 
.................... #bit SSPEN      =0x14.5 
.................... #bit CKP        =0x14.4 
.................... #bit SSPM3      =0x14.3 
.................... #bit SSPM2      =0x14.2 
.................... #bit SSPM1      =0x14.1 
.................... #bit SSPM0      =0x14.0 
....................  
.................... //---------------CCP1CON bits-------- 
.................... #bit CCP1X      =0x17.5 
.................... #bit CCP1Y      =0x17.4 
.................... #bit CCP1M3     =0x17.3 
.................... #bit CCP1M2     =0x17.2 
.................... #bit CCP1M1     =0x17.1 
.................... #bit CCP1M0     =0x17.0 
....................  
.................... //---------------RCSTA bits------------------- 
....................  
.................... #bit SPEN       =0x18.7 
.................... #bit RX9        =0x18.6 
.................... #bit SREN       =0x18.5 
.................... #bit CREN       =0x18.4 
.................... #bit ADDEN      =0x18.3 
.................... #bit FERR       =0x18.2 
.................... #bit OERR       =0x18.1 
.................... #bit RX9D       =0x18.0 
....................  
.................... //-----------------------CCP2CON bits---------- 
....................  
.................... #bit CCP2X      =0x1D.5 
.................... #bit CCP2Y      =0x1D.4 
.................... #bit CCP2M3     =0x1D.3 
.................... #bit CCP2M2     =0x1D.2 
.................... #bit CCP2M1     =0x1D.1 
.................... #bit CCP2M0     =0x1D.0 
....................  
.................... //----- ADCON0 Bits -------------------------------------------------------- 
.................... #bit ADCS1      =0x1F.7 
.................... #bit ADCS0      =0x1F.6 
.................... #bit CHS2       =0x1F.5 
.................... #bit CHS1       =0x1F.4 
.................... #bit CHS0       =0x1F.3 
.................... #bit ADGO       =0x1F.2 
.................... #bit ADON       =0x1F.0 
....................  
.................... //----- OPTION_reg Bits -------------------------------------------------------- 
....................  
.................... #bit RBPU       =0x81.7 
.................... #bit INTEDG     =0x81.6 
.................... #bit T0CS       =0x81.5 
.................... #bit T0SE       =0x81.4 
.................... #bit PSA        =0x81.3 
.................... #bit PS2        =0x81.2 
.................... #bit PS1        =0x81.1 
.................... #bit PS0        =0x81.0 
.................... //----- PCON Bits ---------------------------------------------------------- 
....................  
.................... #bit POR        =0x8E.1 
.................... #bit BOD        =0x8E.0 
....................  
.................... //-----------SSPCON2 bits--------------------------------------------- 
....................  
.................... #bit GCEN       =0x91.7 
.................... #bit ACKSTAT    =0x91.6 
.................... #bit ACKDT      =0x91.5 
.................... #bit ACKEN      =0x91.4 
.................... #bit RCEN       =0x91.3 
.................... #bit PEN        =0x91.2 
.................... #bit RSEN       =0x91.1 
.................... #bit SEN        =0x91.0 
....................  
.................... //---------------------SSPSTAT bits------------------------ 
....................  
.................... #bit STAT_SMP   =0x94.7 
.................... #bit STAT_CKE   =0x94.6 
.................... #bit STAT_DA    =0x94.5 
.................... #bit STAT_P     =0x94.4 
.................... #bit STAT_S     =0x94.3 
.................... #bit STAT_RW    =0x94.2 
.................... #bit STAT_UA    =0x94.1 
.................... #bit STAT_BF    =0x94.0 
....................  
.................... //----------------TXSTA bits----------------- 
....................  
.................... #bit CSRC       =0x98.7 
.................... #bit TX9        =0x98.6 
.................... #bit TXEN       =0x98.5 
.................... #bit SYNC       =0x98.4 
.................... #bit BRGH       =0x98.2 
.................... #bit TRMT       =0x98.1 
.................... #bit TX9D       =0x98.0 
....................  
.................... //--------------ADCON1 bits--------------- 
....................  
.................... #bit ADFM       =0x9F.7 
.................... #bit ADCS2      =0x9F.6 
.................... #bit PCFG3      =0x9F.3 
.................... #bit PCFG2      =0x9F.2 
.................... #bit PCFG1      =0x9F.1 
.................... #bit PCFG0      =0x9F.0 
....................  
.................... //-----------EECON1 bits---------- 
....................  
.................... #bit EEPGD      =0x018C.7 
.................... #bit WRERR      =0x018C.3 
.................... #bit WREN       =0x018C.2 
.................... #bit WR         =0x018C.1 
.................... #bit RD         =0x018C.0 
....................  
....................  
.................... #device ADC = 16 
....................  
.................... #FUSES NOWDT      //No Watch Dog Timer 
.................... #FUSES NOBROWNOUT //No brownout reset 
.................... #FUSES NOLVP      //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal = 20000000) 
*
0530:  MOVLW  53
0531:  MOVWF  04
0532:  BCF    03.7
0533:  MOVF   00,W
0534:  BTFSC  03.2
0535:  GOTO   543
0536:  MOVLW  06
0537:  MOVWF  78
0538:  CLRF   77
0539:  DECFSZ 77,F
053A:  GOTO   539
053B:  DECFSZ 78,F
053C:  GOTO   538
053D:  MOVLW  7B
053E:  MOVWF  77
053F:  DECFSZ 77,F
0540:  GOTO   53F
0541:  DECFSZ 00,F
0542:  GOTO   536
0543:  RETURN
0544:  MOVLW  03
0545:  SUBWF  54,F
0546:  BTFSS  03.0
0547:  GOTO   552
0548:  MOVLW  54
0549:  MOVWF  04
054A:  BCF    03.7
054B:  MOVF   00,W
054C:  BTFSC  03.2
054D:  GOTO   552
054E:  GOTO   550
054F:  GOTO   550
0550:  DECFSZ 00,F
0551:  GOTO   54F
0552:  RETURN
....................  
.................... #include "def_lcd.c" 
.................... #define RS RC3 
.................... #define RW RC4 
.................... #define E RC5 
.................... #define LCD PORTD 
....................  
.................... // CONST Char gd[4][21] = {"    Thap Chuong     ", 
.................... //                         "                    ", 
.................... //                         "Sensor 1:           ", 
.................... //                         "Sensor 2:           "}; 
.................... char arrNumber[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'}; 
*
06DE:  MOVLW  30
06DF:  BCF    03.5
06E0:  MOVWF  27
06E1:  MOVLW  31
06E2:  MOVWF  28
06E3:  MOVLW  32
06E4:  MOVWF  29
06E5:  MOVLW  33
06E6:  MOVWF  2A
06E7:  MOVLW  34
06E8:  MOVWF  2B
06E9:  MOVLW  35
06EA:  MOVWF  2C
06EB:  MOVLW  36
06EC:  MOVWF  2D
06ED:  MOVLW  37
06EE:  MOVWF  2E
06EF:  MOVLW  38
06F0:  MOVWF  2F
06F1:  MOVLW  39
06F2:  MOVWF  30
....................  
.................... void ghima(int8 data) 
.................... { 
....................   LCD = data; 
*
0553:  MOVF   49,W
0554:  MOVWF  08
....................   RS = 0; 
0555:  BCF    07.3
....................   RW = 0; 
0556:  BCF    07.4
....................   E = 1; 
0557:  BSF    07.5
....................   E = 0; 
0558:  BCF    07.5
....................   delay_us(1500); 
0559:  MOVLW  01
055A:  MOVWF  53
055B:  CALL   530
055C:  MOVLW  02
055D:  MOVWF  4A
055E:  MOVLW  F9
055F:  MOVWF  54
0560:  CALL   544
0561:  DECFSZ 4A,F
0562:  GOTO   55E
0563:  RETURN
.................... } 
.................... void hienthi(int8 data) 
.................... { 
....................   LCD = data; 
*
05DE:  MOVF   52,W
05DF:  MOVWF  08
....................   RS = 1; 
05E0:  BSF    07.3
....................   RW = 0; 
05E1:  BCF    07.4
....................   E = 1; 
05E2:  BSF    07.5
....................   E = 0; 
05E3:  BCF    07.5
....................   delay_us(1500); 
05E4:  MOVLW  01
05E5:  MOVWF  53
05E6:  CALL   530
05E7:  MOVLW  02
05E8:  MOVWF  53
05E9:  MOVLW  F9
05EA:  MOVWF  54
05EB:  CALL   544
05EC:  DECFSZ 53,F
05ED:  GOTO   5E9
05EE:  RETURN
.................... } 
....................  
.................... void initLCD() 
.................... { 
....................   TRISD = 0; 
....................   TRISC3 = TRISC4 = TRISC5 = 0; 
....................  
....................   ghima(0x38); //giao tiep 8bit, hien thi 2 dong, kich thuoc 5x7 
....................   ghima(0x0C); //bat man hinh 
....................   ghima(0x01); //xoa man hinh 
....................   ghima(0x80); // dua con tro ve du dong 1 
....................  
....................   // int8 i, j; 
....................   // for (i = 0; i < 4; i++) 
....................   //   for (j = 0; j < 20; j++) 
....................   //   { 
....................   //     hienthi(gd[i][j]); 
....................   //     if ((j == 19) && (i == 0)) 
....................   //       ghima(0xc0); 
....................   //     if ((j == 19) && (i == 1)) 
....................   //       ghima(0x94); 
....................   //     if ((j == 19) && (i == 2)) 
....................   //       ghima(0xd4); 
....................   //   } 
.................... } 
....................  
.................... #include "floor.c" 
.................... float32 FLOOR(float32 x) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
*
0386:  BCF    5D.0
....................    y = x; 
0387:  MOVF   52,W
0388:  MOVWF  56
0389:  MOVF   51,W
038A:  MOVWF  55
038B:  MOVF   50,W
038C:  MOVWF  54
038D:  MOVF   4F,W
038E:  MOVWF  53
....................  
....................    if (x < 0) 
038F:  MOVF   52,W
0390:  MOVWF  61
0391:  MOVF   51,W
0392:  MOVWF  60
0393:  MOVF   50,W
0394:  MOVWF  5F
0395:  MOVF   4F,W
0396:  MOVWF  5E
0397:  CLRF   65
0398:  CLRF   64
0399:  CLRF   63
039A:  CLRF   62
039B:  CALL   296
039C:  BTFSS  03.0
039D:  GOTO   3A2
....................    { 
....................       s = 1; 
039E:  BSF    5D.0
....................       y = -y; 
039F:  MOVF   54,W
03A0:  XORLW  80
03A1:  MOVWF  54
....................    } 
....................  
....................    if (y <= 32768.0) 
03A2:  MOVF   56,W
03A3:  MOVWF  61
03A4:  MOVF   55,W
03A5:  MOVWF  60
03A6:  MOVF   54,W
03A7:  MOVWF  5F
03A8:  MOVF   53,W
03A9:  MOVWF  5E
03AA:  CLRF   65
03AB:  CLRF   64
03AC:  CLRF   63
03AD:  MOVLW  8E
03AE:  MOVWF  62
03AF:  CALL   296
03B0:  BTFSC  03.0
03B1:  GOTO   3B4
03B2:  BTFSS  03.2
03B3:  GOTO   3CB
....................       res = (float32)(unsigned int16)y; 
03B4:  MOVF   56,W
03B5:  MOVWF  61
03B6:  MOVF   55,W
03B7:  MOVWF  60
03B8:  MOVF   54,W
03B9:  MOVWF  5F
03BA:  MOVF   53,W
03BB:  MOVWF  5E
03BC:  CALL   2D5
03BD:  MOVF   79,W
03BE:  MOVWF  63
03BF:  MOVF   78,W
03C0:  MOVWF  62
03C1:  CALL   2F4
03C2:  MOVF   7A,W
03C3:  MOVWF  5A
03C4:  MOVF   79,W
03C5:  MOVWF  59
03C6:  MOVF   78,W
03C7:  MOVWF  58
03C8:  MOVF   77,W
03C9:  MOVWF  57
03CA:  GOTO   488
....................  
....................    else if (y < 10000000.0) 
03CB:  MOVF   56,W
03CC:  MOVWF  61
03CD:  MOVF   55,W
03CE:  MOVWF  60
03CF:  MOVF   54,W
03D0:  MOVWF  5F
03D1:  MOVF   53,W
03D2:  MOVWF  5E
03D3:  MOVLW  80
03D4:  MOVWF  65
03D5:  MOVLW  96
03D6:  MOVWF  64
03D7:  MOVLW  18
03D8:  MOVWF  63
03D9:  MOVLW  96
03DA:  MOVWF  62
03DB:  CALL   296
03DC:  BTFSS  03.0
03DD:  GOTO   480
....................    { 
....................       l = (unsigned int16)(y * 0.000030517578125); 
03DE:  MOVF   56,W
03DF:  MOVWF  61
03E0:  MOVF   55,W
03E1:  MOVWF  60
03E2:  MOVF   54,W
03E3:  MOVWF  5F
03E4:  MOVF   53,W
03E5:  MOVWF  5E
03E6:  CLRF   65
03E7:  CLRF   64
03E8:  CLRF   63
03E9:  MOVLW  70
03EA:  MOVWF  62
03EB:  CALL   311
03EC:  MOVF   7A,W
03ED:  MOVWF  61
03EE:  MOVF   79,W
03EF:  MOVWF  60
03F0:  MOVF   78,W
03F1:  MOVWF  5F
03F2:  MOVF   77,W
03F3:  MOVWF  5E
03F4:  CALL   2D5
03F5:  MOVF   79,W
03F6:  MOVWF  5C
03F7:  MOVF   78,W
03F8:  MOVWF  5B
....................       y = 32768.0 * (y * 0.000030517578125 - (float32)l); 
03F9:  MOVF   56,W
03FA:  MOVWF  61
03FB:  MOVF   55,W
03FC:  MOVWF  60
03FD:  MOVF   54,W
03FE:  MOVWF  5F
03FF:  MOVF   53,W
0400:  MOVWF  5E
0401:  CLRF   65
0402:  CLRF   64
0403:  CLRF   63
0404:  MOVLW  70
0405:  MOVWF  62
0406:  CALL   311
0407:  MOVF   7A,W
0408:  MOVWF  61
0409:  MOVF   79,W
040A:  MOVWF  60
040B:  MOVF   78,W
040C:  MOVWF  5F
040D:  MOVF   77,W
040E:  MOVWF  5E
040F:  MOVF   5C,W
0410:  MOVWF  63
0411:  MOVF   5B,W
0412:  MOVWF  62
0413:  CALL   2F4
0414:  BSF    03.1
0415:  MOVF   61,W
0416:  MOVWF  65
0417:  MOVF   60,W
0418:  MOVWF  64
0419:  MOVF   5F,W
041A:  MOVWF  63
041B:  MOVF   5E,W
041C:  MOVWF  62
041D:  MOVF   7A,W
041E:  MOVWF  69
041F:  MOVF   79,W
0420:  MOVWF  68
0421:  MOVF   78,W
0422:  MOVWF  67
0423:  MOVF   77,W
0424:  MOVWF  66
0425:  CALL   08B
0426:  CLRF   61
0427:  CLRF   60
0428:  CLRF   5F
0429:  MOVLW  8E
042A:  MOVWF  5E
042B:  MOVF   7A,W
042C:  MOVWF  65
042D:  MOVF   79,W
042E:  MOVWF  64
042F:  MOVF   78,W
0430:  MOVWF  63
0431:  MOVF   77,W
0432:  MOVWF  62
0433:  CALL   311
0434:  MOVF   7A,W
0435:  MOVWF  56
0436:  MOVF   79,W
0437:  MOVWF  55
0438:  MOVF   78,W
0439:  MOVWF  54
043A:  MOVF   77,W
043B:  MOVWF  53
....................       res = 32768.0 * (float32)l; 
043C:  MOVF   5C,W
043D:  MOVWF  63
043E:  MOVF   5B,W
043F:  MOVWF  62
0440:  CALL   2F4
0441:  CLRF   61
0442:  CLRF   60
0443:  CLRF   5F
0444:  MOVLW  8E
0445:  MOVWF  5E
0446:  MOVF   7A,W
0447:  MOVWF  65
0448:  MOVF   79,W
0449:  MOVWF  64
044A:  MOVF   78,W
044B:  MOVWF  63
044C:  MOVF   77,W
044D:  MOVWF  62
044E:  CALL   311
044F:  MOVF   7A,W
0450:  MOVWF  5A
0451:  MOVF   79,W
0452:  MOVWF  59
0453:  MOVF   78,W
0454:  MOVWF  58
0455:  MOVF   77,W
0456:  MOVWF  57
....................       res += (float32)(unsigned int16)y; 
0457:  MOVF   56,W
0458:  MOVWF  61
0459:  MOVF   55,W
045A:  MOVWF  60
045B:  MOVF   54,W
045C:  MOVWF  5F
045D:  MOVF   53,W
045E:  MOVWF  5E
045F:  CALL   2D5
0460:  MOVF   79,W
0461:  MOVWF  63
0462:  MOVF   78,W
0463:  MOVWF  62
0464:  CALL   2F4
0465:  BCF    03.1
0466:  MOVF   5A,W
0467:  MOVWF  65
0468:  MOVF   59,W
0469:  MOVWF  64
046A:  MOVF   58,W
046B:  MOVWF  63
046C:  MOVF   57,W
046D:  MOVWF  62
046E:  MOVF   7A,W
046F:  MOVWF  69
0470:  MOVF   79,W
0471:  MOVWF  68
0472:  MOVF   78,W
0473:  MOVWF  67
0474:  MOVF   77,W
0475:  MOVWF  66
0476:  CALL   08B
0477:  MOVF   7A,W
0478:  MOVWF  5A
0479:  MOVF   79,W
047A:  MOVWF  59
047B:  MOVF   78,W
047C:  MOVWF  58
047D:  MOVF   77,W
047E:  MOVWF  57
....................    } 
047F:  GOTO   488
....................  
....................    else 
....................       res = y; 
0480:  MOVF   56,W
0481:  MOVWF  5A
0482:  MOVF   55,W
0483:  MOVWF  59
0484:  MOVF   54,W
0485:  MOVWF  58
0486:  MOVF   53,W
0487:  MOVWF  57
....................  
....................    y = y - (float32)(unsigned int16)y; 
0488:  MOVF   56,W
0489:  MOVWF  61
048A:  MOVF   55,W
048B:  MOVWF  60
048C:  MOVF   54,W
048D:  MOVWF  5F
048E:  MOVF   53,W
048F:  MOVWF  5E
0490:  CALL   2D5
0491:  MOVF   79,W
0492:  MOVWF  63
0493:  MOVF   78,W
0494:  MOVWF  62
0495:  CALL   2F4
0496:  BSF    03.1
0497:  MOVF   56,W
0498:  MOVWF  65
0499:  MOVF   55,W
049A:  MOVWF  64
049B:  MOVF   54,W
049C:  MOVWF  63
049D:  MOVF   53,W
049E:  MOVWF  62
049F:  MOVF   7A,W
04A0:  MOVWF  69
04A1:  MOVF   79,W
04A2:  MOVWF  68
04A3:  MOVF   78,W
04A4:  MOVWF  67
04A5:  MOVF   77,W
04A6:  MOVWF  66
04A7:  CALL   08B
04A8:  MOVF   7A,W
04A9:  MOVWF  56
04AA:  MOVF   79,W
04AB:  MOVWF  55
04AC:  MOVF   78,W
04AD:  MOVWF  54
04AE:  MOVF   77,W
04AF:  MOVWF  53
....................  
....................    if (s) 
04B0:  BTFSS  5D.0
04B1:  GOTO   4B5
....................       res = -res; 
04B2:  MOVF   58,W
04B3:  XORLW  80
04B4:  MOVWF  58
....................  
....................    if (y != 0) 
04B5:  MOVF   56,W
04B6:  MOVWF  61
04B7:  MOVF   55,W
04B8:  MOVWF  60
04B9:  MOVF   54,W
04BA:  MOVWF  5F
04BB:  MOVF   53,W
04BC:  MOVWF  5E
04BD:  CLRF   65
04BE:  CLRF   64
04BF:  CLRF   63
04C0:  CLRF   62
04C1:  CALL   296
04C2:  BTFSC  03.2
04C3:  GOTO   4DD
....................    { 
....................       if (s == 1) 
04C4:  BTFSS  5D.0
04C5:  GOTO   4DD
....................          res -= 1.0; 
04C6:  BSF    03.1
04C7:  MOVF   5A,W
04C8:  MOVWF  65
04C9:  MOVF   59,W
04CA:  MOVWF  64
04CB:  MOVF   58,W
04CC:  MOVWF  63
04CD:  MOVF   57,W
04CE:  MOVWF  62
04CF:  CLRF   69
04D0:  CLRF   68
04D1:  CLRF   67
04D2:  MOVLW  7F
04D3:  MOVWF  66
04D4:  CALL   08B
04D5:  MOVF   7A,W
04D6:  MOVWF  5A
04D7:  MOVF   79,W
04D8:  MOVWF  59
04D9:  MOVF   78,W
04DA:  MOVWF  58
04DB:  MOVF   77,W
04DC:  MOVWF  57
....................    } 
....................    if (x == 0) 
04DD:  MOVF   52,W
04DE:  MOVWF  61
04DF:  MOVF   51,W
04E0:  MOVWF  60
04E1:  MOVF   50,W
04E2:  MOVWF  5F
04E3:  MOVF   4F,W
04E4:  MOVWF  5E
04E5:  CLRF   65
04E6:  CLRF   64
04E7:  CLRF   63
04E8:  CLRF   62
04E9:  CALL   296
04EA:  BTFSS  03.2
04EB:  GOTO   4F0
....................       res = 0; 
04EC:  CLRF   5A
04ED:  CLRF   59
04EE:  CLRF   58
04EF:  CLRF   57
....................  
....................    return (res); 
04F0:  MOVF   57,W
04F1:  MOVWF  77
04F2:  MOVF   58,W
04F3:  MOVWF  78
04F4:  MOVF   59,W
04F5:  MOVWF  79
04F6:  MOVF   5A,W
04F7:  MOVWF  7A
04F8:  RETURN
.................... } 
....................  
....................  
.................... #define triac1 RC6 
.................... #define triac1Out PIN_C6 
....................  
.................... #define triac2 RC7 
.................... #define triac2Out PIN_C7 
....................  
.................... #define relay RC1 
.................... #define relayOut PIN_C1 
....................  
.................... // set angle (10 levels). more angle, weaker motor 
.................... float32 angleStarter = 1; 
.................... float32 angleRingTheBell = 6; 
....................  
.................... int32 valTimer0SetStarter = (int32)FLOOR((13.1072 - angleStarter) / 0.0512) - 1; 
.................... int32 valTimer0SetRingTheBell = (int32)FLOOR((13.1072 - angleRingTheBell) / 0.0512) - 1; 
....................  
.................... signed int32 count = 0; 
.................... int8 countTime = 0; 
.................... int1 flagForward = true; 
.................... int1 flagStarter = true; 
.................... int1 flagSTOP = false; 
.................... int8 anglePercent = 0; 
....................  
.................... #INT_EXT 
.................... void ext_isr() 
.................... { 
....................    // cross zero point detector 50Hz >> 1/50/2 sec per half pulse after diode brighet 
....................  
....................    // if (flagForward) 
....................    //    triac1 = 0; 
....................    // else 
....................    //    triac2 = 0; 
....................  
....................    output_low(triac1Out); 
*
003F:  BCF    48.6
0040:  MOVF   48,W
0041:  BSF    03.5
0042:  MOVWF  07
0043:  BCF    03.5
0044:  BCF    07.6
....................    output_low(triac2Out); 
0045:  BCF    48.7
0046:  MOVF   48,W
0047:  BSF    03.5
0048:  MOVWF  07
0049:  BCF    03.5
004A:  BCF    07.7
....................  
....................    if (flagStarter) 
004B:  BTFSS  46.1
004C:  GOTO   050
....................       set_timer0(valTimer0SetStarter); 
004D:  MOVF   39,W
004E:  MOVWF  01
004F:  GOTO   052
....................    else 
....................       set_timer0(valTimer0SetRingTheBell); 
0050:  MOVF   3D,W
0051:  MOVWF  01
....................  
....................    clear_interrupt(INT_TIMER0); 
0052:  BCF    0B.2
....................    enable_interrupts(INT_TIMER0); 
0053:  BSF    0B.5
....................    clear_interrupt(INT_EXT); // waiting for next EXT 
0054:  BCF    0B.1
.................... } 
....................  
0055:  BCF    0B.1
0056:  BCF    0A.3
0057:  BCF    0A.4
0058:  GOTO   025
.................... #INT_TIMER0 
.................... void timer0_isr() 
.................... { 
....................    // ++countTime; 
....................    // if (countTime == 100) 
....................    // { 
....................    //    countTime = 0; 
....................    //    //set_timer0((int32)59.00); 
....................    //    PORTA = 0xFF; 
....................    //    delay_ms(500); 
....................    //    PORTA = 0; 
....................    // } 
....................    if (flagForward && !flagSTOP) 
0059:  BTFSS  46.0
005A:  GOTO   064
005B:  BTFSC  46.2
005C:  GOTO   064
....................       // triac1 = 1; 
....................       output_high(triac1Out); 
005D:  BCF    48.6
005E:  MOVF   48,W
005F:  BSF    03.5
0060:  MOVWF  07
0061:  BCF    03.5
0062:  BSF    07.6
0063:  GOTO   06E
....................    else if (!flagForward && !flagSTOP) 
0064:  BTFSC  46.0
0065:  GOTO   06E
0066:  BTFSC  46.2
0067:  GOTO   06E
....................       // triac2 = 1; 
....................       output_high(triac2Out); 
0068:  BCF    48.7
0069:  MOVF   48,W
006A:  BSF    03.5
006B:  MOVWF  07
006C:  BCF    03.5
006D:  BSF    07.7
....................  
....................    // set_timer0(200.00); 
....................    disable_interrupts(INT_TIMER0); 
006E:  BCF    0B.5
.................... } 
....................  
006F:  BCF    0B.2
0070:  BCF    0A.3
0071:  BCF    0A.4
0072:  GOTO   025
.................... #INT_CCP1 
.................... void ccp1_isr() 
.................... { 
....................    // PORTA = 0xFF; 
....................    // delay_ms(500); 
....................    // PORTA = 0; 
....................  
....................    // encoder 
....................    if (RC0) 
0073:  BTFSS  07.0
0074:  GOTO   07E
....................    { 
....................       //clockwise 
....................       ++count; 
0075:  MOVLW  01
0076:  ADDWF  41,F
0077:  BTFSC  03.0
0078:  INCF   42,F
0079:  BTFSC  03.2
007A:  INCF   43,F
007B:  BTFSC  03.2
007C:  INCF   44,F
....................    } 
007D:  GOTO   086
....................    else 
....................    { 
....................       --count; 
007E:  MOVLW  FF
007F:  ADDWF  41,F
0080:  BTFSS  03.0
0081:  ADDWF  42,F
0082:  BTFSS  03.0
0083:  ADDWF  43,F
0084:  BTFSS  03.0
0085:  ADDWF  44,F
....................    } 
....................    clear_interrupt(INT_CCP1); 
0086:  BCF    0C.2
0087:  BCF    0C.2
0088:  BCF    0A.3
0089:  BCF    0A.4
008A:  GOTO   025
.................... } 
....................  
.................... void FORWARD() 
.................... { 
....................    triac2 = 0; 
*
0518:  BCF    07.7
....................    output_low(triac2Out); 
0519:  BCF    48.7
051A:  MOVF   48,W
051B:  BSF    03.5
051C:  MOVWF  07
051D:  BCF    03.5
051E:  BCF    07.7
....................    flagForward = true; 
051F:  BSF    46.0
....................    flagSTOP = false; 
0520:  BCF    46.2
0521:  RETURN
.................... } 
.................... void REVERSE() 
.................... { 
....................    // triac1 = 0; 
....................    output_low(triac1Out); 
*
05EF:  BCF    48.6
05F0:  MOVF   48,W
05F1:  BSF    03.5
05F2:  MOVWF  07
05F3:  BCF    03.5
05F4:  BCF    07.6
....................    flagForward = flagSTOP = false; 
05F5:  BCF    46.2
05F6:  BCF    46.0
05F7:  RETURN
.................... } 
.................... void STOP() 
.................... { 
....................    flagSTOP = true; 
*
0522:  BSF    46.2
....................    // triac1 = triac2 = 0; 
....................    output_low(triac1Out); 
0523:  BCF    48.6
0524:  MOVF   48,W
0525:  BSF    03.5
0526:  MOVWF  07
0527:  BCF    03.5
0528:  BCF    07.6
....................    output_low(triac2Out); 
0529:  BCF    48.7
052A:  MOVF   48,W
052B:  BSF    03.5
052C:  MOVWF  07
052D:  BCF    03.5
052E:  BCF    07.7
052F:  RETURN
.................... } 
....................  
.................... void starter() 
.................... { 
....................    while (count <= 400) 
*
0800:  BTFSC  44.7
0801:  GOTO   012
0802:  MOVF   44,F
0803:  BTFSS  03.2
0804:  GOTO   016
0805:  MOVF   43,F
0806:  BTFSS  03.2
0807:  GOTO   016
0808:  MOVF   42,W
0809:  SUBLW  01
080A:  BTFSS  03.0
080B:  GOTO   016
080C:  BTFSS  03.2
080D:  GOTO   012
080E:  MOVF   41,W
080F:  SUBLW  90
0810:  BTFSS  03.0
0811:  GOTO   016
....................       FORWARD(); 
0812:  BCF    0A.3
0813:  CALL   518
0814:  BSF    0A.3
0815:  GOTO   000
....................    STOP(); 
0816:  BCF    0A.3
0817:  CALL   522
0818:  BSF    0A.3
....................  
....................    ghima(0x01); // clear 
0819:  MOVLW  01
081A:  MOVWF  49
081B:  BCF    0A.3
081C:  CALL   553
081D:  BSF    0A.3
....................    ghima(0x80); // set 0,0 
081E:  MOVLW  80
081F:  MOVWF  49
0820:  BCF    0A.3
0821:  CALL   553
0822:  BSF    0A.3
....................    hienthi(arrNumber[count / 10]); 
0823:  BCF    03.1
0824:  MOVF   44,W
0825:  MOVWF  50
0826:  MOVF   43,W
0827:  MOVWF  4F
0828:  MOVF   42,W
0829:  MOVWF  4E
082A:  MOVF   41,W
082B:  MOVWF  4D
082C:  CLRF   54
082D:  CLRF   53
082E:  CLRF   52
082F:  MOVLW  0A
0830:  MOVWF  51
0831:  BCF    0A.3
0832:  CALL   564
0833:  BSF    0A.3
0834:  MOVF   7A,W
0835:  MOVWF  4C
0836:  MOVF   79,W
0837:  MOVWF  4B
0838:  MOVF   78,W
0839:  MOVWF  4A
083A:  MOVF   77,W
083B:  MOVWF  49
083C:  MOVLW  27
083D:  ADDWF  49,W
083E:  MOVWF  04
083F:  BCF    03.7
0840:  BTFSC  4A.0
0841:  BSF    03.7
0842:  MOVF   00,W
0843:  MOVWF  4D
0844:  MOVWF  52
0845:  BCF    0A.3
0846:  CALL   5DE
0847:  BSF    0A.3
....................    hienthi(arrNumber[count % 10]); 
0848:  BSF    03.1
0849:  MOVLW  49
084A:  MOVWF  04
084B:  BCF    03.7
084C:  MOVF   44,W
084D:  MOVWF  50
084E:  MOVF   43,W
084F:  MOVWF  4F
0850:  MOVF   42,W
0851:  MOVWF  4E
0852:  MOVF   41,W
0853:  MOVWF  4D
0854:  CLRF   54
0855:  CLRF   53
0856:  CLRF   52
0857:  MOVLW  0A
0858:  MOVWF  51
0859:  BCF    0A.3
085A:  CALL   564
085B:  BSF    0A.3
085C:  MOVF   4C,W
085D:  MOVWF  50
085E:  MOVF   4B,W
085F:  MOVWF  4F
0860:  MOVF   4A,W
0861:  MOVWF  4E
0862:  MOVF   49,W
0863:  MOVWF  4D
0864:  MOVLW  27
0865:  ADDWF  4D,W
0866:  MOVWF  04
0867:  BCF    03.7
0868:  BTFSC  4E.0
0869:  BSF    03.7
086A:  MOVF   00,W
086B:  MOVWF  51
086C:  MOVWF  52
086D:  BCF    0A.3
086E:  CALL   5DE
086F:  BSF    0A.3
....................  
....................    while (count >= 0) 
0870:  BTFSC  44.7
0871:  GOTO   076
....................       STOP(); 
0872:  BCF    0A.3
0873:  CALL   522
0874:  BSF    0A.3
0875:  GOTO   070
....................  
....................    ghima(0x01); // clear 
0876:  MOVLW  01
0877:  MOVWF  49
0878:  BCF    0A.3
0879:  CALL   553
087A:  BSF    0A.3
....................    ghima(0x80); // set 0,0 
087B:  MOVLW  80
087C:  MOVWF  49
087D:  BCF    0A.3
087E:  CALL   553
087F:  BSF    0A.3
....................    hienthi(arrNumber[count / 10]); 
0880:  BCF    03.1
0881:  MOVF   44,W
0882:  MOVWF  50
0883:  MOVF   43,W
0884:  MOVWF  4F
0885:  MOVF   42,W
0886:  MOVWF  4E
0887:  MOVF   41,W
0888:  MOVWF  4D
0889:  CLRF   54
088A:  CLRF   53
088B:  CLRF   52
088C:  MOVLW  0A
088D:  MOVWF  51
088E:  BCF    0A.3
088F:  CALL   564
0890:  BSF    0A.3
0891:  MOVF   7A,W
0892:  MOVWF  4C
0893:  MOVF   79,W
0894:  MOVWF  4B
0895:  MOVF   78,W
0896:  MOVWF  4A
0897:  MOVF   77,W
0898:  MOVWF  49
0899:  MOVLW  27
089A:  ADDWF  49,W
089B:  MOVWF  04
089C:  BCF    03.7
089D:  BTFSC  4A.0
089E:  BSF    03.7
089F:  MOVF   00,W
08A0:  MOVWF  4D
08A1:  MOVWF  52
08A2:  BCF    0A.3
08A3:  CALL   5DE
08A4:  BSF    0A.3
....................    hienthi(arrNumber[count % 10]); 
08A5:  BSF    03.1
08A6:  MOVLW  49
08A7:  MOVWF  04
08A8:  BCF    03.7
08A9:  MOVF   44,W
08AA:  MOVWF  50
08AB:  MOVF   43,W
08AC:  MOVWF  4F
08AD:  MOVF   42,W
08AE:  MOVWF  4E
08AF:  MOVF   41,W
08B0:  MOVWF  4D
08B1:  CLRF   54
08B2:  CLRF   53
08B3:  CLRF   52
08B4:  MOVLW  0A
08B5:  MOVWF  51
08B6:  BCF    0A.3
08B7:  CALL   564
08B8:  BSF    0A.3
08B9:  MOVF   4C,W
08BA:  MOVWF  50
08BB:  MOVF   4B,W
08BC:  MOVWF  4F
08BD:  MOVF   4A,W
08BE:  MOVWF  4E
08BF:  MOVF   49,W
08C0:  MOVWF  4D
08C1:  MOVLW  27
08C2:  ADDWF  4D,W
08C3:  MOVWF  04
08C4:  BCF    03.7
08C5:  BTFSC  4E.0
08C6:  BSF    03.7
08C7:  MOVF   00,W
08C8:  MOVWF  51
08C9:  MOVWF  52
08CA:  BCF    0A.3
08CB:  CALL   5DE
08CC:  BSF    0A.3
....................  
....................    while (count >= -400) 
08CD:  BTFSS  44.7
08CE:  GOTO   0E8
08CF:  MOVF   44,W
08D0:  SUBLW  FE
08D1:  BTFSC  03.0
08D2:  GOTO   0EC
08D3:  XORLW  FF
08D4:  BTFSS  03.2
08D5:  GOTO   0E8
08D6:  MOVF   43,W
08D7:  SUBLW  FE
08D8:  BTFSC  03.0
08D9:  GOTO   0EC
08DA:  XORLW  FF
08DB:  BTFSS  03.2
08DC:  GOTO   0E8
08DD:  MOVF   42,W
08DE:  SUBLW  FD
08DF:  BTFSC  03.0
08E0:  GOTO   0EC
08E1:  XORLW  FF
08E2:  BTFSS  03.2
08E3:  GOTO   0E8
08E4:  MOVF   41,W
08E5:  SUBLW  6F
08E6:  BTFSC  03.0
08E7:  GOTO   0EC
....................       REVERSE(); 
08E8:  BCF    0A.3
08E9:  CALL   5EF
08EA:  BSF    0A.3
08EB:  GOTO   0CD
....................    STOP(); 
08EC:  BCF    0A.3
08ED:  CALL   522
08EE:  BSF    0A.3
....................  
....................    ghima(0x01); // clear 
08EF:  MOVLW  01
08F0:  MOVWF  49
08F1:  BCF    0A.3
08F2:  CALL   553
08F3:  BSF    0A.3
....................    ghima(0x80); // set 0,0 
08F4:  MOVLW  80
08F5:  MOVWF  49
08F6:  BCF    0A.3
08F7:  CALL   553
08F8:  BSF    0A.3
....................    hienthi(arrNumber[count / 10]); 
08F9:  BCF    03.1
08FA:  MOVF   44,W
08FB:  MOVWF  50
08FC:  MOVF   43,W
08FD:  MOVWF  4F
08FE:  MOVF   42,W
08FF:  MOVWF  4E
0900:  MOVF   41,W
0901:  MOVWF  4D
0902:  CLRF   54
0903:  CLRF   53
0904:  CLRF   52
0905:  MOVLW  0A
0906:  MOVWF  51
0907:  BCF    0A.3
0908:  CALL   564
0909:  BSF    0A.3
090A:  MOVF   7A,W
090B:  MOVWF  4C
090C:  MOVF   79,W
090D:  MOVWF  4B
090E:  MOVF   78,W
090F:  MOVWF  4A
0910:  MOVF   77,W
0911:  MOVWF  49
0912:  MOVLW  27
0913:  ADDWF  49,W
0914:  MOVWF  04
0915:  BCF    03.7
0916:  BTFSC  4A.0
0917:  BSF    03.7
0918:  MOVF   00,W
0919:  MOVWF  4D
091A:  MOVWF  52
091B:  BCF    0A.3
091C:  CALL   5DE
091D:  BSF    0A.3
....................    hienthi(arrNumber[count % 10]); 
091E:  BSF    03.1
091F:  MOVLW  49
0920:  MOVWF  04
0921:  BCF    03.7
0922:  MOVF   44,W
0923:  MOVWF  50
0924:  MOVF   43,W
0925:  MOVWF  4F
0926:  MOVF   42,W
0927:  MOVWF  4E
0928:  MOVF   41,W
0929:  MOVWF  4D
092A:  CLRF   54
092B:  CLRF   53
092C:  CLRF   52
092D:  MOVLW  0A
092E:  MOVWF  51
092F:  BCF    0A.3
0930:  CALL   564
0931:  BSF    0A.3
0932:  MOVF   4C,W
0933:  MOVWF  50
0934:  MOVF   4B,W
0935:  MOVWF  4F
0936:  MOVF   4A,W
0937:  MOVWF  4E
0938:  MOVF   49,W
0939:  MOVWF  4D
093A:  MOVLW  27
093B:  ADDWF  4D,W
093C:  MOVWF  04
093D:  BCF    03.7
093E:  BTFSC  4E.0
093F:  BSF    03.7
0940:  MOVF   00,W
0941:  MOVWF  51
0942:  MOVWF  52
0943:  BCF    0A.3
0944:  CALL   5DE
0945:  BSF    0A.3
....................  
....................    while (count <= 0) 
0946:  BTFSC  44.7
0947:  GOTO   155
0948:  MOVF   44,F
0949:  BTFSS  03.2
094A:  GOTO   159
094B:  MOVF   43,F
094C:  BTFSS  03.2
094D:  GOTO   159
094E:  MOVF   42,F
094F:  BTFSS  03.2
0950:  GOTO   159
0951:  MOVF   41,W
0952:  SUBLW  00
0953:  BTFSS  03.0
0954:  GOTO   159
....................       STOP(); 
0955:  BCF    0A.3
0956:  CALL   522
0957:  BSF    0A.3
0958:  GOTO   146
....................  
....................    ghima(0x01); // clear 
0959:  MOVLW  01
095A:  MOVWF  49
095B:  BCF    0A.3
095C:  CALL   553
095D:  BSF    0A.3
....................    ghima(0x80); // set 0,0 
095E:  MOVLW  80
095F:  MOVWF  49
0960:  BCF    0A.3
0961:  CALL   553
0962:  BSF    0A.3
....................    hienthi(arrNumber[count / 10]); 
0963:  BCF    03.1
0964:  MOVF   44,W
0965:  MOVWF  50
0966:  MOVF   43,W
0967:  MOVWF  4F
0968:  MOVF   42,W
0969:  MOVWF  4E
096A:  MOVF   41,W
096B:  MOVWF  4D
096C:  CLRF   54
096D:  CLRF   53
096E:  CLRF   52
096F:  MOVLW  0A
0970:  MOVWF  51
0971:  BCF    0A.3
0972:  CALL   564
0973:  BSF    0A.3
0974:  MOVF   7A,W
0975:  MOVWF  4C
0976:  MOVF   79,W
0977:  MOVWF  4B
0978:  MOVF   78,W
0979:  MOVWF  4A
097A:  MOVF   77,W
097B:  MOVWF  49
097C:  MOVLW  27
097D:  ADDWF  49,W
097E:  MOVWF  04
097F:  BCF    03.7
0980:  BTFSC  4A.0
0981:  BSF    03.7
0982:  MOVF   00,W
0983:  MOVWF  4D
0984:  MOVWF  52
0985:  BCF    0A.3
0986:  CALL   5DE
0987:  BSF    0A.3
....................    hienthi(arrNumber[count % 10]); 
0988:  BSF    03.1
0989:  MOVLW  49
098A:  MOVWF  04
098B:  BCF    03.7
098C:  MOVF   44,W
098D:  MOVWF  50
098E:  MOVF   43,W
098F:  MOVWF  4F
0990:  MOVF   42,W
0991:  MOVWF  4E
0992:  MOVF   41,W
0993:  MOVWF  4D
0994:  CLRF   54
0995:  CLRF   53
0996:  CLRF   52
0997:  MOVLW  0A
0998:  MOVWF  51
0999:  BCF    0A.3
099A:  CALL   564
099B:  BSF    0A.3
099C:  MOVF   4C,W
099D:  MOVWF  50
099E:  MOVF   4B,W
099F:  MOVWF  4F
09A0:  MOVF   4A,W
09A1:  MOVWF  4E
09A2:  MOVF   49,W
09A3:  MOVWF  4D
09A4:  MOVLW  27
09A5:  ADDWF  4D,W
09A6:  MOVWF  04
09A7:  BCF    03.7
09A8:  BTFSC  4E.0
09A9:  BSF    03.7
09AA:  MOVF   00,W
09AB:  MOVWF  51
09AC:  MOVWF  52
09AD:  BCF    0A.3
09AE:  CALL   5DE
09AF:  BSF    0A.3
....................  
....................    while (count <= 800) 
09B0:  BTFSC  44.7
09B1:  GOTO   1C2
09B2:  MOVF   44,F
09B3:  BTFSS  03.2
09B4:  GOTO   1C6
09B5:  MOVF   43,F
09B6:  BTFSS  03.2
09B7:  GOTO   1C6
09B8:  MOVF   42,W
09B9:  SUBLW  03
09BA:  BTFSS  03.0
09BB:  GOTO   1C6
09BC:  BTFSS  03.2
09BD:  GOTO   1C2
09BE:  MOVF   41,W
09BF:  SUBLW  20
09C0:  BTFSS  03.0
09C1:  GOTO   1C6
....................       FORWARD(); 
09C2:  BCF    0A.3
09C3:  CALL   518
09C4:  BSF    0A.3
09C5:  GOTO   1B0
....................    STOP(); 
09C6:  BCF    0A.3
09C7:  CALL   522
09C8:  BSF    0A.3
....................  
....................    ghima(0x01); // clear 
09C9:  MOVLW  01
09CA:  MOVWF  49
09CB:  BCF    0A.3
09CC:  CALL   553
09CD:  BSF    0A.3
....................    ghima(0x80); // set 0,0 
09CE:  MOVLW  80
09CF:  MOVWF  49
09D0:  BCF    0A.3
09D1:  CALL   553
09D2:  BSF    0A.3
....................    hienthi(arrNumber[count / 10]); 
09D3:  BCF    03.1
09D4:  MOVF   44,W
09D5:  MOVWF  50
09D6:  MOVF   43,W
09D7:  MOVWF  4F
09D8:  MOVF   42,W
09D9:  MOVWF  4E
09DA:  MOVF   41,W
09DB:  MOVWF  4D
09DC:  CLRF   54
09DD:  CLRF   53
09DE:  CLRF   52
09DF:  MOVLW  0A
09E0:  MOVWF  51
09E1:  BCF    0A.3
09E2:  CALL   564
09E3:  BSF    0A.3
09E4:  MOVF   7A,W
09E5:  MOVWF  4C
09E6:  MOVF   79,W
09E7:  MOVWF  4B
09E8:  MOVF   78,W
09E9:  MOVWF  4A
09EA:  MOVF   77,W
09EB:  MOVWF  49
09EC:  MOVLW  27
09ED:  ADDWF  49,W
09EE:  MOVWF  04
09EF:  BCF    03.7
09F0:  BTFSC  4A.0
09F1:  BSF    03.7
09F2:  MOVF   00,W
09F3:  MOVWF  4D
09F4:  MOVWF  52
09F5:  BCF    0A.3
09F6:  CALL   5DE
09F7:  BSF    0A.3
....................    hienthi(arrNumber[count % 10]); 
09F8:  BSF    03.1
09F9:  MOVLW  49
09FA:  MOVWF  04
09FB:  BCF    03.7
09FC:  MOVF   44,W
09FD:  MOVWF  50
09FE:  MOVF   43,W
09FF:  MOVWF  4F
0A00:  MOVF   42,W
0A01:  MOVWF  4E
0A02:  MOVF   41,W
0A03:  MOVWF  4D
0A04:  CLRF   54
0A05:  CLRF   53
0A06:  CLRF   52
0A07:  MOVLW  0A
0A08:  MOVWF  51
0A09:  BCF    0A.3
0A0A:  CALL   564
0A0B:  BSF    0A.3
0A0C:  MOVF   4C,W
0A0D:  MOVWF  50
0A0E:  MOVF   4B,W
0A0F:  MOVWF  4F
0A10:  MOVF   4A,W
0A11:  MOVWF  4E
0A12:  MOVF   49,W
0A13:  MOVWF  4D
0A14:  MOVLW  27
0A15:  ADDWF  4D,W
0A16:  MOVWF  04
0A17:  BCF    03.7
0A18:  BTFSC  4E.0
0A19:  BSF    03.7
0A1A:  MOVF   00,W
0A1B:  MOVWF  51
0A1C:  MOVWF  52
0A1D:  BCF    0A.3
0A1E:  CALL   5DE
0A1F:  BSF    0A.3
....................  
....................    while (count >= 0) 
0A20:  BTFSC  44.7
0A21:  GOTO   226
....................       STOP(); 
0A22:  BCF    0A.3
0A23:  CALL   522
0A24:  BSF    0A.3
0A25:  GOTO   220
....................  
....................    ghima(0x01); // clear 
0A26:  MOVLW  01
0A27:  MOVWF  49
0A28:  BCF    0A.3
0A29:  CALL   553
0A2A:  BSF    0A.3
....................    ghima(0x80); // set 0,0 
0A2B:  MOVLW  80
0A2C:  MOVWF  49
0A2D:  BCF    0A.3
0A2E:  CALL   553
0A2F:  BSF    0A.3
....................    hienthi(arrNumber[count / 10]); 
0A30:  BCF    03.1
0A31:  MOVF   44,W
0A32:  MOVWF  50
0A33:  MOVF   43,W
0A34:  MOVWF  4F
0A35:  MOVF   42,W
0A36:  MOVWF  4E
0A37:  MOVF   41,W
0A38:  MOVWF  4D
0A39:  CLRF   54
0A3A:  CLRF   53
0A3B:  CLRF   52
0A3C:  MOVLW  0A
0A3D:  MOVWF  51
0A3E:  BCF    0A.3
0A3F:  CALL   564
0A40:  BSF    0A.3
0A41:  MOVF   7A,W
0A42:  MOVWF  4C
0A43:  MOVF   79,W
0A44:  MOVWF  4B
0A45:  MOVF   78,W
0A46:  MOVWF  4A
0A47:  MOVF   77,W
0A48:  MOVWF  49
0A49:  MOVLW  27
0A4A:  ADDWF  49,W
0A4B:  MOVWF  04
0A4C:  BCF    03.7
0A4D:  BTFSC  4A.0
0A4E:  BSF    03.7
0A4F:  MOVF   00,W
0A50:  MOVWF  4D
0A51:  MOVWF  52
0A52:  BCF    0A.3
0A53:  CALL   5DE
0A54:  BSF    0A.3
....................    hienthi(arrNumber[count % 10]); 
0A55:  BSF    03.1
0A56:  MOVLW  49
0A57:  MOVWF  04
0A58:  BCF    03.7
0A59:  MOVF   44,W
0A5A:  MOVWF  50
0A5B:  MOVF   43,W
0A5C:  MOVWF  4F
0A5D:  MOVF   42,W
0A5E:  MOVWF  4E
0A5F:  MOVF   41,W
0A60:  MOVWF  4D
0A61:  CLRF   54
0A62:  CLRF   53
0A63:  CLRF   52
0A64:  MOVLW  0A
0A65:  MOVWF  51
0A66:  BCF    0A.3
0A67:  CALL   564
0A68:  BSF    0A.3
0A69:  MOVF   4C,W
0A6A:  MOVWF  50
0A6B:  MOVF   4B,W
0A6C:  MOVWF  4F
0A6D:  MOVF   4A,W
0A6E:  MOVWF  4E
0A6F:  MOVF   49,W
0A70:  MOVWF  4D
0A71:  MOVLW  27
0A72:  ADDWF  4D,W
0A73:  MOVWF  04
0A74:  BCF    03.7
0A75:  BTFSC  4E.0
0A76:  BSF    03.7
0A77:  MOVF   00,W
0A78:  MOVWF  51
0A79:  MOVWF  52
0A7A:  BCF    0A.3
0A7B:  CALL   5DE
0A7C:  BSF    0A.3
....................  
....................    while (count >= -800) 
0A7D:  BTFSS  44.7
0A7E:  GOTO   298
0A7F:  MOVF   44,W
0A80:  SUBLW  FE
0A81:  BTFSC  03.0
0A82:  GOTO   29C
0A83:  XORLW  FF
0A84:  BTFSS  03.2
0A85:  GOTO   298
0A86:  MOVF   43,W
0A87:  SUBLW  FE
0A88:  BTFSC  03.0
0A89:  GOTO   29C
0A8A:  XORLW  FF
0A8B:  BTFSS  03.2
0A8C:  GOTO   298
0A8D:  MOVF   42,W
0A8E:  SUBLW  FB
0A8F:  BTFSC  03.0
0A90:  GOTO   29C
0A91:  XORLW  FF
0A92:  BTFSS  03.2
0A93:  GOTO   298
0A94:  MOVF   41,W
0A95:  SUBLW  DF
0A96:  BTFSC  03.0
0A97:  GOTO   29C
....................       REVERSE(); 
0A98:  BCF    0A.3
0A99:  CALL   5EF
0A9A:  BSF    0A.3
0A9B:  GOTO   27D
....................    STOP(); 
0A9C:  BCF    0A.3
0A9D:  CALL   522
0A9E:  BSF    0A.3
....................  
....................    ghima(0x01); // clear 
0A9F:  MOVLW  01
0AA0:  MOVWF  49
0AA1:  BCF    0A.3
0AA2:  CALL   553
0AA3:  BSF    0A.3
....................    ghima(0x80); // set 0,0 
0AA4:  MOVLW  80
0AA5:  MOVWF  49
0AA6:  BCF    0A.3
0AA7:  CALL   553
0AA8:  BSF    0A.3
....................    hienthi(arrNumber[count / 10]); 
0AA9:  BCF    03.1
0AAA:  MOVF   44,W
0AAB:  MOVWF  50
0AAC:  MOVF   43,W
0AAD:  MOVWF  4F
0AAE:  MOVF   42,W
0AAF:  MOVWF  4E
0AB0:  MOVF   41,W
0AB1:  MOVWF  4D
0AB2:  CLRF   54
0AB3:  CLRF   53
0AB4:  CLRF   52
0AB5:  MOVLW  0A
0AB6:  MOVWF  51
0AB7:  BCF    0A.3
0AB8:  CALL   564
0AB9:  BSF    0A.3
0ABA:  MOVF   7A,W
0ABB:  MOVWF  4C
0ABC:  MOVF   79,W
0ABD:  MOVWF  4B
0ABE:  MOVF   78,W
0ABF:  MOVWF  4A
0AC0:  MOVF   77,W
0AC1:  MOVWF  49
0AC2:  MOVLW  27
0AC3:  ADDWF  49,W
0AC4:  MOVWF  04
0AC5:  BCF    03.7
0AC6:  BTFSC  4A.0
0AC7:  BSF    03.7
0AC8:  MOVF   00,W
0AC9:  MOVWF  4D
0ACA:  MOVWF  52
0ACB:  BCF    0A.3
0ACC:  CALL   5DE
0ACD:  BSF    0A.3
....................    hienthi(arrNumber[count % 10]); 
0ACE:  BSF    03.1
0ACF:  MOVLW  49
0AD0:  MOVWF  04
0AD1:  BCF    03.7
0AD2:  MOVF   44,W
0AD3:  MOVWF  50
0AD4:  MOVF   43,W
0AD5:  MOVWF  4F
0AD6:  MOVF   42,W
0AD7:  MOVWF  4E
0AD8:  MOVF   41,W
0AD9:  MOVWF  4D
0ADA:  CLRF   54
0ADB:  CLRF   53
0ADC:  CLRF   52
0ADD:  MOVLW  0A
0ADE:  MOVWF  51
0ADF:  BCF    0A.3
0AE0:  CALL   564
0AE1:  BSF    0A.3
0AE2:  MOVF   4C,W
0AE3:  MOVWF  50
0AE4:  MOVF   4B,W
0AE5:  MOVWF  4F
0AE6:  MOVF   4A,W
0AE7:  MOVWF  4E
0AE8:  MOVF   49,W
0AE9:  MOVWF  4D
0AEA:  MOVLW  27
0AEB:  ADDWF  4D,W
0AEC:  MOVWF  04
0AED:  BCF    03.7
0AEE:  BTFSC  4E.0
0AEF:  BSF    03.7
0AF0:  MOVF   00,W
0AF1:  MOVWF  51
0AF2:  MOVWF  52
0AF3:  BCF    0A.3
0AF4:  CALL   5DE
0AF5:  BSF    0A.3
....................  
....................    while (count <= 0) 
0AF6:  BTFSC  44.7
0AF7:  GOTO   305
0AF8:  MOVF   44,F
0AF9:  BTFSS  03.2
0AFA:  GOTO   309
0AFB:  MOVF   43,F
0AFC:  BTFSS  03.2
0AFD:  GOTO   309
0AFE:  MOVF   42,F
0AFF:  BTFSS  03.2
0B00:  GOTO   309
0B01:  MOVF   41,W
0B02:  SUBLW  00
0B03:  BTFSS  03.0
0B04:  GOTO   309
....................       STOP(); 
0B05:  BCF    0A.3
0B06:  CALL   522
0B07:  BSF    0A.3
0B08:  GOTO   2F6
....................  
....................    ghima(0x01); // clear 
0B09:  MOVLW  01
0B0A:  MOVWF  49
0B0B:  BCF    0A.3
0B0C:  CALL   553
0B0D:  BSF    0A.3
....................    ghima(0x80); // set 0,0 
0B0E:  MOVLW  80
0B0F:  MOVWF  49
0B10:  BCF    0A.3
0B11:  CALL   553
0B12:  BSF    0A.3
....................    hienthi(arrNumber[count / 10]); 
0B13:  BCF    03.1
0B14:  MOVF   44,W
0B15:  MOVWF  50
0B16:  MOVF   43,W
0B17:  MOVWF  4F
0B18:  MOVF   42,W
0B19:  MOVWF  4E
0B1A:  MOVF   41,W
0B1B:  MOVWF  4D
0B1C:  CLRF   54
0B1D:  CLRF   53
0B1E:  CLRF   52
0B1F:  MOVLW  0A
0B20:  MOVWF  51
0B21:  BCF    0A.3
0B22:  CALL   564
0B23:  BSF    0A.3
0B24:  MOVF   7A,W
0B25:  MOVWF  4C
0B26:  MOVF   79,W
0B27:  MOVWF  4B
0B28:  MOVF   78,W
0B29:  MOVWF  4A
0B2A:  MOVF   77,W
0B2B:  MOVWF  49
0B2C:  MOVLW  27
0B2D:  ADDWF  49,W
0B2E:  MOVWF  04
0B2F:  BCF    03.7
0B30:  BTFSC  4A.0
0B31:  BSF    03.7
0B32:  MOVF   00,W
0B33:  MOVWF  4D
0B34:  MOVWF  52
0B35:  BCF    0A.3
0B36:  CALL   5DE
0B37:  BSF    0A.3
....................    hienthi(arrNumber[count % 10]); 
0B38:  BSF    03.1
0B39:  MOVLW  49
0B3A:  MOVWF  04
0B3B:  BCF    03.7
0B3C:  MOVF   44,W
0B3D:  MOVWF  50
0B3E:  MOVF   43,W
0B3F:  MOVWF  4F
0B40:  MOVF   42,W
0B41:  MOVWF  4E
0B42:  MOVF   41,W
0B43:  MOVWF  4D
0B44:  CLRF   54
0B45:  CLRF   53
0B46:  CLRF   52
0B47:  MOVLW  0A
0B48:  MOVWF  51
0B49:  BCF    0A.3
0B4A:  CALL   564
0B4B:  BSF    0A.3
0B4C:  MOVF   4C,W
0B4D:  MOVWF  50
0B4E:  MOVF   4B,W
0B4F:  MOVWF  4F
0B50:  MOVF   4A,W
0B51:  MOVWF  4E
0B52:  MOVF   49,W
0B53:  MOVWF  4D
0B54:  MOVLW  27
0B55:  ADDWF  4D,W
0B56:  MOVWF  04
0B57:  BCF    03.7
0B58:  BTFSC  4E.0
0B59:  BSF    03.7
0B5A:  MOVF   00,W
0B5B:  MOVWF  51
0B5C:  MOVWF  52
0B5D:  BCF    0A.3
0B5E:  CALL   5DE
0B5F:  BSF    0A.3
....................  
....................    while (count <= 1200) 
0B60:  BTFSC  44.7
0B61:  GOTO   372
0B62:  MOVF   44,F
0B63:  BTFSS  03.2
0B64:  GOTO   376
0B65:  MOVF   43,F
0B66:  BTFSS  03.2
0B67:  GOTO   376
0B68:  MOVF   42,W
0B69:  SUBLW  04
0B6A:  BTFSS  03.0
0B6B:  GOTO   376
0B6C:  BTFSS  03.2
0B6D:  GOTO   372
0B6E:  MOVF   41,W
0B6F:  SUBLW  B0
0B70:  BTFSS  03.0
0B71:  GOTO   376
....................       FORWARD(); 
0B72:  BCF    0A.3
0B73:  CALL   518
0B74:  BSF    0A.3
0B75:  GOTO   360
....................    STOP(); 
0B76:  BCF    0A.3
0B77:  CALL   522
0B78:  BSF    0A.3
....................  
....................    ghima(0x01); // clear 
0B79:  MOVLW  01
0B7A:  MOVWF  49
0B7B:  BCF    0A.3
0B7C:  CALL   553
0B7D:  BSF    0A.3
....................    ghima(0x80); // set 0,0 
0B7E:  MOVLW  80
0B7F:  MOVWF  49
0B80:  BCF    0A.3
0B81:  CALL   553
0B82:  BSF    0A.3
....................    hienthi(arrNumber[count / 10]); 
0B83:  BCF    03.1
0B84:  MOVF   44,W
0B85:  MOVWF  50
0B86:  MOVF   43,W
0B87:  MOVWF  4F
0B88:  MOVF   42,W
0B89:  MOVWF  4E
0B8A:  MOVF   41,W
0B8B:  MOVWF  4D
0B8C:  CLRF   54
0B8D:  CLRF   53
0B8E:  CLRF   52
0B8F:  MOVLW  0A
0B90:  MOVWF  51
0B91:  BCF    0A.3
0B92:  CALL   564
0B93:  BSF    0A.3
0B94:  MOVF   7A,W
0B95:  MOVWF  4C
0B96:  MOVF   79,W
0B97:  MOVWF  4B
0B98:  MOVF   78,W
0B99:  MOVWF  4A
0B9A:  MOVF   77,W
0B9B:  MOVWF  49
0B9C:  MOVLW  27
0B9D:  ADDWF  49,W
0B9E:  MOVWF  04
0B9F:  BCF    03.7
0BA0:  BTFSC  4A.0
0BA1:  BSF    03.7
0BA2:  MOVF   00,W
0BA3:  MOVWF  4D
0BA4:  MOVWF  52
0BA5:  BCF    0A.3
0BA6:  CALL   5DE
0BA7:  BSF    0A.3
....................    hienthi(arrNumber[count % 10]); 
0BA8:  BSF    03.1
0BA9:  MOVLW  49
0BAA:  MOVWF  04
0BAB:  BCF    03.7
0BAC:  MOVF   44,W
0BAD:  MOVWF  50
0BAE:  MOVF   43,W
0BAF:  MOVWF  4F
0BB0:  MOVF   42,W
0BB1:  MOVWF  4E
0BB2:  MOVF   41,W
0BB3:  MOVWF  4D
0BB4:  CLRF   54
0BB5:  CLRF   53
0BB6:  CLRF   52
0BB7:  MOVLW  0A
0BB8:  MOVWF  51
0BB9:  BCF    0A.3
0BBA:  CALL   564
0BBB:  BSF    0A.3
0BBC:  MOVF   4C,W
0BBD:  MOVWF  50
0BBE:  MOVF   4B,W
0BBF:  MOVWF  4F
0BC0:  MOVF   4A,W
0BC1:  MOVWF  4E
0BC2:  MOVF   49,W
0BC3:  MOVWF  4D
0BC4:  MOVLW  27
0BC5:  ADDWF  4D,W
0BC6:  MOVWF  04
0BC7:  BCF    03.7
0BC8:  BTFSC  4E.0
0BC9:  BSF    03.7
0BCA:  MOVF   00,W
0BCB:  MOVWF  51
0BCC:  MOVWF  52
0BCD:  BCF    0A.3
0BCE:  CALL   5DE
0BCF:  BSF    0A.3
....................  
....................    flagStarter = false; 
0BD0:  BCF    46.1
0BD1:  BCF    0A.3
0BD2:  BCF    0A.4
0BD3:  GOTO   71E (RETURN)
.................... } 
....................  
.................... void RingTheBell() 
.................... { 
....................    while (count >= 400) 
....................       STOP(); 
....................  
....................    ghima(0x01); // clear 
....................    ghima(0x80); // set 0,0 
....................    hienthi(arrNumber[count / 10]); 
....................    hienthi(arrNumber[count % 10]); 
....................  
....................    while (count >= -800) 
....................       REVERSE(); 
....................    STOP(); 
....................  
....................    ghima(0x01); // clear 
....................    ghima(0x80); // set 0,0 
....................    hienthi(arrNumber[count / 10]); 
....................    hienthi(arrNumber[count % 10]); 
....................  
....................    while (count <= -400) 
....................       STOP(); 
....................  
....................    ghima(0x01); // clear 
....................    ghima(0x80); // set 0,0 
....................    hienthi(arrNumber[count / 10]); 
....................    hienthi(arrNumber[count % 10]); 
....................  
....................    while (count <= 800) 
....................       FORWARD(); 
....................    STOP(); 
....................  
....................    ghima(0x01); // clear 
....................    ghima(0x80); // set 0,0 
....................    hienthi(arrNumber[count / 10]); 
....................    hienthi(arrNumber[count % 10]); 
.................... } 
....................  
.................... void main() 
*
05F8:  MOVF   03,W
05F9:  ANDLW  1F
05FA:  MOVWF  03
05FB:  CLRF   34
05FC:  CLRF   33
05FD:  CLRF   32
05FE:  MOVLW  7F
05FF:  MOVWF  31
0600:  CLRF   38
0601:  CLRF   37
0602:  MOVLW  40
0603:  MOVWF  36
0604:  MOVLW  81
0605:  MOVWF  35
0606:  BSF    03.1
0607:  MOVLW  17
0608:  MOVWF  65
0609:  MOVLW  B7
060A:  MOVWF  64
060B:  MOVLW  51
060C:  MOVWF  63
060D:  MOVLW  82
060E:  MOVWF  62
060F:  MOVF   34,W
0610:  MOVWF  69
0611:  MOVF   33,W
0612:  MOVWF  68
0613:  MOVF   32,W
0614:  MOVWF  67
0615:  MOVF   31,W
0616:  MOVWF  66
0617:  CALL   08B
0618:  MOVF   7A,W
0619:  MOVWF  4C
061A:  MOVF   79,W
061B:  MOVWF  4B
061C:  MOVF   78,W
061D:  MOVWF  4A
061E:  MOVF   77,W
061F:  MOVWF  49
0620:  MOVF   7A,W
0621:  MOVWF  52
0622:  MOVF   79,W
0623:  MOVWF  51
0624:  MOVF   78,W
0625:  MOVWF  50
0626:  MOVF   77,W
0627:  MOVWF  4F
0628:  MOVLW  17
0629:  MOVWF  56
062A:  MOVLW  B7
062B:  MOVWF  55
062C:  MOVLW  51
062D:  MOVWF  54
062E:  MOVLW  7A
062F:  MOVWF  53
0630:  CALL   1CC
0631:  MOVF   7A,W
0632:  MOVWF  4C
0633:  MOVF   79,W
0634:  MOVWF  4B
0635:  MOVF   78,W
0636:  MOVWF  4A
0637:  MOVF   77,W
0638:  MOVWF  49
0639:  MOVF   7A,W
063A:  MOVWF  52
063B:  MOVF   79,W
063C:  MOVWF  51
063D:  MOVF   78,W
063E:  MOVWF  50
063F:  MOVF   77,W
0640:  MOVWF  4F
0641:  CALL   386
0642:  MOVF   7A,W
0643:  MOVWF  4E
0644:  MOVF   79,W
0645:  MOVWF  4D
0646:  MOVF   78,W
0647:  MOVWF  4C
0648:  MOVF   77,W
0649:  MOVWF  4B
064A:  CALL   4F9
064B:  MOVF   7A,W
064C:  MOVWF  4C
064D:  MOVF   79,W
064E:  MOVWF  4B
064F:  MOVF   78,W
0650:  MOVWF  4A
0651:  MOVLW  01
0652:  SUBWF  77,W
0653:  MOVWF  39
0654:  MOVF   78,W
0655:  MOVWF  3A
0656:  MOVLW  00
0657:  BTFSS  03.0
0658:  MOVLW  01
0659:  SUBWF  3A,F
065A:  MOVF   79,W
065B:  MOVWF  3B
065C:  MOVLW  00
065D:  BTFSS  03.0
065E:  MOVLW  01
065F:  SUBWF  3B,F
0660:  MOVF   7A,W
0661:  MOVWF  3C
0662:  MOVLW  00
0663:  BTFSS  03.0
0664:  MOVLW  01
0665:  SUBWF  3C,F
0666:  CLRF   4A
0667:  MOVF   04,W
0668:  MOVWF  49
0669:  BCF    4A.0
066A:  BTFSC  03.7
066B:  BSF    4A.0
066C:  BSF    03.1
066D:  MOVLW  17
066E:  MOVWF  65
066F:  MOVLW  B7
0670:  MOVWF  64
0671:  MOVLW  51
0672:  MOVWF  63
0673:  MOVLW  82
0674:  MOVWF  62
0675:  MOVF   38,W
0676:  MOVWF  69
0677:  MOVF   37,W
0678:  MOVWF  68
0679:  MOVF   36,W
067A:  MOVWF  67
067B:  MOVF   35,W
067C:  MOVWF  66
067D:  CALL   08B
067E:  MOVF   49,W
067F:  MOVWF  04
0680:  BCF    03.7
0681:  BTFSC  4A.0
0682:  BSF    03.7
0683:  MOVF   7A,W
0684:  MOVWF  4E
0685:  MOVF   79,W
0686:  MOVWF  4D
0687:  MOVF   78,W
0688:  MOVWF  4C
0689:  MOVF   77,W
068A:  MOVWF  4B
068B:  MOVF   7A,W
068C:  MOVWF  52
068D:  MOVF   79,W
068E:  MOVWF  51
068F:  MOVF   78,W
0690:  MOVWF  50
0691:  MOVF   77,W
0692:  MOVWF  4F
0693:  MOVLW  17
0694:  MOVWF  56
0695:  MOVLW  B7
0696:  MOVWF  55
0697:  MOVLW  51
0698:  MOVWF  54
0699:  MOVLW  7A
069A:  MOVWF  53
069B:  CALL   1CC
069C:  MOVF   7A,W
069D:  MOVWF  4E
069E:  MOVF   79,W
069F:  MOVWF  4D
06A0:  MOVF   78,W
06A1:  MOVWF  4C
06A2:  MOVF   77,W
06A3:  MOVWF  4B
06A4:  MOVF   7A,W
06A5:  MOVWF  52
06A6:  MOVF   79,W
06A7:  MOVWF  51
06A8:  MOVF   78,W
06A9:  MOVWF  50
06AA:  MOVF   77,W
06AB:  MOVWF  4F
06AC:  CALL   386
06AD:  MOVF   7A,W
06AE:  MOVWF  4E
06AF:  MOVF   79,W
06B0:  MOVWF  4D
06B1:  MOVF   78,W
06B2:  MOVWF  4C
06B3:  MOVF   77,W
06B4:  MOVWF  4B
06B5:  CALL   4F9
06B6:  MOVLW  01
06B7:  SUBWF  77,W
06B8:  MOVWF  3D
06B9:  MOVF   78,W
06BA:  MOVWF  3E
06BB:  MOVLW  00
06BC:  BTFSS  03.0
06BD:  MOVLW  01
06BE:  SUBWF  3E,F
06BF:  MOVF   79,W
06C0:  MOVWF  3F
06C1:  MOVLW  00
06C2:  BTFSS  03.0
06C3:  MOVLW  01
06C4:  SUBWF  3F,F
06C5:  MOVF   7A,W
06C6:  MOVWF  40
06C7:  MOVLW  00
06C8:  BTFSS  03.0
06C9:  MOVLW  01
06CA:  SUBWF  40,F
06CB:  CLRF   44
06CC:  CLRF   43
06CD:  CLRF   42
06CE:  CLRF   41
06CF:  CLRF   45
06D0:  BSF    46.0
06D1:  BSF    46.1
06D2:  BCF    46.2
06D3:  CLRF   47
06D4:  MOVLW  FF
06D5:  MOVWF  48
06D6:  BSF    03.5
06D7:  BSF    1F.0
06D8:  BSF    1F.1
06D9:  BSF    1F.2
06DA:  BCF    1F.3
06DB:  MOVLW  07
06DC:  MOVWF  1C
06DD:  BCF    03.7
.................... { 
....................    // initLCD(); 
....................  
....................    // ghima(0x01); // clear 
....................    // ghima(0x80); // set 0,0 
....................    // hienthi(arrNumber[count / 10]); 
....................    // hienthi(arrNumber[count % 10]); 
....................  
....................    TRISB0 = TRISC0 = TRISC2 = 1; //input 
*
06F3:  BSF    03.5
06F4:  BSF    07.2
06F5:  BSF    07.0
06F6:  BSF    06.0
....................    TRISC6 = TRISC7 = TRISC1 = 0; //output 
06F7:  BCF    07.1
06F8:  BCF    07.7
06F9:  BCF    07.6
....................    TRISB6 = 0; 
06FA:  BCF    06.6
....................    TRISA = 0; 
06FB:  CLRF   05
....................  
....................    clear_interrupt(INT_EXT); 
06FC:  BCF    03.5
06FD:  BCF    0B.1
....................    enable_interrupts(INT_EXT); 
06FE:  BSF    0B.4
....................    ext_int_edge(H_TO_L); 
06FF:  BSF    03.5
0700:  BCF    01.6
....................  
....................    setup_ccp1(CCP_CAPTURE_FE); 
0701:  BCF    03.5
0702:  BSF    48.2
0703:  MOVF   48,W
0704:  BSF    03.5
0705:  MOVWF  07
0706:  BCF    03.5
0707:  CLRF   17
0708:  MOVLW  04
0709:  MOVWF  17
....................    setup_timer_1(T1_INTERNAL); 
070A:  MOVLW  85
070B:  MOVWF  10
....................    enable_interrupts(INT_CCP1); 
070C:  BSF    03.5
070D:  BSF    0C.2
....................  
....................    setup_timer_0(RTCC_INTERNAL | RTCC_DIV_256); //51.2us 
070E:  MOVF   01,W
070F:  ANDLW  C0
0710:  IORLW  07
0711:  MOVWF  01
....................    // set_timer0(59);                             //10.086ms 
....................    enable_interrupts(INT_TIMER0); 
0712:  BCF    03.5
0713:  BSF    0B.5
....................  
....................    enable_interrupts(GLOBAL); 
0714:  MOVLW  C0
0715:  IORWF  0B,F
....................  
....................    output_high(relayOut); 
0716:  BCF    48.1
0717:  MOVF   48,W
0718:  BSF    03.5
0719:  MOVWF  07
071A:  BCF    03.5
071B:  BSF    07.1
....................  
....................    starter(); 
071C:  BSF    0A.3
071D:  GOTO   000
071E:  BCF    0A.3
....................  
....................    // PORT_B_PULLUPS(0xff); 
....................  
....................    while (TRUE) 
....................    { 
071F:  GOTO   71F
....................       //RingTheBell(); 
....................       // ghima(0x80); // set 0,0 
....................       // hienthi(arrNumber[count / 10]); 
....................       // hienthi(arrNumber[count % 10]); 
....................       // if (flag) 
....................       // { 
....................       //    RB2 = RB3 = RB4 = 1; 
....................       // } 
....................       // else 
....................       // { 
....................       //    RB2 = RB3 = RB4 = 0; 
....................       // } 
....................    } 
.................... } 
0720:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
