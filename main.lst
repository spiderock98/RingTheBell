CCS PCM C Compiler, Version 5.025, 42287               26-Mar-20 11:18

               Filename:   D:\ThapChuong\main.lst

               ROM used:   449 words (5%)
                           Largest free fragment is 2048
               RAM used:   37 (10%) at main() level
                           46 (12%) worst case
               Stack used: 3 locations (2 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   11C
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  MOVLW  8C
0018:  MOVWF  04
0019:  BTFSS  00.2
001A:  GOTO   01D
001B:  BTFSC  0C.2
001C:  GOTO   02E
001D:  MOVF   22,W
001E:  MOVWF  04
001F:  MOVF   23,W
0020:  MOVWF  77
0021:  MOVF   24,W
0022:  MOVWF  78
0023:  MOVF   25,W
0024:  MOVWF  79
0025:  MOVF   26,W
0026:  MOVWF  7A
0027:  MOVF   20,W
0028:  MOVWF  0A
0029:  SWAPF  21,W
002A:  MOVWF  03
002B:  SWAPF  7F,F
002C:  SWAPF  7F,W
002D:  RETFIE
002E:  BCF    0A.3
002F:  BCF    0A.4
0030:  GOTO   031
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
*
0091:  BTFSC  03.1
0092:  GOTO   096
0093:  MOVLW  43
0094:  MOVWF  04
0095:  BCF    03.7
0096:  MOVF   3E,W
0097:  XORWF  42,W
0098:  ANDLW  80
0099:  MOVWF  48
009A:  BTFSS  3E.7
009B:  GOTO   0A7
009C:  COMF   3B,F
009D:  COMF   3C,F
009E:  COMF   3D,F
009F:  COMF   3E,F
00A0:  INCF   3B,F
00A1:  BTFSC  03.2
00A2:  INCF   3C,F
00A3:  BTFSC  03.2
00A4:  INCF   3D,F
00A5:  BTFSC  03.2
00A6:  INCF   3E,F
00A7:  BTFSS  42.7
00A8:  GOTO   0B4
00A9:  COMF   3F,F
00AA:  COMF   40,F
00AB:  COMF   41,F
00AC:  COMF   42,F
00AD:  INCF   3F,F
00AE:  BTFSC  03.2
00AF:  INCF   40,F
00B0:  BTFSC  03.2
00B1:  INCF   41,F
00B2:  BTFSC  03.2
00B3:  INCF   42,F
00B4:  CLRF   77
00B5:  CLRF   78
00B6:  CLRF   79
00B7:  CLRF   7A
00B8:  CLRF   43
00B9:  CLRF   44
00BA:  CLRF   45
00BB:  CLRF   46
00BC:  MOVF   42,W
00BD:  IORWF  41,W
00BE:  IORWF  40,W
00BF:  IORWF  3F,W
00C0:  BTFSC  03.2
00C1:  GOTO   0F2
00C2:  MOVLW  20
00C3:  MOVWF  47
00C4:  BCF    03.0
00C5:  RLF    3B,F
00C6:  RLF    3C,F
00C7:  RLF    3D,F
00C8:  RLF    3E,F
00C9:  RLF    43,F
00CA:  RLF    44,F
00CB:  RLF    45,F
00CC:  RLF    46,F
00CD:  MOVF   42,W
00CE:  SUBWF  46,W
00CF:  BTFSS  03.2
00D0:  GOTO   0DB
00D1:  MOVF   41,W
00D2:  SUBWF  45,W
00D3:  BTFSS  03.2
00D4:  GOTO   0DB
00D5:  MOVF   40,W
00D6:  SUBWF  44,W
00D7:  BTFSS  03.2
00D8:  GOTO   0DB
00D9:  MOVF   3F,W
00DA:  SUBWF  43,W
00DB:  BTFSS  03.0
00DC:  GOTO   0EC
00DD:  MOVF   3F,W
00DE:  SUBWF  43,F
00DF:  MOVF   40,W
00E0:  BTFSS  03.0
00E1:  INCFSZ 40,W
00E2:  SUBWF  44,F
00E3:  MOVF   41,W
00E4:  BTFSS  03.0
00E5:  INCFSZ 41,W
00E6:  SUBWF  45,F
00E7:  MOVF   42,W
00E8:  BTFSS  03.0
00E9:  INCFSZ 42,W
00EA:  SUBWF  46,F
00EB:  BSF    03.0
00EC:  RLF    77,F
00ED:  RLF    78,F
00EE:  RLF    79,F
00EF:  RLF    7A,F
00F0:  DECFSZ 47,F
00F1:  GOTO   0C4
00F2:  BTFSS  48.7
00F3:  GOTO   0FF
00F4:  COMF   77,F
00F5:  COMF   78,F
00F6:  COMF   79,F
00F7:  COMF   7A,F
00F8:  INCF   77,F
00F9:  BTFSC  03.2
00FA:  INCF   78,F
00FB:  BTFSC  03.2
00FC:  INCF   79,F
00FD:  BTFSC  03.2
00FE:  INCF   7A,F
00FF:  MOVF   43,W
0100:  MOVWF  00
0101:  INCF   04,F
0102:  MOVF   44,W
0103:  MOVWF  00
0104:  INCF   04,F
0105:  MOVF   45,W
0106:  MOVWF  00
0107:  INCF   04,F
0108:  MOVF   46,W
0109:  MOVWF  00
010A:  RETURN
....................  
.................... #list 
....................  
.................... #include <def_16f877a.h> 
.................... //========================= Register Definitions ========================== 
.................... //-----Register Files------------------------------------------------------ 
.................... #byte INDF         =0x00 
.................... #byte TMR0         =0x01 
.................... #byte PCL          =0x02 
.................... #byte STATUS       =0x03 
.................... #byte FSR          =0x04 
.................... #byte PORTA    = 0x05 
.................... #byte PORTB    = 0x06 
.................... #byte PORTC    = 0x07 
.................... #byte PORTD    = 0x08 
.................... #byte PORTE    = 0x09 
.................... #byte PCLATH       =0x0A 
.................... #byte INTCON       =0x0B 
.................... #byte PIR1	   =0x0C 
.................... #byte PIR2	   =0x0D 
.................... #byte TMR1L	   =0x0E 
.................... #byte TMR1H        =0x0F 
.................... #byte T1CON        =0x10 
.................... #byte TMR2	   =0x11 
.................... #byte T2CON	   =0x12 
.................... #byte SSPBUF       =0x13 
.................... #byte SSPCON       =0x14 
.................... #byte CCPR1L       =0x15 
.................... #byte CCPR1H       =0x16 
.................... #byte CCP1CON      =0x17 
.................... #byte RCSTA        =0x18 
.................... #byte TXREG        =0x19 
.................... #byte RCREG        =0x1A 
.................... #byte CCPR2L       =0x1B 
.................... #byte CCPR2H       =0x1C 
.................... #byte CCP2CON      =0x1D 
.................... #byte ADRESH       =0x1E 
.................... #byte ADCON0	   =0x1F 
.................... #byte OPTION_REG   =0x81 
.................... //-------------- TRIS PORT ----------------------------- 
.................... #byte TRISA        =0x85 
.................... #byte TRISB	   =0x86 
.................... #byte TRISC	   =0x87 
.................... #byte TRISD        =0x88 
.................... #byte TRISE	   =0x89 
.................... #byte PIE1	   =0x8C 
.................... #byte PIE2	   =0x8D 
.................... #byte PCON	   =0x8E 
....................  
.................... #byte SSPCON2      =0x91 
.................... #byte PR2          =0x92 
.................... #byte SSPADD       =0x93 
.................... #byte SSPSTAT      =0x94 
....................  
.................... #byte TXSTA        =0x98 
.................... #byte SPBRG        =0x99 
....................  
.................... #byte ADRESL       =0x9E 
.................... #byte ADCON1       =0x9F 
....................  
.................... /*	bank 2 registers */ 
....................  
.................... #byte EEDATA	   =0x010C 
.................... #byte EEADR	   =0x010D 
.................... #byte EEDATH       =0x010E 
.................... #byte EEADRH       =0x010F 
....................  
.................... /*	bank 3 registers */ 
....................  
.................... #byte EECON1	   =0x018C 
.................... #byte EECON2	   =0x018D 
....................  
.................... //----- STATUS Bits -------------------------------------------------------- 
....................  
.................... // For Assembly Language - Note upper case 
.................... #define IRP 	7 
.................... #define RP1 	6 
.................... #define RP0 	5 
.................... #define NOT_TO 	4 
.................... #define NOT_PD 	3 
.................... #define Z 	2 
.................... #define DC 	1 
.................... #define C  	0 
....................  
.................... //---------------- TRIS BIT PORT-------------------------------------- 
.................... //------------------TRISA bits--------------------------- 
....................  
.................... #bit TRISA5     =0x85.5 
.................... #bit TRISA4     =0x85.4 
.................... #bit TRISA3     =0x85.3 
.................... #bit TRISA2     =0x85.2 
.................... #bit TRISA1     =0x85.1 
.................... #bit TRISA0     =0x85.0 
....................  
.................... //-----------------TRISB bits----------------------------- 
....................  
.................... #bit TRISB7     =0x86.7 
.................... #bit TRISB6     =0x86.6 
.................... #bit TRISB5     =0x86.5 
.................... #bit TRISB4     =0x86.4 
.................... #bit TRISB3     =0x86.3 
.................... #bit TRISB2     =0x86.2 
.................... #bit TRISB1     =0x86.1 
.................... #bit TRISB0     =0x86.0 
....................  
.................... //----------------TRISC bits------------------- 
....................  
.................... #bit TRISC7     =0x87.7 
.................... #bit TRISC6     =0x87.6 
.................... #bit TRISC5     =0x87.5 
.................... #bit TRISC4     =0x87.4 
.................... #bit TRISC3     =0x87.3 
.................... #bit TRISC2     =0x87.2 
.................... #bit TRISC1     =0x87.1 
.................... #bit TRISC0     =0x87.0 
.................... //------------------TRISD bit------------------ 
.................... #bit TRISD7     =0x88.7 
.................... #bit TRISD6     =0x88.6 
.................... #bit TRISD5     =0x88.5 
.................... #bit TRISD4     =0x88.4 
.................... #bit TRISD3     =0x88.3 
.................... #bit TRISD2     =0x88.2 
.................... #bit TRISD1     =0x88.1 
.................... #bit TRISD0     =0x88.0 
.................... //-------------TRISE bit---------------------- 
.................... #bit TRISE2     =0x89.2 
.................... #bit TRISE1     =0x89.1 
.................... #bit TRISE0     =0x89.0 
.................... //--------------------------------------------------------------------------- 
.................... //---------PORTA bits------------------ 
.................... #bit RA4			= 0x05.4 
.................... #bit RA3			= 0x05.3 
.................... #bit RA2			= 0x05.2 
.................... #bit RA1			= 0x05.1 
.................... #bit RA0			= 0x05.0 
.................... //---------PORTB bits------------------ 
.................... #bit RB7			= 0x06.7 
.................... #bit RB6			= 0x06.6 
.................... #bit RB5			= 0x06.5 
.................... #bit RB4			= 0x06.4 
.................... #bit RB3			= 0x06.3 
.................... #bit RB2			= 0x06.2 
.................... #bit RB1			= 0x06.1 
.................... #bit RB0			= 0x06.0 
.................... //---------PORTC bits------------------ 
.................... #bit RC7			= 0x07.7 
.................... #bit RC6			= 0x07.6 
.................... #bit RC5			= 0x07.5 
.................... #bit RC4			= 0x07.4 
.................... #bit RC3			= 0x07.3 
.................... #bit RC2			= 0x07.2 
.................... #bit RC1			= 0x07.1 
.................... #bit RC0			= 0x07.0 
.................... //---------PORTD bits------------------ 
.................... #bit RD7			= 0x08.7 
.................... #bit RD6			= 0x08.6 
.................... #bit RD5			= 0x08.5 
.................... #bit RD4			= 0x08.4 
.................... #bit RD3			= 0x08.3 
.................... #bit RD2			= 0x08.2 
.................... #bit RD1			= 0x08.1 
.................... #bit RD0			= 0x08.0 
.................... //---------PORTE bits------------------ 
.................... #bit RE2			= 0x09.2 
.................... #bit RE1			= 0x09.1 
.................... #bit RE0			= 0x09.0 
....................  
.................... //----- INTCON ------------------------------------------------------------- 
....................  
.................... #bit	GIE      = 0x0b.7 
.................... #bit	PEIE     = 0x0b.6 
.................... #bit	TMR0IE   = 0x0b.5 
.................... #bit	INTE     = 0x0b.4 
.................... #bit	RBIE     = 0x0b.3 
.................... #bit	TMR0IF   = 0x0b.2 
.................... #bit	INTF     = 0x0b.1 
.................... #bit	RBIF     = 0x0b.0 
....................  
.................... //----- PIR1 --------------------------------------------------------------- 
....................  
.................... #bit pspif     = 0x0c.7 
.................... #bit adif      = 0x0c.6 
.................... #bit rcif      = 0x0c.5 
.................... #bit txif      = 0x0c.4 
.................... #bit sspif     = 0x0c.3 
.................... #bit ccp1if    = 0x0c.2 
.................... #bit tmr2if    = 0x0c.1 
.................... #bit tmr1if    = 0x0c.0 
....................  
.................... //----- PIR2 --------------------------------------------------------------- 
....................  
.................... #bit cmif      = 0x0d.6 
.................... #bit eeif      = 0x0d.4 
.................... #bit bclif     = 0x0d.3 
.................... #bit ccp2if    = 0x0d.0 
....................  
.................... //----- PIE1 --------------------------------------------------------------- 
....................  
.................... #bit pspie     = 0x8c.7 
.................... #bit adie      = 0x8c.6 
.................... #bit rcie      = 0x8c.5 
.................... #bit txie      = 0x8c.4 
.................... #bit sspie     = 0x8c.3 
.................... #bit ccp1ie    = 0x8c.2 
.................... #bit tmr2ie    = 0x8c.1 
.................... #bit tmr1ie    = 0x8c.0 
....................  
.................... //----- PIE2 --------------------------------------------------------------- 
....................  
.................... #bit cmie      = 0x8d.6 
.................... #bit eeie      = 0x8d.4 
.................... #bit bclie     = 0x8d.3 
.................... #bit ccp2ie    = 0x8d.0 
.................... //----- T1CON Bits --------------------------------------------------------- 
.................... #bit T1CKPS1    =0x10.5 
.................... #bit T1CKPS0    =0x10.4 
.................... #bit T1OSCEN    =0x10.3 
.................... #bit T1SYNC     =0x10.2 
.................... #bit TMR1CS     =0x10.1 
.................... #bit TMR1ON     =0x10.0 
....................  
.................... //----- T2CON Bits --------------------------------------------------------- 
.................... #bit TOUTPS3    =0x12.6 
.................... #bit TOUTPS2    =0x12.5 
.................... #bit TOUTPS1    =0x12.4 
.................... #bit TOUTPS0    =0x12.3 
.................... #bit TMR2ON     =0x12.2 
.................... #bit T2CKPS1    =0x12.1 
.................... #bit T2CKPS0    =0x12.0 
....................  
.................... //-------------SSPCON bits-------------------------- 
.................... #bit WCOL       =0x14.7 
.................... #bit SSPOV      =0x14.6 
.................... #bit SSPEN      =0x14.5 
.................... #bit CKP        =0x14.4 
.................... #bit SSPM3      =0x14.3 
.................... #bit SSPM2      =0x14.2 
.................... #bit SSPM1      =0x14.1 
.................... #bit SSPM0      =0x14.0 
....................  
.................... //---------------CCP1CON bits-------- 
.................... #bit CCP1X      =0x17.5 
.................... #bit CCP1Y      =0x17.4 
.................... #bit CCP1M3     =0x17.3 
.................... #bit CCP1M2     =0x17.2 
.................... #bit CCP1M1     =0x17.1 
.................... #bit CCP1M0     =0x17.0 
....................  
.................... //---------------RCSTA bits------------------- 
....................  
.................... #bit SPEN       =0x18.7 
.................... #bit RX9        =0x18.6 
.................... #bit SREN       =0x18.5 
.................... #bit CREN       =0x18.4 
.................... #bit ADDEN      =0x18.3 
.................... #bit FERR       =0x18.2 
.................... #bit OERR       =0x18.1 
.................... #bit RX9D       =0x18.0 
....................  
.................... //-----------------------CCP2CON bits---------- 
....................  
.................... #bit CCP2X      =0x1D.5 
.................... #bit CCP2Y      =0x1D.4 
.................... #bit CCP2M3     =0x1D.3 
.................... #bit CCP2M2     =0x1D.2 
.................... #bit CCP2M1     =0x1D.1 
.................... #bit CCP2M0     =0x1D.0 
....................  
.................... //----- ADCON0 Bits -------------------------------------------------------- 
.................... #bit ADCS1      =0x1F.7 
.................... #bit ADCS0      =0x1F.6 
.................... #bit CHS2       =0x1F.5 
.................... #bit CHS1       =0x1F.4 
.................... #bit CHS0       =0x1F.3 
.................... #bit ADGO       =0x1F.2 
.................... #bit ADON       =0x1F.0 
....................  
.................... //----- OPTION_reg Bits -------------------------------------------------------- 
....................  
.................... #bit RBPU       =0x81.7 
.................... #bit INTEDG     =0x81.6 
.................... #bit T0CS       =0x81.5 
.................... #bit T0SE       =0x81.4 
.................... #bit PSA        =0x81.3 
.................... #bit PS2        =0x81.2 
.................... #bit PS1        =0x81.1 
.................... #bit PS0        =0x81.0 
.................... //----- PCON Bits ---------------------------------------------------------- 
....................  
.................... #bit POR        =0x8E.1 
.................... #bit BOD        =0x8E.0 
....................  
.................... //-----------SSPCON2 bits--------------------------------------------- 
....................  
.................... #bit GCEN       =0x91.7 
.................... #bit ACKSTAT    =0x91.6 
.................... #bit ACKDT      =0x91.5 
.................... #bit ACKEN      =0x91.4 
.................... #bit RCEN       =0x91.3 
.................... #bit PEN        =0x91.2 
.................... #bit RSEN       =0x91.1 
.................... #bit SEN        =0x91.0 
....................  
.................... //---------------------SSPSTAT bits------------------------ 
....................  
.................... #bit STAT_SMP   =0x94.7 
.................... #bit STAT_CKE   =0x94.6 
.................... #bit STAT_DA    =0x94.5 
.................... #bit STAT_P     =0x94.4 
.................... #bit STAT_S     =0x94.3 
.................... #bit STAT_RW    =0x94.2 
.................... #bit STAT_UA    =0x94.1 
.................... #bit STAT_BF    =0x94.0 
....................  
.................... //----------------TXSTA bits----------------- 
....................  
.................... #bit CSRC       =0x98.7 
.................... #bit TX9        =0x98.6 
.................... #bit TXEN       =0x98.5 
.................... #bit SYNC       =0x98.4 
.................... #bit BRGH       =0x98.2 
.................... #bit TRMT       =0x98.1 
.................... #bit TX9D       =0x98.0 
....................  
.................... //--------------ADCON1 bits--------------- 
....................  
.................... #bit ADFM       =0x9F.7 
.................... #bit ADCS2      =0x9F.6 
.................... #bit PCFG3      =0x9F.3 
.................... #bit PCFG2      =0x9F.2 
.................... #bit PCFG1      =0x9F.1 
.................... #bit PCFG0      =0x9F.0 
....................  
.................... //-----------EECON1 bits---------- 
....................  
.................... #bit EEPGD      =0x018C.7 
.................... #bit WRERR      =0x018C.3 
.................... #bit WREN       =0x018C.2 
.................... #bit WR         =0x018C.1 
.................... #bit RD         =0x018C.0 
....................  
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=20000000) 
*
0048:  MOVLW  41
0049:  MOVWF  04
004A:  BCF    03.7
004B:  MOVF   00,W
004C:  BTFSC  03.2
004D:  GOTO   05B
004E:  MOVLW  06
004F:  MOVWF  78
0050:  CLRF   77
0051:  DECFSZ 77,F
0052:  GOTO   051
0053:  DECFSZ 78,F
0054:  GOTO   050
0055:  MOVLW  7B
0056:  MOVWF  77
0057:  DECFSZ 77,F
0058:  GOTO   057
0059:  DECFSZ 00,F
005A:  GOTO   04E
005B:  RETURN
005C:  MOVLW  03
005D:  SUBWF  42,F
005E:  BTFSS  03.0
005F:  GOTO   06A
0060:  MOVLW  42
0061:  MOVWF  04
0062:  BCF    03.7
0063:  MOVF   00,W
0064:  BTFSC  03.2
0065:  GOTO   06A
0066:  GOTO   068
0067:  GOTO   068
0068:  DECFSZ 00,F
0069:  GOTO   067
006A:  RETURN
....................  
....................  
.................... #include "def_lcd.c" 
.................... #define RS RC3 
.................... #define RW RC4 
.................... #define E RC5 
.................... #define LCD PORTD 
....................  
.................... // CONST Char gd[4][21] = {"    Thap Chuong     ", 
.................... //                         "                    ", 
.................... //                         "Sensor 1:           ", 
.................... //                         "Sensor 2:           "}; 
.................... char arrNumber[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'}; 
*
012E:  MOVLW  30
012F:  BCF    03.5
0130:  MOVWF  27
0131:  MOVLW  31
0132:  MOVWF  28
0133:  MOVLW  32
0134:  MOVWF  29
0135:  MOVLW  33
0136:  MOVWF  2A
0137:  MOVLW  34
0138:  MOVWF  2B
0139:  MOVLW  35
013A:  MOVWF  2C
013B:  MOVLW  36
013C:  MOVWF  2D
013D:  MOVLW  37
013E:  MOVWF  2E
013F:  MOVLW  38
0140:  MOVWF  2F
0141:  MOVLW  39
0142:  MOVWF  30
....................  
.................... void ghima(int8 data) 
.................... { 
....................   LCD = data; 
*
006B:  MOVF   37,W
006C:  MOVWF  08
....................   RS = 0; 
006D:  BCF    07.3
....................   RW = 0; 
006E:  BCF    07.4
....................   E = 1; 
006F:  BSF    07.5
....................   E = 0; 
0070:  BCF    07.5
....................   delay_us(1500); 
0071:  MOVLW  01
0072:  MOVWF  41
0073:  CALL   048
0074:  MOVLW  02
0075:  MOVWF  38
0076:  MOVLW  F9
0077:  MOVWF  42
0078:  CALL   05C
0079:  DECFSZ 38,F
007A:  GOTO   076
007B:  RETURN
.................... } 
.................... void hienthi(int8 data) 
.................... { 
....................   LCD = data; 
*
010B:  MOVF   40,W
010C:  MOVWF  08
....................   RS = 1; 
010D:  BSF    07.3
....................   RW = 0; 
010E:  BCF    07.4
....................   E = 1; 
010F:  BSF    07.5
....................   E = 0; 
0110:  BCF    07.5
....................   delay_us(1500); 
0111:  MOVLW  01
0112:  MOVWF  41
0113:  CALL   048
0114:  MOVLW  02
0115:  MOVWF  41
0116:  MOVLW  F9
0117:  MOVWF  42
0118:  CALL   05C
0119:  DECFSZ 41,F
011A:  GOTO   116
011B:  RETURN
.................... } 
....................  
.................... void initLCD() 
.................... { 
....................   TRISD = 0; 
*
007C:  BSF    03.5
007D:  CLRF   08
....................   TRISC3 = TRISC4 = TRISC5 = 0; 
007E:  BCF    07.5
007F:  BCF    07.4
0080:  BCF    07.3
....................  
....................   ghima(0x38); //giao tiep 8bit, hien thi 2 dong, kich thuoc 5x7 
0081:  MOVLW  38
0082:  BCF    03.5
0083:  MOVWF  37
0084:  CALL   06B
....................   ghima(0x0C); //bat man hinh 
0085:  MOVLW  0C
0086:  MOVWF  37
0087:  CALL   06B
....................   ghima(0x01); //xoa man hinh 
0088:  MOVLW  01
0089:  MOVWF  37
008A:  CALL   06B
....................   ghima(0x80); // dua con tro ve du dong 1 
008B:  MOVLW  80
008C:  MOVWF  37
008D:  CALL   06B
008E:  BCF    0A.3
008F:  BCF    0A.4
0090:  GOTO   144 (RETURN)
....................  
....................   // int8 i, j; 
....................   // for (i = 0; i < 4; i++) 
....................   //   for (j = 0; j < 20; j++) 
....................   //   { 
....................   //     hienthi(gd[i][j]); 
....................   //     if ((j == 19) && (i == 0)) 
....................   //       ghima(0xc0); 
....................   //     if ((j == 19) && (i == 1)) 
....................   //       ghima(0x94); 
....................   //     if ((j == 19) && (i == 2)) 
....................   //       ghima(0xd4); 
....................   //   } 
.................... } 
....................  
....................  
.................... #define triac1 RB7 
.................... #define triac2 RB6 
.................... #define relay RB5 
....................  
.................... signed int32 count = 0; 
.................... int1 flag = true; 
....................  
.................... // #INT_EXT 
.................... // void ext_isr() 
.................... // { 
.................... //    if (RB1) 
.................... //    { 
.................... //       //clockwise 
.................... //       ++count; 
.................... //    } 
.................... //    else 
.................... //    { 
.................... //       --count; 
.................... //    } 
.................... //    clear_interrupt(INT_EXT); 
.................... // } 
....................  
.................... #INT_CCP1 
.................... void ccp1_isr() 
.................... { 
....................    if (RB1) 
*
0031:  BTFSS  06.1
0032:  GOTO   03C
....................    { 
....................       //clockwise 
....................       ++count; 
0033:  MOVLW  01
0034:  ADDWF  31,F
0035:  BTFSC  03.0
0036:  INCF   32,F
0037:  BTFSC  03.2
0038:  INCF   33,F
0039:  BTFSC  03.2
003A:  INCF   34,F
....................    } 
003B:  GOTO   044
....................    else 
....................    { 
....................       --count; 
003C:  MOVLW  FF
003D:  ADDWF  31,F
003E:  BTFSS  03.0
003F:  ADDWF  32,F
0040:  BTFSS  03.0
0041:  ADDWF  33,F
0042:  BTFSS  03.0
0043:  ADDWF  34,F
....................    } 
0044:  BCF    0C.2
0045:  BCF    0A.3
0046:  BCF    0A.4
0047:  GOTO   01D
.................... } 
....................  
.................... void thuan() 
.................... { 
....................    triac1 = 1; 
....................    triac2 = 0; 
.................... } 
.................... void nghich() 
.................... { 
....................    triac1 = 0; 
....................    triac2 = 1; 
.................... } 
.................... void dung() 
.................... { 
....................    triac1 = 1; 
....................    triac2 = 1; 
.................... } 
....................  
.................... void khoidong() 
.................... { 
....................    while (count <= 400) 
....................       thuan(); 
....................    dung(); 
....................  
....................    ghima(0x01); // clear 
....................    ghima(0x80); // set 0,0 
....................    hienthi(arrNumber[count / 10]); 
....................    hienthi(arrNumber[count % 10]); 
....................  
....................    while (count >= 0) 
....................       dung(); 
....................  
....................    ghima(0x01); // clear 
....................    ghima(0x80); // set 0,0 
....................    hienthi(arrNumber[count / 10]); 
....................    hienthi(arrNumber[count % 10]); 
....................  
....................    while (count >= -400) 
....................       nghich(); 
....................    dung(); 
....................  
....................    ghima(0x01); // clear 
....................    ghima(0x80); // set 0,0 
....................    hienthi(arrNumber[count / 10]); 
....................    hienthi(arrNumber[count % 10]); 
....................  
....................    while (count <= 0) 
....................       dung(); 
....................  
....................    ghima(0x01); // clear 
....................    ghima(0x80); // set 0,0 
....................    hienthi(arrNumber[count / 10]); 
....................    hienthi(arrNumber[count % 10]); 
....................  
....................    while (count <= 800) 
....................       thuan(); 
....................    dung(); 
....................  
....................    ghima(0x01); // clear 
....................    ghima(0x80); // set 0,0 
....................    hienthi(arrNumber[count / 10]); 
....................    hienthi(arrNumber[count % 10]); 
....................  
....................    while (count >= 0) 
....................       dung(); 
....................  
....................    ghima(0x01); // clear 
....................    ghima(0x80); // set 0,0 
....................    hienthi(arrNumber[count / 10]); 
....................    hienthi(arrNumber[count % 10]); 
....................  
....................    while (count >= -800) 
....................       nghich(); 
....................    dung(); 
....................  
....................    ghima(0x01); // clear 
....................    ghima(0x80); // set 0,0 
....................    hienthi(arrNumber[count / 10]); 
....................    hienthi(arrNumber[count % 10]); 
....................  
....................    while (count <= 0) 
....................       dung(); 
....................  
....................    ghima(0x01); // clear 
....................    ghima(0x80); // set 0,0 
....................    hienthi(arrNumber[count / 10]); 
....................    hienthi(arrNumber[count % 10]); 
....................  
....................    while (count <= 1200) 
....................       thuan(); 
....................    dung(); 
....................  
....................    ghima(0x01); // clear 
....................    ghima(0x80); // set 0,0 
....................    hienthi(arrNumber[count / 10]); 
....................    hienthi(arrNumber[count % 10]); 
.................... } 
....................  
.................... void main() 
*
011C:  MOVF   03,W
011D:  ANDLW  1F
011E:  MOVWF  03
011F:  CLRF   34
0120:  CLRF   33
0121:  CLRF   32
0122:  CLRF   31
0123:  BSF    35.0
0124:  MOVLW  FF
0125:  MOVWF  36
0126:  BSF    03.5
0127:  BSF    1F.0
0128:  BSF    1F.1
0129:  BSF    1F.2
012A:  BCF    1F.3
012B:  MOVLW  07
012C:  MOVWF  1C
012D:  BCF    03.7
.................... { 
....................    initLCD(); 
*
0143:  GOTO   07C
....................  
....................    ghima(0x01); // clear 
0144:  MOVLW  01
0145:  MOVWF  37
0146:  CALL   06B
....................    ghima(0x80); // set 0,0 
0147:  MOVLW  80
0148:  MOVWF  37
0149:  CALL   06B
....................    hienthi(arrNumber[count / 10]); 
014A:  BCF    03.1
014B:  MOVF   34,W
014C:  MOVWF  3E
014D:  MOVF   33,W
014E:  MOVWF  3D
014F:  MOVF   32,W
0150:  MOVWF  3C
0151:  MOVF   31,W
0152:  MOVWF  3B
0153:  CLRF   42
0154:  CLRF   41
0155:  CLRF   40
0156:  MOVLW  0A
0157:  MOVWF  3F
0158:  CALL   091
0159:  MOVF   7A,W
015A:  MOVWF  3A
015B:  MOVF   79,W
015C:  MOVWF  39
015D:  MOVF   78,W
015E:  MOVWF  38
015F:  MOVF   77,W
0160:  MOVWF  37
0161:  MOVLW  27
0162:  ADDWF  77,W
0163:  MOVWF  04
0164:  BCF    03.7
0165:  BTFSC  78.0
0166:  BSF    03.7
0167:  MOVF   00,W
0168:  MOVWF  3B
0169:  MOVWF  40
016A:  CALL   10B
....................    hienthi(arrNumber[count % 10]); 
016B:  BSF    03.1
016C:  MOVLW  37
016D:  MOVWF  04
016E:  BCF    03.7
016F:  MOVF   34,W
0170:  MOVWF  3E
0171:  MOVF   33,W
0172:  MOVWF  3D
0173:  MOVF   32,W
0174:  MOVWF  3C
0175:  MOVF   31,W
0176:  MOVWF  3B
0177:  CLRF   42
0178:  CLRF   41
0179:  CLRF   40
017A:  MOVLW  0A
017B:  MOVWF  3F
017C:  CALL   091
017D:  MOVF   3A,W
017E:  MOVWF  3E
017F:  MOVF   39,W
0180:  MOVWF  3D
0181:  MOVF   38,W
0182:  MOVWF  3C
0183:  MOVF   37,W
0184:  MOVWF  3B
0185:  MOVLW  27
0186:  ADDWF  37,W
0187:  MOVWF  04
0188:  BCF    03.7
0189:  BTFSC  38.0
018A:  BSF    03.7
018B:  MOVF   00,W
018C:  MOVWF  3F
018D:  MOVWF  40
018E:  CALL   10B
....................  
....................    TRISB0 = TRISB1 = TRISC2 = 1; //input 
018F:  BSF    03.5
0190:  BSF    07.2
0191:  BSF    06.1
0192:  BSF    06.0
....................    TRISB5 = TRISB6 = TRISB7 = 0; //output 
0193:  BCF    06.7
0194:  BCF    06.6
0195:  BCF    06.5
....................    TRISA = 0; 
0196:  CLRF   05
....................  
....................    clear_interrupt(INT_EXT); 
0197:  BCF    03.5
0198:  BCF    0B.1
....................    enable_interrupts(INT_EXT); 
0199:  BSF    0B.4
....................    ext_int_edge(H_TO_L); 
019A:  BSF    03.5
019B:  BCF    01.6
....................  
....................    setup_ccp1(CCP_CAPTURE_FE); 
019C:  BCF    03.5
019D:  BSF    36.2
019E:  MOVF   36,W
019F:  BSF    03.5
01A0:  MOVWF  07
01A1:  BCF    03.5
01A2:  CLRF   17
01A3:  MOVLW  04
01A4:  MOVWF  17
....................    setup_timer_1(T1_INTERNAL); 
01A5:  MOVLW  85
01A6:  MOVWF  10
....................    enable_interrupts(INT_CCP1); 
01A7:  BSF    03.5
01A8:  BSF    0C.2
....................  
....................    enable_interrupts(GLOBAL); 
01A9:  MOVLW  C0
01AA:  BCF    03.5
01AB:  IORWF  0B,F
....................  
....................    while (count < 50) 
01AC:  BTFSC  34.7
01AD:  GOTO   1BB
01AE:  MOVF   34,F
01AF:  BTFSS  03.2
01B0:  GOTO   1BE
01B1:  MOVF   33,F
01B2:  BTFSS  03.2
01B3:  GOTO   1BE
01B4:  MOVF   32,F
01B5:  BTFSS  03.2
01B6:  GOTO   1BE
01B7:  MOVF   31,W
01B8:  SUBLW  31
01B9:  BTFSS  03.0
01BA:  GOTO   1BE
....................    { 
....................       PORTA = 0xFF; 
01BB:  MOVLW  FF
01BC:  MOVWF  05
01BD:  GOTO   1AC
....................    } 
....................    PORTA = 0; 
01BE:  CLRF   05
....................  
....................    // PORT_B_PULLUPS(0xff); 
....................  
....................    while (TRUE) 
....................    { 
01BF:  GOTO   1BF
....................       // ghima(0x80); // set 0,0 
....................       // hienthi(arrNumber[count / 10]); 
....................       // hienthi(arrNumber[count % 10]); 
....................       // if (flag) 
....................       // { 
....................       //    RB2 = RB3 = RB4 = 1; 
....................       // } 
....................       // else 
....................       // { 
....................       //    RB2 = RB3 = RB4 = 0; 
....................       // } 
....................    } 
.................... } 
01C0:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
