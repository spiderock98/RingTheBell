CCS PCM C Compiler, Version 5.025, 30622               25-Mar-20 22:51

               Filename:   D:\ThapChuong\main.lst

               ROM used:   241 words (3%)
                           Largest free fragment is 2048
               RAM used:   20 (5%) at main() level
                           26 (7%) worst case
               Stack used: 2 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   0BB
0003:  NOP
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  DATA E4,32
0005:  DATA ED,37
0006:  DATA 20,36
0007:  DATA 63,32
0008:  DATA 00,00
*
0063:  MOVF   0B,W
0064:  MOVWF  2F
0065:  BCF    0B.7
0066:  BSF    03.5
0067:  BSF    03.6
0068:  BSF    0C.7
0069:  BSF    0C.0
006A:  NOP
006B:  NOP
006C:  BCF    03.5
006D:  BCF    03.6
006E:  BTFSC  2F.7
006F:  BSF    0B.7
0070:  BSF    03.6
0071:  MOVF   0C,W
0072:  ANDLW  7F
0073:  BTFSC  03.2
0074:  GOTO   0B7
0075:  BCF    03.6
0076:  MOVWF  2F
0077:  BSF    03.6
0078:  MOVF   0D,W
0079:  BCF    03.6
007A:  MOVWF  30
007B:  BSF    03.6
007C:  MOVF   0F,W
007D:  BCF    03.6
007E:  MOVWF  31
007F:  MOVF   2F,W
0080:  MOVWF  32
0081:  CALL   052
0082:  MOVF   30,W
0083:  BSF    03.6
0084:  MOVWF  0D
0085:  BCF    03.6
0086:  MOVF   31,W
0087:  BSF    03.6
0088:  MOVWF  0F
0089:  BCF    03.6
008A:  MOVF   0B,W
008B:  MOVWF  32
008C:  BCF    0B.7
008D:  BSF    03.5
008E:  BSF    03.6
008F:  BSF    0C.7
0090:  BSF    0C.0
0091:  NOP
0092:  NOP
0093:  BCF    03.5
0094:  BCF    03.6
0095:  BTFSC  32.7
0096:  BSF    0B.7
0097:  BSF    03.6
0098:  RLF    0C,W
0099:  RLF    0E,W
009A:  ANDLW  7F
009B:  BTFSC  03.2
009C:  GOTO   0B7
009D:  BCF    03.6
009E:  MOVWF  2F
009F:  BSF    03.6
00A0:  MOVF   0D,W
00A1:  BCF    03.6
00A2:  MOVWF  30
00A3:  BSF    03.6
00A4:  MOVF   0F,W
00A5:  BCF    03.6
00A6:  MOVWF  31
00A7:  MOVF   2F,W
00A8:  MOVWF  32
00A9:  CALL   052
00AA:  MOVF   30,W
00AB:  BSF    03.6
00AC:  MOVWF  0D
00AD:  BCF    03.6
00AE:  MOVF   31,W
00AF:  BSF    03.6
00B0:  MOVWF  0F
00B1:  INCF   0D,F
00B2:  BTFSC  03.2
00B3:  INCF   0F,F
00B4:  BCF    03.6
00B5:  GOTO   063
00B6:  BSF    03.6
00B7:  BCF    03.6
00B8:  BCF    0A.3
00B9:  BCF    0A.4
00BA:  GOTO   0EE (RETURN)
....................  
.................... #list 
....................  
.................... #include <def_16f877a.h> 
.................... //========================= Register Definitions ========================== 
.................... //-----Register Files------------------------------------------------------ 
.................... #byte INDF         =0x00 
.................... #byte TMR0         =0x01 
.................... #byte PCL          =0x02 
.................... #byte STATUS       =0x03 
.................... #byte FSR          =0x04 
.................... #byte PORTA    = 0x05 
.................... #byte PORTB    = 0x06 
.................... #byte PORTC    = 0x07 
.................... #byte PORTD    = 0x08 
.................... #byte PORTE    = 0x09 
.................... #byte PCLATH       =0x0A 
.................... #byte INTCON       =0x0B 
.................... #byte PIR1	   =0x0C 
.................... #byte PIR2	   =0x0D 
.................... #byte TMR1L	   =0x0E 
.................... #byte TMR1H        =0x0F 
.................... #byte T1CON        =0x10 
.................... #byte TMR2	   =0x11 
.................... #byte T2CON	   =0x12 
.................... #byte SSPBUF       =0x13 
.................... #byte SSPCON       =0x14 
.................... #byte CCPR1L       =0x15 
.................... #byte CCPR1H       =0x16 
.................... #byte CCP1CON      =0x17 
.................... #byte RCSTA        =0x18 
.................... #byte TXREG        =0x19 
.................... #byte RCREG        =0x1A 
.................... #byte CCPR2L       =0x1B 
.................... #byte CCPR2H       =0x1C 
.................... #byte CCP2CON      =0x1D 
.................... #byte ADRESH       =0x1E 
.................... #byte ADCON0	   =0x1F 
.................... #byte OPTION_REG   =0x81 
.................... //-------------- TRIS PORT ----------------------------- 
.................... #byte TRISA        =0x85 
.................... #byte TRISB	   =0x86 
.................... #byte TRISC	   =0x87 
.................... #byte TRISD        =0x88 
.................... #byte TRISE	   =0x89 
.................... #byte PIE1	   =0x8C 
.................... #byte PIE2	   =0x8D 
.................... #byte PCON	   =0x8E 
....................  
.................... #byte SSPCON2      =0x91 
.................... #byte PR2          =0x92 
.................... #byte SSPADD       =0x93 
.................... #byte SSPSTAT      =0x94 
....................  
.................... #byte TXSTA        =0x98 
.................... #byte SPBRG        =0x99 
....................  
.................... #byte ADRESL       =0x9E 
.................... #byte ADCON1       =0x9F 
....................  
.................... /*	bank 2 registers */ 
....................  
.................... #byte EEDATA	   =0x010C 
.................... #byte EEADR	   =0x010D 
.................... #byte EEDATH       =0x010E 
.................... #byte EEADRH       =0x010F 
....................  
.................... /*	bank 3 registers */ 
....................  
.................... #byte EECON1	   =0x018C 
.................... #byte EECON2	   =0x018D 
....................  
.................... //----- STATUS Bits -------------------------------------------------------- 
....................  
.................... // For Assembly Language - Note upper case 
.................... #define IRP 	7 
.................... #define RP1 	6 
.................... #define RP0 	5 
.................... #define NOT_TO 	4 
.................... #define NOT_PD 	3 
.................... #define Z 	2 
.................... #define DC 	1 
.................... #define C  	0 
....................  
.................... //---------------- TRIS BIT PORT-------------------------------------- 
.................... //------------------TRISA bits--------------------------- 
....................  
.................... #bit TRISA5     =0x85.5 
.................... #bit TRISA4     =0x85.4 
.................... #bit TRISA3     =0x85.3 
.................... #bit TRISA2     =0x85.2 
.................... #bit TRISA1     =0x85.1 
.................... #bit TRISA0     =0x85.0 
....................  
.................... //-----------------TRISB bits----------------------------- 
....................  
.................... #bit TRISB7     =0x86.7 
.................... #bit TRISB6     =0x86.6 
.................... #bit TRISB5     =0x86.5 
.................... #bit TRISB4     =0x86.4 
.................... #bit TRISB3     =0x86.3 
.................... #bit TRISB2     =0x86.2 
.................... #bit TRISB1     =0x86.1 
.................... #bit TRISB0     =0x86.0 
....................  
.................... //----------------TRISC bits------------------- 
....................  
.................... #bit TRISC7     =0x87.7 
.................... #bit TRISC6     =0x87.6 
.................... #bit TRISC5     =0x87.5 
.................... #bit TRISC4     =0x87.4 
.................... #bit TRISC3     =0x87.3 
.................... #bit TRISC2     =0x87.2 
.................... #bit TRISC1     =0x87.1 
.................... #bit TRISC0     =0x87.0 
.................... //------------------TRISD bit------------------ 
.................... #bit TRISD7     =0x88.7 
.................... #bit TRISD6     =0x88.6 
.................... #bit TRISD5     =0x88.5 
.................... #bit TRISD4     =0x88.4 
.................... #bit TRISD3     =0x88.3 
.................... #bit TRISD2     =0x88.2 
.................... #bit TRISD1     =0x88.1 
.................... #bit TRISD0     =0x88.0 
.................... //-------------TRISE bit---------------------- 
.................... #bit TRISE2     =0x89.2 
.................... #bit TRISE1     =0x89.1 
.................... #bit TRISE0     =0x89.0 
.................... //--------------------------------------------------------------------------- 
.................... //---------PORTA bits------------------ 
.................... #bit RA4			= 0x05.4 
.................... #bit RA3			= 0x05.3 
.................... #bit RA2			= 0x05.2 
.................... #bit RA1			= 0x05.1 
.................... #bit RA0			= 0x05.0 
.................... //---------PORTB bits------------------ 
.................... #bit RB7			= 0x06.7 
.................... #bit RB6			= 0x06.6 
.................... #bit RB5			= 0x06.5 
.................... #bit RB4			= 0x06.4 
.................... #bit RB3			= 0x06.3 
.................... #bit RB2			= 0x06.2 
.................... #bit RB1			= 0x06.1 
.................... #bit RB0			= 0x06.0 
.................... //---------PORTC bits------------------ 
.................... #bit RC7			= 0x07.7 
.................... #bit RC6			= 0x07.6 
.................... #bit RC5			= 0x07.5 
.................... #bit RC4			= 0x07.4 
.................... #bit RC3			= 0x07.3 
.................... #bit RC2			= 0x07.2 
.................... #bit RC1			= 0x07.1 
.................... #bit RC0			= 0x07.0 
.................... //---------PORTD bits------------------ 
.................... #bit RD7			= 0x08.7 
.................... #bit RD6			= 0x08.6 
.................... #bit RD5			= 0x08.5 
.................... #bit RD4			= 0x08.4 
.................... #bit RD3			= 0x08.3 
.................... #bit RD2			= 0x08.2 
.................... #bit RD1			= 0x08.1 
.................... #bit RD0			= 0x08.0 
.................... //---------PORTE bits------------------ 
.................... #bit RE2			= 0x09.2 
.................... #bit RE1			= 0x09.1 
.................... #bit RE0			= 0x09.0 
....................  
.................... //----- INTCON ------------------------------------------------------------- 
....................  
.................... #bit	GIE      = 0x0b.7 
.................... #bit	PEIE     = 0x0b.6 
.................... #bit	TMR0IE   = 0x0b.5 
.................... #bit	INTE     = 0x0b.4 
.................... #bit	RBIE     = 0x0b.3 
.................... #bit	TMR0IF   = 0x0b.2 
.................... #bit	INTF     = 0x0b.1 
.................... #bit	RBIF     = 0x0b.0 
....................  
.................... //----- PIR1 --------------------------------------------------------------- 
....................  
.................... #bit pspif     = 0x0c.7 
.................... #bit adif      = 0x0c.6 
.................... #bit rcif      = 0x0c.5 
.................... #bit txif      = 0x0c.4 
.................... #bit sspif     = 0x0c.3 
.................... #bit ccp1if    = 0x0c.2 
.................... #bit tmr2if    = 0x0c.1 
.................... #bit tmr1if    = 0x0c.0 
....................  
.................... //----- PIR2 --------------------------------------------------------------- 
....................  
.................... #bit cmif      = 0x0d.6 
.................... #bit eeif      = 0x0d.4 
.................... #bit bclif     = 0x0d.3 
.................... #bit ccp2if    = 0x0d.0 
....................  
.................... //----- PIE1 --------------------------------------------------------------- 
....................  
.................... #bit pspie     = 0x8c.7 
.................... #bit adie      = 0x8c.6 
.................... #bit rcie      = 0x8c.5 
.................... #bit txie      = 0x8c.4 
.................... #bit sspie     = 0x8c.3 
.................... #bit ccp1ie    = 0x8c.2 
.................... #bit tmr2ie    = 0x8c.1 
.................... #bit tmr1ie    = 0x8c.0 
....................  
.................... //----- PIE2 --------------------------------------------------------------- 
....................  
.................... #bit cmie      = 0x8d.6 
.................... #bit eeie      = 0x8d.4 
.................... #bit bclie     = 0x8d.3 
.................... #bit ccp2ie    = 0x8d.0 
.................... //----- T1CON Bits --------------------------------------------------------- 
.................... #bit T1CKPS1    =0x10.5 
.................... #bit T1CKPS0    =0x10.4 
.................... #bit T1OSCEN    =0x10.3 
.................... #bit T1SYNC     =0x10.2 
.................... #bit TMR1CS     =0x10.1 
.................... #bit TMR1ON     =0x10.0 
....................  
.................... //----- T2CON Bits --------------------------------------------------------- 
.................... #bit TOUTPS3    =0x12.6 
.................... #bit TOUTPS2    =0x12.5 
.................... #bit TOUTPS1    =0x12.4 
.................... #bit TOUTPS0    =0x12.3 
.................... #bit TMR2ON     =0x12.2 
.................... #bit T2CKPS1    =0x12.1 
.................... #bit T2CKPS0    =0x12.0 
....................  
.................... //-------------SSPCON bits-------------------------- 
.................... #bit WCOL       =0x14.7 
.................... #bit SSPOV      =0x14.6 
.................... #bit SSPEN      =0x14.5 
.................... #bit CKP        =0x14.4 
.................... #bit SSPM3      =0x14.3 
.................... #bit SSPM2      =0x14.2 
.................... #bit SSPM1      =0x14.1 
.................... #bit SSPM0      =0x14.0 
....................  
.................... //---------------CCP1CON bits-------- 
.................... #bit CCP1X      =0x17.5 
.................... #bit CCP1Y      =0x17.4 
.................... #bit CCP1M3     =0x17.3 
.................... #bit CCP1M2     =0x17.2 
.................... #bit CCP1M1     =0x17.1 
.................... #bit CCP1M0     =0x17.0 
....................  
.................... //---------------RCSTA bits------------------- 
....................  
.................... #bit SPEN       =0x18.7 
.................... #bit RX9        =0x18.6 
.................... #bit SREN       =0x18.5 
.................... #bit CREN       =0x18.4 
.................... #bit ADDEN      =0x18.3 
.................... #bit FERR       =0x18.2 
.................... #bit OERR       =0x18.1 
.................... #bit RX9D       =0x18.0 
....................  
.................... //-----------------------CCP2CON bits---------- 
....................  
.................... #bit CCP2X      =0x1D.5 
.................... #bit CCP2Y      =0x1D.4 
.................... #bit CCP2M3     =0x1D.3 
.................... #bit CCP2M2     =0x1D.2 
.................... #bit CCP2M1     =0x1D.1 
.................... #bit CCP2M0     =0x1D.0 
....................  
.................... //----- ADCON0 Bits -------------------------------------------------------- 
.................... #bit ADCS1      =0x1F.7 
.................... #bit ADCS0      =0x1F.6 
.................... #bit CHS2       =0x1F.5 
.................... #bit CHS1       =0x1F.4 
.................... #bit CHS0       =0x1F.3 
.................... #bit ADGO       =0x1F.2 
.................... #bit ADON       =0x1F.0 
....................  
.................... //----- OPTION_reg Bits -------------------------------------------------------- 
....................  
.................... #bit RBPU       =0x81.7 
.................... #bit INTEDG     =0x81.6 
.................... #bit T0CS       =0x81.5 
.................... #bit T0SE       =0x81.4 
.................... #bit PSA        =0x81.3 
.................... #bit PS2        =0x81.2 
.................... #bit PS1        =0x81.1 
.................... #bit PS0        =0x81.0 
.................... //----- PCON Bits ---------------------------------------------------------- 
....................  
.................... #bit POR        =0x8E.1 
.................... #bit BOD        =0x8E.0 
....................  
.................... //-----------SSPCON2 bits--------------------------------------------- 
....................  
.................... #bit GCEN       =0x91.7 
.................... #bit ACKSTAT    =0x91.6 
.................... #bit ACKDT      =0x91.5 
.................... #bit ACKEN      =0x91.4 
.................... #bit RCEN       =0x91.3 
.................... #bit PEN        =0x91.2 
.................... #bit RSEN       =0x91.1 
.................... #bit SEN        =0x91.0 
....................  
.................... //---------------------SSPSTAT bits------------------------ 
....................  
.................... #bit STAT_SMP   =0x94.7 
.................... #bit STAT_CKE   =0x94.6 
.................... #bit STAT_DA    =0x94.5 
.................... #bit STAT_P     =0x94.4 
.................... #bit STAT_S     =0x94.3 
.................... #bit STAT_RW    =0x94.2 
.................... #bit STAT_UA    =0x94.1 
.................... #bit STAT_BF    =0x94.0 
....................  
.................... //----------------TXSTA bits----------------- 
....................  
.................... #bit CSRC       =0x98.7 
.................... #bit TX9        =0x98.6 
.................... #bit TXEN       =0x98.5 
.................... #bit SYNC       =0x98.4 
.................... #bit BRGH       =0x98.2 
.................... #bit TRMT       =0x98.1 
.................... #bit TX9D       =0x98.0 
....................  
.................... //--------------ADCON1 bits--------------- 
....................  
.................... #bit ADFM       =0x9F.7 
.................... #bit ADCS2      =0x9F.6 
.................... #bit PCFG3      =0x9F.3 
.................... #bit PCFG2      =0x9F.2 
.................... #bit PCFG1      =0x9F.1 
.................... #bit PCFG0      =0x9F.0 
....................  
.................... //-----------EECON1 bits---------- 
....................  
.................... #bit EEPGD      =0x018C.7 
.................... #bit WRERR      =0x018C.3 
.................... #bit WREN       =0x018C.2 
.................... #bit WR         =0x018C.1 
.................... #bit RD         =0x018C.0 
....................  
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=20000000) 
*
0009:  MOVLW  33
000A:  MOVWF  04
000B:  BCF    03.7
000C:  MOVF   00,W
000D:  BTFSC  03.2
000E:  GOTO   01C
000F:  MOVLW  06
0010:  MOVWF  78
0011:  CLRF   77
0012:  DECFSZ 77,F
0013:  GOTO   012
0014:  DECFSZ 78,F
0015:  GOTO   011
0016:  MOVLW  7B
0017:  MOVWF  77
0018:  DECFSZ 77,F
0019:  GOTO   018
001A:  DECFSZ 00,F
001B:  GOTO   00F
001C:  RETURN
001D:  MOVLW  03
001E:  SUBWF  34,F
001F:  BTFSS  03.0
0020:  GOTO   02B
0021:  MOVLW  34
0022:  MOVWF  04
0023:  BCF    03.7
0024:  MOVF   00,W
0025:  BTFSC  03.2
0026:  GOTO   02B
0027:  GOTO   029
0028:  GOTO   029
0029:  DECFSZ 00,F
002A:  GOTO   028
002B:  RETURN
....................  
....................  
.................... #include "def_lcd.c" 
.................... #define RS RC3 
.................... #define RW RC4 
.................... #define E RC5 
.................... #define LCD PORTD 
....................  
.................... // CONST Char gd[4][21] = {"    Thap Chuong     ", 
.................... //                         "                    ", 
.................... //                         "Sensor 1:           ", 
.................... //                         "Sensor 2:           "}; 
.................... char num[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'}; 
*
00CB:  MOVLW  30
00CC:  BCF    03.5
00CD:  MOVWF  20
00CE:  MOVLW  31
00CF:  MOVWF  21
00D0:  MOVLW  32
00D1:  MOVWF  22
00D2:  MOVLW  33
00D3:  MOVWF  23
00D4:  MOVLW  34
00D5:  MOVWF  24
00D6:  MOVLW  35
00D7:  MOVWF  25
00D8:  MOVLW  36
00D9:  MOVWF  26
00DA:  MOVLW  37
00DB:  MOVWF  27
00DC:  MOVLW  38
00DD:  MOVWF  28
00DE:  MOVLW  39
00DF:  MOVWF  29
....................  
.................... void ghima(int8 data) 
.................... { 
....................   LCD = data; 
*
002C:  MOVF   2F,W
002D:  MOVWF  08
....................   RS = 0; 
002E:  BCF    07.3
....................   RW = 0; 
002F:  BCF    07.4
....................   E = 1; 
0030:  BSF    07.5
....................   E = 0; 
0031:  BCF    07.5
....................   delay_us(1500); 
0032:  MOVLW  01
0033:  MOVWF  33
0034:  CALL   009
0035:  MOVLW  02
0036:  MOVWF  30
0037:  MOVLW  F9
0038:  MOVWF  34
0039:  CALL   01D
003A:  DECFSZ 30,F
003B:  GOTO   037
003C:  RETURN
.................... } 
.................... void hienthi(int8 data) 
.................... { 
....................   LCD = data; 
*
0052:  MOVF   32,W
0053:  MOVWF  08
....................   RS = 1; 
0054:  BSF    07.3
....................   RW = 0; 
0055:  BCF    07.4
....................   E = 1; 
0056:  BSF    07.5
....................   E = 0; 
0057:  BCF    07.5
....................   delay_us(1500); 
0058:  MOVLW  01
0059:  MOVWF  33
005A:  CALL   009
005B:  MOVLW  02
005C:  MOVWF  33
005D:  MOVLW  F9
005E:  MOVWF  34
005F:  CALL   01D
0060:  DECFSZ 33,F
0061:  GOTO   05D
0062:  RETURN
.................... } 
....................  
.................... void initLCD() 
.................... { 
....................   TRISD = 0; 
*
003D:  BSF    03.5
003E:  CLRF   08
....................   TRISC3 = TRISC4 = TRISC5 = 0; 
003F:  BCF    07.5
0040:  BCF    07.4
0041:  BCF    07.3
....................  
....................   ghima(0x38); //giao tiep 8bit, hien thi 2 dong, kich thuoc 5x7 
0042:  MOVLW  38
0043:  BCF    03.5
0044:  MOVWF  2F
0045:  CALL   02C
....................   ghima(0x0C); //bat man hinh 
0046:  MOVLW  0C
0047:  MOVWF  2F
0048:  CALL   02C
....................   ghima(0x01); //xoa man hinh 
0049:  MOVLW  01
004A:  MOVWF  2F
004B:  CALL   02C
....................   ghima(0x80); // dua con tro ve du dong 1 
004C:  MOVLW  80
004D:  MOVWF  2F
004E:  CALL   02C
004F:  BCF    0A.3
0050:  BCF    0A.4
0051:  GOTO   0E1 (RETURN)
....................  
....................   // int8 i, j; 
....................   // for (i = 0; i < 4; i++) 
....................   //   for (j = 0; j < 20; j++) 
....................   //   { 
....................   //     hienthi(gd[i][j]); 
....................   //     if ((j == 19) && (i == 0)) 
....................   //       ghima(0xc0); 
....................   //     if ((j == 19) && (i == 1)) 
....................   //       ghima(0x94); 
....................   //     if ((j == 19) && (i == 2)) 
....................   //       ghima(0xd4); 
....................   //   } 
.................... } 
....................  
....................  
.................... // #define triac1 5 
.................... // #define triac2 6 
....................  
.................... signed int32 count = 0; 
.................... int1 flag = true; 
....................  
.................... // #INT_EXT 
.................... // void ext_isr() 
.................... // { 
.................... //    if (RB1) 
.................... //    { 
.................... //       //clockwise 
.................... //       ++count; 
.................... //       // if (count >= 100) 
.................... //       //    flag = false; 
.................... //       // else 
.................... //       //    flag = true; 
.................... //       RC2 = 1; 
.................... //    } 
.................... //    else 
.................... //    { 
.................... //       --count; 
.................... //       RC2 = 0; 
.................... //       // flag = false; 
.................... //    } 
.................... //    clear_interrupt(INT_EXT); 
.................... // } 
....................  
.................... // void thuan() 
.................... // { 
.................... //    digitalWrite(triac1, 1); 
.................... //    digitalWrite(triac2, 0); 
.................... //    Serial.println("THUAN"); 
.................... // } 
.................... // void nghich() 
.................... // { 
.................... //    digitalWrite(triac1, 0); 
.................... //    digitalWrite(triac2, 1); 
.................... //    Serial.println("NGHICH"); 
.................... // } 
....................  
.................... // void khoidong() 
.................... // { 
.................... //    while (count <= 400) 
.................... //       thuan(); 
.................... //    while (count >= 0) 
.................... //       dung(); 
.................... //    while (count >= -400) 
.................... //       nghich(); 
.................... //    while (count <= 0) 
.................... //       dung(); 
.................... //    while (count <= 800) 
.................... //       thuan(); 
.................... //    while (count >= 0) 
.................... //       dung(); 
.................... //    while (count >= -800) 
.................... //       nghich(); 
.................... //    while (count <= 0) 
.................... //       dung(); 
.................... //    while (count <= 1200) 
.................... //       thuan(); 
.................... //    dung(); 
.................... // } 
....................  
.................... void main() 
*
00BB:  MOVF   03,W
00BC:  ANDLW  1F
00BD:  MOVWF  03
00BE:  CLRF   2D
00BF:  CLRF   2C
00C0:  CLRF   2B
00C1:  CLRF   2A
00C2:  BSF    2E.0
00C3:  BSF    03.5
00C4:  BSF    1F.0
00C5:  BSF    1F.1
00C6:  BSF    1F.2
00C7:  BCF    1F.3
00C8:  MOVLW  07
00C9:  MOVWF  1C
00CA:  BCF    03.7
.................... { 
....................    initLCD(); 
*
00E0:  GOTO   03D
....................  
....................    // clear_interrupt(INT_EXT); 
....................    // enable_interrupts(INT_EXT); 
....................    // ext_int_edge(H_TO_L); 
....................    // enable_interrupts(GLOBAL); 
....................  
....................    // PORT_B_PULLUPS(0xff); 
....................  
....................    // TRISB0 = TRISB1 = 1;                   //input 
....................    // TRISB2 = TRISB3 = TRISB4 = TRISC2 = 0; //output 
....................    TRISD1 = 0; 
00E1:  BSF    03.5
00E2:  BCF    08.1
....................  
....................    while (TRUE) 
....................    { 
....................       ghima(0x80); 
00E3:  MOVLW  80
00E4:  BCF    03.5
00E5:  MOVWF  2F
00E6:  CALL   02C
....................       hienthi("demo lcd"); 
00E7:  MOVLW  04
00E8:  BSF    03.6
00E9:  MOVWF  0D
00EA:  MOVLW  00
00EB:  MOVWF  0F
00EC:  BCF    03.6
00ED:  GOTO   063
00EE:  BSF    03.5
00EF:  GOTO   0E3
....................       // hienthi(num[count / 10]); 
....................       // hienthi(num[count % 10]); 
....................  
....................       // if (flag) 
....................       // { 
....................       //    RB2 = RB3 = RB4 = 1; 
....................       // } 
....................       // else 
....................       // { 
....................       //    RB2 = RB3 = RB4 = 0; 
....................       // } 
....................    } 
.................... } 
00F0:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
