CCS PCM C Compiler, Version 5.025, 47277               21-Apr-20 23:11

               Filename:   D:\Desktop\RingTheBell\PIC\encoder400\main.lst

               ROM used:   2810 words (34%)
                           Largest free fragment is 2048
               RAM used:   35 (10%) at main() level
                           123 (33%) worst case
               Stack used: 5 locations (2 in main + 3 for interrupts)
               Stack size: 8

*
0000:  MOVLW  09
0001:  MOVWF  0A
0002:  GOTO   163
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.4
0018:  GOTO   01B
0019:  BTFSC  0B.1
001A:  GOTO   03C
001B:  MOVLW  8C
001C:  MOVWF  04
001D:  BTFSS  00.1
001E:  GOTO   021
001F:  BTFSC  0C.1
0020:  GOTO   03F
0021:  MOVLW  8C
0022:  MOVWF  04
0023:  BTFSS  00.2
0024:  GOTO   027
0025:  BTFSC  0C.2
0026:  GOTO   042
0027:  BTFSS  0B.5
0028:  GOTO   02B
0029:  BTFSC  0B.2
002A:  GOTO   045
002B:  MOVF   22,W
002C:  MOVWF  04
002D:  MOVF   23,W
002E:  MOVWF  77
002F:  MOVF   24,W
0030:  MOVWF  78
0031:  MOVF   25,W
0032:  MOVWF  79
0033:  MOVF   26,W
0034:  MOVWF  7A
0035:  MOVF   20,W
0036:  MOVWF  0A
0037:  SWAPF  21,W
0038:  MOVWF  03
0039:  SWAPF  7F,F
003A:  SWAPF  7F,W
003B:  RETFIE
003C:  BCF    0A.3
003D:  BCF    0A.4
003E:  GOTO   048
003F:  BCF    0A.3
0040:  BCF    0A.4
0041:  GOTO   578
0042:  BCF    0A.3
0043:  BCF    0A.4
0044:  GOTO   7B1
0045:  BCF    0A.3
0046:  BCF    0A.4
0047:  GOTO   05E
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
*
0074:  MOVLW  B6
0075:  MOVWF  77
0076:  CLRF   7A
0077:  CLRF   79
0078:  CLRF   78
0079:  MOVF   67,W
007A:  IORWF  68,W
007B:  IORWF  69,W
007C:  IORWF  6A,W
007D:  BTFSS  03.2
007E:  GOTO   081
007F:  CLRF   77
0080:  GOTO   08E
0081:  BCF    03.0
0082:  BTFSC  78.7
0083:  GOTO   08D
0084:  RLF    67,F
0085:  RLF    68,F
0086:  RLF    69,F
0087:  RLF    6A,F
0088:  RLF    7A,F
0089:  RLF    79,F
008A:  RLF    78,F
008B:  DECFSZ 77,F
008C:  GOTO   081
008D:  BCF    78.7
008E:  RETURN
008F:  MOVLW  80
0090:  BTFSS  03.1
0091:  GOTO   095
0092:  BSF    03.5
0093:  XORWF  30,F
0094:  BCF    03.5
0095:  BSF    03.5
0096:  CLRF   35
0097:  CLRF   36
0098:  MOVF   2C,W
0099:  MOVWF  34
009A:  MOVF   30,W
009B:  XORWF  34,F
009C:  MOVF   2B,W
009D:  BTFSC  03.2
009E:  GOTO   183
009F:  MOVWF  33
00A0:  MOVWF  77
00A1:  MOVF   2F,W
00A2:  BTFSC  03.2
00A3:  GOTO   18C
00A4:  SUBWF  33,F
00A5:  BTFSC  03.2
00A6:  GOTO   128
00A7:  BTFSS  03.0
00A8:  GOTO   0E6
00A9:  MOVF   30,W
00AA:  MOVWF  39
00AB:  BSF    39.7
00AC:  MOVF   31,W
00AD:  MOVWF  38
00AE:  MOVF   32,W
00AF:  MOVWF  37
00B0:  CLRF   36
00B1:  BCF    03.0
00B2:  RRF    39,F
00B3:  RRF    38,F
00B4:  RRF    37,F
00B5:  RRF    36,F
00B6:  DECFSZ 33,F
00B7:  GOTO   0B0
00B8:  BTFSS  34.7
00B9:  GOTO   0BD
00BA:  BSF    35.0
00BB:  GOTO   1A0
00BC:  BCF    35.0
00BD:  BCF    33.0
00BE:  BSF    35.4
00BF:  MOVLW  AE
00C0:  MOVWF  04
00C1:  BCF    03.7
00C2:  GOTO   1B5
00C3:  BCF    35.4
00C4:  BTFSC  34.7
00C5:  GOTO   0D0
00C6:  BTFSS  33.0
00C7:  GOTO   0DB
00C8:  RRF    39,F
00C9:  RRF    38,F
00CA:  RRF    37,F
00CB:  RRF    36,F
00CC:  INCF   77,F
00CD:  BTFSC  03.2
00CE:  GOTO   19B
00CF:  GOTO   0DB
00D0:  BTFSC  39.7
00D1:  GOTO   0DE
00D2:  BCF    03.0
00D3:  RLF    36,F
00D4:  RLF    37,F
00D5:  RLF    38,F
00D6:  RLF    39,F
00D7:  DECF   77,F
00D8:  BTFSC  03.2
00D9:  GOTO   19B
00DA:  GOTO   0D0
00DB:  BSF    35.6
00DC:  GOTO   148
00DD:  BCF    35.6
00DE:  MOVF   2C,W
00DF:  MOVWF  34
00E0:  BTFSS  34.7
00E1:  GOTO   0E4
00E2:  BSF    39.7
00E3:  GOTO   194
00E4:  BCF    39.7
00E5:  GOTO   194
00E6:  MOVF   2F,W
00E7:  MOVWF  33
00E8:  MOVWF  77
00E9:  MOVF   2B,W
00EA:  SUBWF  33,F
00EB:  MOVF   2C,W
00EC:  MOVWF  39
00ED:  BSF    39.7
00EE:  MOVF   2D,W
00EF:  MOVWF  38
00F0:  MOVF   2E,W
00F1:  MOVWF  37
00F2:  CLRF   36
00F3:  BCF    03.0
00F4:  RRF    39,F
00F5:  RRF    38,F
00F6:  RRF    37,F
00F7:  RRF    36,F
00F8:  DECFSZ 33,F
00F9:  GOTO   0F2
00FA:  BTFSS  34.7
00FB:  GOTO   0FF
00FC:  BSF    35.1
00FD:  GOTO   1A0
00FE:  BCF    35.1
00FF:  BCF    33.0
0100:  BSF    35.5
0101:  MOVLW  B2
0102:  MOVWF  04
0103:  BCF    03.7
0104:  GOTO   1B5
0105:  BCF    35.5
0106:  BTFSC  34.7
0107:  GOTO   112
0108:  BTFSS  33.0
0109:  GOTO   11D
010A:  RRF    39,F
010B:  RRF    38,F
010C:  RRF    37,F
010D:  RRF    36,F
010E:  INCF   77,F
010F:  BTFSC  03.2
0110:  GOTO   19B
0111:  GOTO   11D
0112:  BTFSC  39.7
0113:  GOTO   120
0114:  BCF    03.0
0115:  RLF    36,F
0116:  RLF    37,F
0117:  RLF    38,F
0118:  RLF    39,F
0119:  DECF   77,F
011A:  BTFSC  03.2
011B:  GOTO   19B
011C:  GOTO   112
011D:  BSF    35.7
011E:  GOTO   148
011F:  BCF    35.7
0120:  MOVF   30,W
0121:  MOVWF  34
0122:  BTFSS  34.7
0123:  GOTO   126
0124:  BSF    39.7
0125:  GOTO   194
0126:  BCF    39.7
0127:  GOTO   194
0128:  MOVF   30,W
0129:  MOVWF  39
012A:  BSF    39.7
012B:  MOVF   31,W
012C:  MOVWF  38
012D:  MOVF   32,W
012E:  MOVWF  37
012F:  BTFSS  34.7
0130:  GOTO   135
0131:  BCF    39.7
0132:  BSF    35.2
0133:  GOTO   1A0
0134:  BCF    35.2
0135:  CLRF   36
0136:  BCF    33.0
0137:  MOVLW  AE
0138:  MOVWF  04
0139:  BCF    03.7
013A:  GOTO   1B5
013B:  BTFSC  34.7
013C:  GOTO   15E
013D:  MOVF   2C,W
013E:  MOVWF  34
013F:  BTFSS  33.0
0140:  GOTO   148
0141:  RRF    39,F
0142:  RRF    38,F
0143:  RRF    37,F
0144:  RRF    36,F
0145:  INCF   77,F
0146:  BTFSC  03.2
0147:  GOTO   19B
0148:  BTFSS  36.7
0149:  GOTO   159
014A:  INCF   37,F
014B:  BTFSS  03.2
014C:  GOTO   159
014D:  INCF   38,F
014E:  BTFSS  03.2
014F:  GOTO   159
0150:  INCF   39,F
0151:  BTFSS  03.2
0152:  GOTO   159
0153:  RRF    39,F
0154:  RRF    38,F
0155:  RRF    37,F
0156:  INCF   77,F
0157:  BTFSC  03.2
0158:  GOTO   19B
0159:  BTFSC  35.6
015A:  GOTO   0DD
015B:  BTFSC  35.7
015C:  GOTO   11F
015D:  GOTO   17D
015E:  MOVLW  80
015F:  XORWF  39,F
0160:  BTFSS  39.7
0161:  GOTO   166
0162:  GOTO   1A0
0163:  MOVF   30,W
0164:  MOVWF  34
0165:  GOTO   173
0166:  MOVF   2C,W
0167:  MOVWF  34
0168:  MOVF   39,F
0169:  BTFSS  03.2
016A:  GOTO   173
016B:  MOVF   38,F
016C:  BTFSS  03.2
016D:  GOTO   173
016E:  MOVF   37,F
016F:  BTFSS  03.2
0170:  GOTO   173
0171:  CLRF   77
0172:  GOTO   194
0173:  BTFSC  39.7
0174:  GOTO   17D
0175:  BCF    03.0
0176:  RLF    36,F
0177:  RLF    37,F
0178:  RLF    38,F
0179:  RLF    39,F
017A:  DECFSZ 77,F
017B:  GOTO   173
017C:  GOTO   19B
017D:  BTFSS  34.7
017E:  GOTO   181
017F:  BSF    39.7
0180:  GOTO   194
0181:  BCF    39.7
0182:  GOTO   194
0183:  MOVF   2F,W
0184:  MOVWF  77
0185:  MOVF   30,W
0186:  MOVWF  39
0187:  MOVF   31,W
0188:  MOVWF  38
0189:  MOVF   32,W
018A:  MOVWF  37
018B:  GOTO   194
018C:  MOVF   2B,W
018D:  MOVWF  77
018E:  MOVF   2C,W
018F:  MOVWF  39
0190:  MOVF   2D,W
0191:  MOVWF  38
0192:  MOVF   2E,W
0193:  MOVWF  37
0194:  MOVF   39,W
0195:  MOVWF  78
0196:  MOVF   38,W
0197:  MOVWF  79
0198:  MOVF   37,W
0199:  MOVWF  7A
019A:  GOTO   1D3
019B:  CLRF   77
019C:  CLRF   78
019D:  CLRF   79
019E:  CLRF   7A
019F:  GOTO   1D3
01A0:  CLRF   36
01A1:  COMF   37,F
01A2:  COMF   38,F
01A3:  COMF   39,F
01A4:  COMF   36,F
01A5:  INCF   36,F
01A6:  BTFSS  03.2
01A7:  GOTO   1AE
01A8:  INCF   37,F
01A9:  BTFSS  03.2
01AA:  GOTO   1AE
01AB:  INCF   38,F
01AC:  BTFSC  03.2
01AD:  INCF   39,F
01AE:  BTFSC  35.0
01AF:  GOTO   0BC
01B0:  BTFSC  35.1
01B1:  GOTO   0FE
01B2:  BTFSC  35.2
01B3:  GOTO   134
01B4:  GOTO   163
01B5:  MOVF   00,W
01B6:  ADDWF  37,F
01B7:  BTFSS  03.0
01B8:  GOTO   1BF
01B9:  INCF   38,F
01BA:  BTFSS  03.2
01BB:  GOTO   1BF
01BC:  INCF   39,F
01BD:  BTFSC  03.2
01BE:  BSF    33.0
01BF:  DECF   04,F
01C0:  MOVF   00,W
01C1:  ADDWF  38,F
01C2:  BTFSS  03.0
01C3:  GOTO   1C7
01C4:  INCF   39,F
01C5:  BTFSC  03.2
01C6:  BSF    33.0
01C7:  DECF   04,F
01C8:  MOVF   00,W
01C9:  BTFSS  00.7
01CA:  XORLW  80
01CB:  ADDWF  39,F
01CC:  BTFSC  03.0
01CD:  BSF    33.0
01CE:  BTFSC  35.4
01CF:  GOTO   0C3
01D0:  BTFSC  35.5
01D1:  GOTO   105
01D2:  GOTO   13B
01D3:  BCF    03.5
01D4:  RETURN
01D5:  MOVF   6B,W
01D6:  BTFSC  03.2
01D7:  GOTO   2AF
01D8:  BSF    03.5
01D9:  MOVWF  24
01DA:  BCF    03.5
01DB:  MOVF   6F,W
01DC:  BTFSC  03.2
01DD:  GOTO   2AF
01DE:  BSF    03.5
01DF:  SUBWF  24,F
01E0:  BTFSS  03.0
01E1:  GOTO   1E9
01E2:  MOVLW  7F
01E3:  ADDWF  24,F
01E4:  BTFSS  03.0
01E5:  GOTO   1E8
01E6:  BCF    03.5
01E7:  GOTO   2AF
01E8:  GOTO   1F3
01E9:  MOVLW  81
01EA:  SUBWF  24,F
01EB:  BTFSC  03.0
01EC:  GOTO   1EF
01ED:  BCF    03.5
01EE:  GOTO   2AF
01EF:  BTFSS  03.2
01F0:  GOTO   1F3
01F1:  BCF    03.5
01F2:  GOTO   2AF
01F3:  MOVF   24,W
01F4:  MOVWF  77
01F5:  CLRF   78
01F6:  CLRF   79
01F7:  CLRF   7A
01F8:  CLRF   23
01F9:  BCF    03.5
01FA:  MOVF   6C,W
01FB:  BSF    03.5
01FC:  MOVWF  22
01FD:  BSF    22.7
01FE:  BCF    03.5
01FF:  MOVF   6D,W
0200:  BSF    03.5
0201:  MOVWF  21
0202:  BCF    03.5
0203:  MOVF   6E,W
0204:  BSF    03.5
0205:  MOVWF  20
0206:  MOVLW  19
0207:  MOVWF  24
0208:  MOVF   72,W
0209:  SUBWF  20,F
020A:  BTFSC  03.0
020B:  GOTO   21C
020C:  MOVLW  01
020D:  SUBWF  21,F
020E:  BTFSC  03.0
020F:  GOTO   21C
0210:  SUBWF  22,F
0211:  BTFSC  03.0
0212:  GOTO   21C
0213:  SUBWF  23,F
0214:  BTFSC  03.0
0215:  GOTO   21C
0216:  INCF   23,F
0217:  INCF   22,F
0218:  INCF   21,F
0219:  MOVF   72,W
021A:  ADDWF  20,F
021B:  GOTO   24E
021C:  MOVF   71,W
021D:  SUBWF  21,F
021E:  BTFSC  03.0
021F:  GOTO   237
0220:  MOVLW  01
0221:  SUBWF  22,F
0222:  BTFSC  03.0
0223:  GOTO   237
0224:  SUBWF  23,F
0225:  BTFSC  03.0
0226:  GOTO   237
0227:  INCF   23,F
0228:  INCF   22,F
0229:  MOVF   71,W
022A:  ADDWF  21,F
022B:  MOVF   72,W
022C:  ADDWF  20,F
022D:  BTFSS  03.0
022E:  GOTO   24E
022F:  INCF   21,F
0230:  BTFSS  03.2
0231:  GOTO   24E
0232:  INCF   22,F
0233:  BTFSS  03.2
0234:  GOTO   24E
0235:  INCF   23,F
0236:  GOTO   24E
0237:  MOVF   70,W
0238:  IORLW  80
0239:  SUBWF  22,F
023A:  BTFSC  03.0
023B:  GOTO   24D
023C:  MOVLW  01
023D:  SUBWF  23,F
023E:  BTFSC  03.0
023F:  GOTO   24D
0240:  INCF   23,F
0241:  MOVF   70,W
0242:  IORLW  80
0243:  ADDWF  22,F
0244:  MOVF   71,W
0245:  ADDWF  21,F
0246:  BTFSS  03.0
0247:  GOTO   22B
0248:  INCF   22,F
0249:  BTFSS  03.2
024A:  GOTO   22B
024B:  INCF   23,F
024C:  GOTO   22B
024D:  BSF    7A.0
024E:  DECFSZ 24,F
024F:  GOTO   251
0250:  GOTO   25C
0251:  BCF    03.0
0252:  RLF    20,F
0253:  RLF    21,F
0254:  RLF    22,F
0255:  RLF    23,F
0256:  BCF    03.0
0257:  RLF    7A,F
0258:  RLF    79,F
0259:  RLF    78,F
025A:  RLF    25,F
025B:  GOTO   208
025C:  BTFSS  25.0
025D:  GOTO   264
025E:  BCF    03.0
025F:  RRF    78,F
0260:  RRF    79,F
0261:  RRF    7A,F
0262:  RRF    25,F
0263:  GOTO   268
0264:  DECFSZ 77,F
0265:  GOTO   268
0266:  BCF    03.5
0267:  GOTO   2AF
0268:  BTFSC  25.7
0269:  GOTO   291
026A:  BCF    03.0
026B:  RLF    20,F
026C:  RLF    21,F
026D:  RLF    22,F
026E:  RLF    23,F
026F:  MOVF   72,W
0270:  SUBWF  20,F
0271:  BTFSC  03.0
0272:  GOTO   27D
0273:  MOVLW  01
0274:  SUBWF  21,F
0275:  BTFSC  03.0
0276:  GOTO   27D
0277:  SUBWF  22,F
0278:  BTFSC  03.0
0279:  GOTO   27D
027A:  SUBWF  23,F
027B:  BTFSS  03.0
027C:  GOTO   2A2
027D:  MOVF   71,W
027E:  SUBWF  21,F
027F:  BTFSC  03.0
0280:  GOTO   288
0281:  MOVLW  01
0282:  SUBWF  22,F
0283:  BTFSC  03.0
0284:  GOTO   288
0285:  SUBWF  23,F
0286:  BTFSS  03.0
0287:  GOTO   2A2
0288:  MOVF   70,W
0289:  IORLW  80
028A:  SUBWF  22,F
028B:  BTFSC  03.0
028C:  GOTO   291
028D:  MOVLW  01
028E:  SUBWF  23,F
028F:  BTFSS  03.0
0290:  GOTO   2A2
0291:  INCF   7A,F
0292:  BTFSS  03.2
0293:  GOTO   2A2
0294:  INCF   79,F
0295:  BTFSS  03.2
0296:  GOTO   2A2
0297:  INCF   78,F
0298:  BTFSS  03.2
0299:  GOTO   2A2
029A:  INCF   77,F
029B:  BTFSS  03.2
029C:  GOTO   29F
029D:  BCF    03.5
029E:  GOTO   2AF
029F:  RRF    78,F
02A0:  RRF    79,F
02A1:  RRF    7A,F
02A2:  BCF    03.5
02A3:  MOVF   6C,W
02A4:  BSF    03.5
02A5:  MOVWF  24
02A6:  MOVF   70,W
02A7:  XORWF  24,F
02A8:  BTFSS  24.7
02A9:  GOTO   2AC
02AA:  BSF    78.7
02AB:  GOTO   2B4
02AC:  BCF    78.7
02AD:  GOTO   2B4
02AE:  BCF    03.5
02AF:  CLRF   77
02B0:  CLRF   78
02B1:  CLRF   79
02B2:  CLRF   7A
02B3:  BSF    03.5
02B4:  BCF    03.5
02B5:  RETURN
02B6:  BSF    03.5
02B7:  MOVF   28,W
02B8:  MOVWF  2F
02B9:  MOVF   2C,W
02BA:  XORWF  2F,F
02BB:  BTFSS  2F.7
02BC:  GOTO   2C2
02BD:  BCF    03.2
02BE:  BCF    03.0
02BF:  BTFSC  28.7
02C0:  BSF    03.0
02C1:  GOTO   2F5
02C2:  MOVF   28,W
02C3:  MOVWF  2F
02C4:  MOVF   2B,W
02C5:  MOVWF  30
02C6:  MOVF   27,W
02C7:  SUBWF  30,F
02C8:  BTFSC  03.2
02C9:  GOTO   2D0
02CA:  BTFSS  2F.7
02CB:  GOTO   2F5
02CC:  MOVF   03,W
02CD:  XORLW  01
02CE:  MOVWF  03
02CF:  GOTO   2F5
02D0:  MOVF   2C,W
02D1:  MOVWF  30
02D2:  MOVF   28,W
02D3:  SUBWF  30,F
02D4:  BTFSC  03.2
02D5:  GOTO   2DC
02D6:  BTFSS  2F.7
02D7:  GOTO   2F5
02D8:  MOVF   03,W
02D9:  XORLW  01
02DA:  MOVWF  03
02DB:  GOTO   2F5
02DC:  MOVF   2D,W
02DD:  MOVWF  30
02DE:  MOVF   29,W
02DF:  SUBWF  30,F
02E0:  BTFSC  03.2
02E1:  GOTO   2E8
02E2:  BTFSS  2F.7
02E3:  GOTO   2F5
02E4:  MOVF   03,W
02E5:  XORLW  01
02E6:  MOVWF  03
02E7:  GOTO   2F5
02E8:  MOVF   2E,W
02E9:  MOVWF  30
02EA:  MOVF   2A,W
02EB:  SUBWF  30,F
02EC:  BTFSC  03.2
02ED:  GOTO   2F4
02EE:  BTFSS  2F.7
02EF:  GOTO   2F5
02F0:  MOVF   03,W
02F1:  XORLW  01
02F2:  MOVWF  03
02F3:  GOTO   2F5
02F4:  BCF    03.0
02F5:  BCF    03.5
02F6:  RETURN
02F7:  MOVLW  8E
02F8:  MOVWF  77
02F9:  BSF    03.5
02FA:  MOVF   27,W
02FB:  SUBWF  77,F
02FC:  MOVF   28,W
02FD:  MOVWF  79
02FE:  MOVF   29,W
02FF:  MOVWF  78
0300:  BSF    79.7
0301:  MOVF   77,F
0302:  BTFSC  03.2
0303:  GOTO   30F
0304:  BCF    03.0
0305:  MOVF   79,F
0306:  BTFSS  03.2
0307:  GOTO   30B
0308:  MOVF   78,F
0309:  BTFSC  03.2
030A:  GOTO   30F
030B:  RRF    79,F
030C:  RRF    78,F
030D:  DECFSZ 77,F
030E:  GOTO   304
030F:  BTFSS  28.7
0310:  GOTO   316
0311:  COMF   78,F
0312:  COMF   79,F
0313:  INCF   78,F
0314:  BTFSC  03.2
0315:  INCF   79,F
0316:  BCF    03.5
0317:  RETURN
0318:  MOVLW  8E
0319:  MOVWF  77
031A:  BSF    03.5
031B:  MOVF   2C,W
031C:  MOVWF  78
031D:  MOVF   2B,W
031E:  MOVWF  79
031F:  CLRF   7A
0320:  MOVF   78,F
0321:  BTFSS  03.2
0322:  GOTO   32D
0323:  MOVF   79,W
0324:  MOVWF  78
0325:  CLRF   79
0326:  MOVLW  08
0327:  SUBWF  77,F
0328:  MOVF   78,F
0329:  BTFSS  03.2
032A:  GOTO   32D
032B:  CLRF   77
032C:  GOTO   335
032D:  BCF    03.0
032E:  BTFSC  78.7
032F:  GOTO   334
0330:  RLF    79,F
0331:  RLF    78,F
0332:  DECF   77,F
0333:  GOTO   32D
0334:  BCF    78.7
0335:  BCF    03.5
0336:  RETURN
0337:  BSF    03.5
0338:  MOVF   27,W
0339:  BTFSC  03.2
033A:  GOTO   3A8
033B:  MOVWF  2F
033C:  MOVF   2B,W
033D:  BTFSC  03.2
033E:  GOTO   3A8
033F:  ADDWF  2F,F
0340:  BTFSC  03.0
0341:  GOTO   349
0342:  MOVLW  7F
0343:  SUBWF  2F,F
0344:  BTFSS  03.0
0345:  GOTO   3A8
0346:  BTFSC  03.2
0347:  GOTO   3A8
0348:  GOTO   34D
0349:  MOVLW  81
034A:  ADDWF  2F,F
034B:  BTFSC  03.0
034C:  GOTO   3A8
034D:  MOVF   2F,W
034E:  MOVWF  77
034F:  CLRF   78
0350:  CLRF   79
0351:  CLRF   7A
0352:  MOVF   28,W
0353:  MOVWF  33
0354:  BSF    33.7
0355:  MOVF   29,W
0356:  MOVWF  32
0357:  MOVF   2A,W
0358:  MOVWF  31
0359:  MOVLW  18
035A:  MOVWF  2F
035B:  CLRF   30
035C:  BTFSS  31.0
035D:  GOTO   376
035E:  MOVF   2E,W
035F:  ADDWF  7A,F
0360:  BTFSS  03.0
0361:  GOTO   368
0362:  INCF   79,F
0363:  BTFSS  03.2
0364:  GOTO   368
0365:  INCF   78,F
0366:  BTFSC  03.2
0367:  BSF    30.7
0368:  MOVF   2D,W
0369:  ADDWF  79,F
036A:  BTFSS  03.0
036B:  GOTO   36F
036C:  INCF   78,F
036D:  BTFSC  03.2
036E:  BSF    30.7
036F:  MOVF   2C,W
0370:  MOVWF  29
0371:  BSF    29.7
0372:  MOVF   29,W
0373:  ADDWF  78,F
0374:  BTFSC  03.0
0375:  BSF    30.7
0376:  RLF    30,F
0377:  RRF    78,F
0378:  RRF    79,F
0379:  RRF    7A,F
037A:  RRF    33,F
037B:  RRF    32,F
037C:  RRF    31,F
037D:  BCF    03.0
037E:  DECFSZ 2F,F
037F:  GOTO   35B
0380:  MOVLW  01
0381:  ADDWF  77,F
0382:  BTFSC  03.0
0383:  GOTO   3A8
0384:  BTFSC  78.7
0385:  GOTO   38D
0386:  RLF    33,F
0387:  RLF    7A,F
0388:  RLF    79,F
0389:  RLF    78,F
038A:  DECF   77,F
038B:  BTFSC  03.2
038C:  GOTO   3A8
038D:  BTFSS  33.7
038E:  GOTO   39E
038F:  INCF   7A,F
0390:  BTFSS  03.2
0391:  GOTO   39E
0392:  INCF   79,F
0393:  BTFSS  03.2
0394:  GOTO   39E
0395:  INCF   78,F
0396:  BTFSS  03.2
0397:  GOTO   39E
0398:  RRF    78,F
0399:  RRF    79,F
039A:  RRF    7A,F
039B:  INCF   77,F
039C:  BTFSC  03.2
039D:  GOTO   3A8
039E:  MOVF   28,W
039F:  MOVWF  30
03A0:  MOVF   2C,W
03A1:  XORWF  30,F
03A2:  BTFSS  30.7
03A3:  GOTO   3A6
03A4:  BSF    78.7
03A5:  GOTO   3AC
03A6:  BCF    78.7
03A7:  GOTO   3AC
03A8:  CLRF   77
03A9:  CLRF   78
03AA:  CLRF   79
03AB:  CLRF   7A
03AC:  BCF    03.5
03AD:  RETURN
*
0559:  MOVF   67,W
055A:  SUBLW  B6
055B:  MOVWF  67
055C:  CLRF   7A
055D:  MOVF   68,W
055E:  MOVWF  6B
055F:  BSF    68.7
0560:  BCF    03.0
0561:  RRF    68,F
0562:  RRF    69,F
0563:  RRF    6A,F
0564:  RRF    7A,F
0565:  RRF    79,F
0566:  RRF    78,F
0567:  RRF    77,F
0568:  DECFSZ 67,F
0569:  GOTO   560
056A:  BTFSS  6B.7
056B:  GOTO   577
056C:  COMF   77,F
056D:  COMF   78,F
056E:  COMF   79,F
056F:  COMF   7A,F
0570:  INCF   77,F
0571:  BTFSC  03.2
0572:  INCF   78,F
0573:  BTFSC  03.2
0574:  INCF   79,F
0575:  BTFSC  03.2
0576:  INCF   7A,F
0577:  RETURN
....................  
.................... #list 
....................  
.................... #include <def_16f877a.h> 
.................... //========================= Register Definitions ========================== 
.................... //-----Register Files------------------------------------------------------ 
.................... #byte INDF = 0x00 
.................... #byte TMR0 = 0x01 
.................... #byte PCL = 0x02 
.................... #byte STATUS = 0x03 
.................... #byte FSR = 0x04 
.................... #byte PORTA = 0x05 
.................... #byte PORTB = 0x06 
.................... #byte PORTC = 0x07 
.................... #byte PORTD = 0x08 
.................... #byte PORTE = 0x09 
.................... #byte PCLATH = 0x0A 
.................... #byte INTCON = 0x0B 
.................... #byte PIR1 = 0x0C 
.................... #byte PIR2 = 0x0D 
.................... #byte TMR1L = 0x0E 
.................... #byte TMR1H = 0x0F 
.................... #byte T1CON = 0x10 
.................... #byte TMR2 = 0x11 
.................... #byte T2CON = 0x12 
.................... #byte SSPBUF = 0x13 
.................... #byte SSPCON = 0x14 
.................... #byte CCPR1L = 0x15 
.................... #byte CCPR1H = 0x16 
.................... #byte CCP1CON = 0x17 
.................... #byte RCSTA = 0x18 
.................... #byte TXREG = 0x19 
.................... #byte RCREG = 0x1A 
.................... #byte CCPR2L = 0x1B 
.................... #byte CCPR2H = 0x1C 
.................... #byte CCP2CON = 0x1D 
.................... #byte ADRESH = 0x1E 
.................... #byte ADCON0 = 0x1F 
.................... #byte OPTION_REG = 0x81 
.................... //-------------- TRIS PORT ----------------------------- 
.................... #byte TRISA = 0x85 
.................... #byte TRISB = 0x86 
.................... #byte TRISC = 0x87 
.................... #byte TRISD = 0x88 
.................... #byte TRISE = 0x89 
.................... #byte PIE1 = 0x8C 
.................... #byte PIE2 = 0x8D 
.................... #byte PCON = 0x8E 
....................  
.................... #byte SSPCON2 = 0x91 
.................... #byte PR2 = 0x92 
.................... #byte SSPADD = 0x93 
.................... #byte SSPSTAT = 0x94 
....................  
.................... #byte TXSTA = 0x98 
.................... #byte SPBRG = 0x99 
....................  
.................... #byte ADRESL = 0x9E 
.................... #byte ADCON1 = 0x9F 
....................  
.................... /*	bank 2 registers */ 
....................  
.................... #byte EEDATA = 0x010C 
.................... #byte EEADR = 0x010D 
.................... #byte EEDATH = 0x010E 
.................... #byte EEADRH = 0x010F 
....................  
.................... /*	bank 3 registers */ 
....................  
.................... #byte EECON1 = 0x018C 
.................... #byte EECON2 = 0x018D 
....................  
.................... //----- STATUS Bits -------------------------------------------------------- 
....................  
.................... // For Assembly Language - Note upper case 
.................... #define IRP 7 
.................... #define RP1 6 
.................... #define RP0 5 
.................... #define NOT_TO 4 
.................... #define NOT_PD 3 
.................... #define Z 2 
.................... #define DC 1 
.................... #define C 0 
....................  
.................... //---------------- TRIS BIT PORT-------------------------------------- 
.................... //------------------TRISA bits--------------------------- 
....................  
.................... #bit TRISA5 = 0x85.5 
.................... #bit TRISA4 = 0x85.4 
.................... #bit TRISA3 = 0x85.3 
.................... #bit TRISA2 = 0x85.2 
.................... #bit TRISA1 = 0x85.1 
.................... #bit TRISA0 = 0x85.0 
....................  
.................... //-----------------TRISB bits----------------------------- 
....................  
.................... #bit TRISB7 = 0x86.7 
.................... #bit TRISB6 = 0x86.6 
.................... #bit TRISB5 = 0x86.5 
.................... #bit TRISB4 = 0x86.4 
.................... #bit TRISB3 = 0x86.3 
.................... #bit TRISB2 = 0x86.2 
.................... #bit TRISB1 = 0x86.1 
.................... #bit TRISB0 = 0x86.0 
....................  
.................... //----------------TRISC bits------------------- 
....................  
.................... #bit TRISC7 = 0x87.7 
.................... #bit TRISC6 = 0x87.6 
.................... #bit TRISC5 = 0x87.5 
.................... #bit TRISC4 = 0x87.4 
.................... #bit TRISC3 = 0x87.3 
.................... #bit TRISC2 = 0x87.2 
.................... #bit TRISC1 = 0x87.1 
.................... #bit TRISC0 = 0x87.0 
.................... //------------------TRISD bit------------------ 
.................... #bit TRISD7 = 0x88.7 
.................... #bit TRISD6 = 0x88.6 
.................... #bit TRISD5 = 0x88.5 
.................... #bit TRISD4 = 0x88.4 
.................... #bit TRISD3 = 0x88.3 
.................... #bit TRISD2 = 0x88.2 
.................... #bit TRISD1 = 0x88.1 
.................... #bit TRISD0 = 0x88.0 
.................... //-------------TRISE bit---------------------- 
.................... #bit TRISE2 = 0x89.2 
.................... #bit TRISE1 = 0x89.1 
.................... #bit TRISE0 = 0x89.0 
.................... //--------------------------------------------------------------------------- 
.................... //---------PORTA bits------------------ 
.................... #bit RA4 = 0x05.4 
.................... #bit RA3 = 0x05.3 
.................... #bit RA2 = 0x05.2 
.................... #bit RA1 = 0x05.1 
.................... #bit RA0 = 0x05.0 
.................... //---------PORTB bits------------------ 
.................... #bit RB7 = 0x06.7 
.................... #bit RB6 = 0x06.6 
.................... #bit RB5 = 0x06.5 
.................... #bit RB4 = 0x06.4 
.................... #bit RB3 = 0x06.3 
.................... #bit RB2 = 0x06.2 
.................... #bit RB1 = 0x06.1 
.................... #bit RB0 = 0x06.0 
.................... //---------PORTC bits------------------ 
.................... #bit RC7 = 0x07.7 
.................... #bit RC6 = 0x07.6 
.................... #bit RC5 = 0x07.5 
.................... #bit RC4 = 0x07.4 
.................... #bit RC3 = 0x07.3 
.................... #bit RC2 = 0x07.2 
.................... #bit RC1 = 0x07.1 
.................... #bit RC0 = 0x07.0 
.................... //---------PORTD bits------------------ 
.................... #bit RD7 = 0x08.7 
.................... #bit RD6 = 0x08.6 
.................... #bit RD5 = 0x08.5 
.................... #bit RD4 = 0x08.4 
.................... #bit RD3 = 0x08.3 
.................... #bit RD2 = 0x08.2 
.................... #bit RD1 = 0x08.1 
.................... #bit RD0 = 0x08.0 
.................... //---------PORTE bits------------------ 
.................... #bit RE2 = 0x09.2 
.................... #bit RE1 = 0x09.1 
.................... #bit RE0 = 0x09.0 
....................  
.................... //----- INTCON ------------------------------------------------------------- 
....................  
.................... #bit GIE = 0x0b.7 
.................... #bit PEIE = 0x0b.6 
.................... #bit TMR0IE = 0x0b.5 
.................... #bit INTE = 0x0b.4 
.................... #bit RBIE = 0x0b.3 
.................... #bit TMR0IF = 0x0b.2 
.................... #bit INTF = 0x0b.1 
.................... #bit RBIF = 0x0b.0 
....................  
.................... //----- PIR1 --------------------------------------------------------------- 
....................  
.................... #bit pspif = 0x0c.7 
.................... #bit adif = 0x0c.6 
.................... #bit rcif = 0x0c.5 
.................... #bit txif = 0x0c.4 
.................... #bit sspif = 0x0c.3 
.................... #bit ccp1if = 0x0c.2 
.................... #bit tmr2if = 0x0c.1 
.................... #bit tmr1if = 0x0c.0 
....................  
.................... //----- PIR2 --------------------------------------------------------------- 
....................  
.................... #bit cmif = 0x0d.6 
.................... #bit eeif = 0x0d.4 
.................... #bit bclif = 0x0d.3 
.................... #bit ccp2if = 0x0d.0 
....................  
.................... //----- PIE1 --------------------------------------------------------------- 
....................  
.................... #bit pspie = 0x8c.7 
.................... #bit adie = 0x8c.6 
.................... #bit rcie = 0x8c.5 
.................... #bit txie = 0x8c.4 
.................... #bit sspie = 0x8c.3 
.................... #bit ccp1ie = 0x8c.2 
.................... #bit tmr2ie = 0x8c.1 
.................... #bit tmr1ie = 0x8c.0 
....................  
.................... //----- PIE2 --------------------------------------------------------------- 
....................  
.................... #bit cmie = 0x8d.6 
.................... #bit eeie = 0x8d.4 
.................... #bit bclie = 0x8d.3 
.................... #bit ccp2ie = 0x8d.0 
.................... //----- T1CON Bits --------------------------------------------------------- 
.................... #bit T1CKPS1 = 0x10.5 
.................... #bit T1CKPS0 = 0x10.4 
.................... #bit T1OSCEN = 0x10.3 
.................... #bit T1SYNC = 0x10.2 
.................... #bit TMR1CS = 0x10.1 
.................... #bit TMR1ON = 0x10.0 
....................  
.................... //----- T2CON Bits --------------------------------------------------------- 
.................... #bit TOUTPS3 = 0x12.6 
.................... #bit TOUTPS2 = 0x12.5 
.................... #bit TOUTPS1 = 0x12.4 
.................... #bit TOUTPS0 = 0x12.3 
.................... #bit TMR2ON = 0x12.2 
.................... #bit T2CKPS1 = 0x12.1 
.................... #bit T2CKPS0 = 0x12.0 
....................  
.................... //-------------SSPCON bits-------------------------- 
.................... #bit WCOL = 0x14.7 
.................... #bit SSPOV = 0x14.6 
.................... #bit SSPEN = 0x14.5 
.................... #bit CKP = 0x14.4 
.................... #bit SSPM3 = 0x14.3 
.................... #bit SSPM2 = 0x14.2 
.................... #bit SSPM1 = 0x14.1 
.................... #bit SSPM0 = 0x14.0 
....................  
.................... //---------------CCP1CON bits-------- 
.................... #bit CCP1X = 0x17.5 
.................... #bit CCP1Y = 0x17.4 
.................... #bit CCP1M3 = 0x17.3 
.................... #bit CCP1M2 = 0x17.2 
.................... #bit CCP1M1 = 0x17.1 
.................... #bit CCP1M0 = 0x17.0 
....................  
.................... //---------------RCSTA bits------------------- 
....................  
.................... #bit SPEN = 0x18.7 
.................... #bit RX9 = 0x18.6 
.................... #bit SREN = 0x18.5 
.................... #bit CREN = 0x18.4 
.................... #bit ADDEN = 0x18.3 
.................... #bit FERR = 0x18.2 
.................... #bit OERR = 0x18.1 
.................... #bit RX9D = 0x18.0 
....................  
.................... //-----------------------CCP2CON bits---------- 
....................  
.................... #bit CCP2X = 0x1D.5 
.................... #bit CCP2Y = 0x1D.4 
.................... #bit CCP2M3 = 0x1D.3 
.................... #bit CCP2M2 = 0x1D.2 
.................... #bit CCP2M1 = 0x1D.1 
.................... #bit CCP2M0 = 0x1D.0 
....................  
.................... //----- ADCON0 Bits -------------------------------------------------------- 
.................... #bit ADCS1 = 0x1F.7 
.................... #bit ADCS0 = 0x1F.6 
.................... #bit CHS2 = 0x1F.5 
.................... #bit CHS1 = 0x1F.4 
.................... #bit CHS0 = 0x1F.3 
.................... #bit ADGO = 0x1F.2 
.................... #bit ADON = 0x1F.0 
....................  
.................... //----- OPTION_reg Bits -------------------------------------------------------- 
....................  
.................... #bit RBPU = 0x81.7 
.................... #bit INTEDG = 0x81.6 
.................... #bit T0CS = 0x81.5 
.................... #bit T0SE = 0x81.4 
.................... #bit PSA = 0x81.3 
.................... #bit PS2 = 0x81.2 
.................... #bit PS1 = 0x81.1 
.................... #bit PS0 = 0x81.0 
.................... //----- PCON Bits ---------------------------------------------------------- 
....................  
.................... #bit POR = 0x8E.1 
.................... #bit BOD = 0x8E.0 
....................  
.................... //-----------SSPCON2 bits--------------------------------------------- 
....................  
.................... #bit GCEN = 0x91.7 
.................... #bit ACKSTAT = 0x91.6 
.................... #bit ACKDT = 0x91.5 
.................... #bit ACKEN = 0x91.4 
.................... #bit RCEN = 0x91.3 
.................... #bit PEN = 0x91.2 
.................... #bit RSEN = 0x91.1 
.................... #bit SEN = 0x91.0 
....................  
.................... //---------------------SSPSTAT bits------------------------ 
....................  
.................... #bit STAT_SMP = 0x94.7 
.................... #bit STAT_CKE = 0x94.6 
.................... #bit STAT_DA = 0x94.5 
.................... #bit STAT_P = 0x94.4 
.................... #bit STAT_S = 0x94.3 
.................... #bit STAT_RW = 0x94.2 
.................... #bit STAT_UA = 0x94.1 
.................... #bit STAT_BF = 0x94.0 
....................  
.................... //----------------TXSTA bits----------------- 
....................  
.................... #bit CSRC = 0x98.7 
.................... #bit TX9 = 0x98.6 
.................... #bit TXEN = 0x98.5 
.................... #bit SYNC = 0x98.4 
.................... #bit BRGH = 0x98.2 
.................... #bit TRMT = 0x98.1 
.................... #bit TX9D = 0x98.0 
....................  
.................... //--------------ADCON1 bits--------------- 
....................  
.................... #bit ADFM = 0x9F.7 
.................... #bit ADCS2 = 0x9F.6 
.................... #bit PCFG3 = 0x9F.3 
.................... #bit PCFG2 = 0x9F.2 
.................... #bit PCFG1 = 0x9F.1 
.................... #bit PCFG0 = 0x9F.0 
....................  
.................... //-----------EECON1 bits---------- 
....................  
.................... #bit EEPGD = 0x018C.7 
.................... #bit WRERR = 0x018C.3 
.................... #bit WREN = 0x018C.2 
.................... #bit WR = 0x018C.1 
.................... #bit RD = 0x018C.0 
....................  
....................  
.................... #device ADC = 16, WRITE_EEPROM = ASYNC 
....................  
.................... #FUSES NOWDT      //No Watch Dog Timer 
.................... #FUSES NOBROWNOUT //No brownout reset 
.................... #FUSES NOLVP      //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal = 20000000) 
*
07BF:  MOVLW  49
07C0:  MOVWF  04
07C1:  BCF    03.7
07C2:  MOVF   00,W
07C3:  BTFSC  03.2
07C4:  GOTO   7D2
07C5:  MOVLW  06
07C6:  MOVWF  78
07C7:  CLRF   77
07C8:  DECFSZ 77,F
07C9:  GOTO   7C8
07CA:  DECFSZ 78,F
07CB:  GOTO   7C7
07CC:  MOVLW  7B
07CD:  MOVWF  77
07CE:  DECFSZ 77,F
07CF:  GOTO   7CE
07D0:  DECFSZ 00,F
07D1:  GOTO   7C5
07D2:  RETURN
....................  
.................... //================================================== PREPROSECSOR ================================================== 
....................  
.................... // 1 >> on 
.................... #define triac1Out PIN_D0 
.................... #define triac2Out PIN_D1 
.................... #define relayOut PIN_C0 
.................... // 0 >> pressed 
.................... #define btnINCREASE PIN_B4 
.................... #define btnDECREASE PIN_B1 
....................  
.................... #define dipSw0 PIN_B2 
.................... #define dipSw1 PIN_B3 
.................... #define dipSw2 PIN_B4 
.................... // 1 >> led on 
.................... #define ledSAFETY PIN_D2 
.................... #define ledSTARTING PIN_D3 
.................... #define ledRINGING PIN_C5 
.................... #define ledBUTTON PIN_D4 
....................  
.................... #byte CMCON = 0x9C 
....................  
.................... #include "floor.c" 
.................... float32 FLOOR(float32 x) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
*
03AE:  BSF    03.5
03AF:  BCF    26.0
....................    y = x; 
03B0:  MOVF   76,W
03B1:  MOVWF  7E
03B2:  MOVF   75,W
03B3:  MOVWF  7D
03B4:  MOVF   74,W
03B5:  MOVWF  7C
03B6:  MOVF   73,W
03B7:  MOVWF  7B
....................  
....................    if (x < 0) 
03B8:  MOVF   76,W
03B9:  MOVWF  2A
03BA:  MOVF   75,W
03BB:  MOVWF  29
03BC:  MOVF   74,W
03BD:  MOVWF  28
03BE:  MOVF   73,W
03BF:  MOVWF  27
03C0:  CLRF   2E
03C1:  CLRF   2D
03C2:  CLRF   2C
03C3:  CLRF   2B
03C4:  BCF    03.5
03C5:  CALL   2B6
03C6:  BTFSS  03.0
03C7:  GOTO   3CE
....................    { 
....................       s = 1; 
03C8:  BSF    03.5
03C9:  BSF    26.0
....................       y = -y; 
03CA:  MOVF   7C,W
03CB:  XORLW  80
03CC:  MOVWF  7C
03CD:  BCF    03.5
....................    } 
....................  
....................    if (y <= 32768.0) 
03CE:  MOVF   7E,W
03CF:  BSF    03.5
03D0:  MOVWF  2A
03D1:  MOVF   7D,W
03D2:  MOVWF  29
03D3:  MOVF   7C,W
03D4:  MOVWF  28
03D5:  MOVF   7B,W
03D6:  MOVWF  27
03D7:  CLRF   2E
03D8:  CLRF   2D
03D9:  CLRF   2C
03DA:  MOVLW  8E
03DB:  MOVWF  2B
03DC:  BCF    03.5
03DD:  CALL   2B6
03DE:  BTFSC  03.0
03DF:  GOTO   3E2
03E0:  BTFSS  03.2
03E1:  GOTO   3FF
....................       res = (float32)(unsigned int16)y; 
03E2:  MOVF   7E,W
03E3:  BSF    03.5
03E4:  MOVWF  2A
03E5:  MOVF   7D,W
03E6:  MOVWF  29
03E7:  MOVF   7C,W
03E8:  MOVWF  28
03E9:  MOVF   7B,W
03EA:  MOVWF  27
03EB:  BCF    03.5
03EC:  CALL   2F7
03ED:  MOVF   79,W
03EE:  BSF    03.5
03EF:  MOVWF  2C
03F0:  MOVF   78,W
03F1:  MOVWF  2B
03F2:  BCF    03.5
03F3:  CALL   318
03F4:  MOVF   7A,W
03F5:  BSF    03.5
03F6:  MOVWF  23
03F7:  MOVF   79,W
03F8:  MOVWF  22
03F9:  MOVF   78,W
03FA:  MOVWF  21
03FB:  MOVF   77,W
03FC:  MOVWF  20
03FD:  GOTO   4D7
03FE:  BCF    03.5
....................  
....................    else if (y < 10000000.0) 
03FF:  MOVF   7E,W
0400:  BSF    03.5
0401:  MOVWF  2A
0402:  MOVF   7D,W
0403:  MOVWF  29
0404:  MOVF   7C,W
0405:  MOVWF  28
0406:  MOVF   7B,W
0407:  MOVWF  27
0408:  MOVLW  80
0409:  MOVWF  2E
040A:  MOVLW  96
040B:  MOVWF  2D
040C:  MOVLW  18
040D:  MOVWF  2C
040E:  MOVLW  96
040F:  MOVWF  2B
0410:  BCF    03.5
0411:  CALL   2B6
0412:  BTFSS  03.0
0413:  GOTO   4CE
....................    { 
....................       l = (unsigned int16)(y * 0.000030517578125); 
0414:  MOVF   7E,W
0415:  BSF    03.5
0416:  MOVWF  2A
0417:  MOVF   7D,W
0418:  MOVWF  29
0419:  MOVF   7C,W
041A:  MOVWF  28
041B:  MOVF   7B,W
041C:  MOVWF  27
041D:  CLRF   2E
041E:  CLRF   2D
041F:  CLRF   2C
0420:  MOVLW  70
0421:  MOVWF  2B
0422:  BCF    03.5
0423:  CALL   337
0424:  MOVF   7A,W
0425:  BSF    03.5
0426:  MOVWF  2A
0427:  MOVF   79,W
0428:  MOVWF  29
0429:  MOVF   78,W
042A:  MOVWF  28
042B:  MOVF   77,W
042C:  MOVWF  27
042D:  BCF    03.5
042E:  CALL   2F7
042F:  MOVF   79,W
0430:  BSF    03.5
0431:  MOVWF  25
0432:  MOVF   78,W
0433:  MOVWF  24
....................       y = 32768.0 * (y * 0.000030517578125 - (float32)l); 
0434:  MOVF   7E,W
0435:  MOVWF  2A
0436:  MOVF   7D,W
0437:  MOVWF  29
0438:  MOVF   7C,W
0439:  MOVWF  28
043A:  MOVF   7B,W
043B:  MOVWF  27
043C:  CLRF   2E
043D:  CLRF   2D
043E:  CLRF   2C
043F:  MOVLW  70
0440:  MOVWF  2B
0441:  BCF    03.5
0442:  CALL   337
0443:  MOVF   7A,W
0444:  BSF    03.5
0445:  MOVWF  2A
0446:  MOVF   79,W
0447:  MOVWF  29
0448:  MOVF   78,W
0449:  MOVWF  28
044A:  MOVF   77,W
044B:  MOVWF  27
044C:  MOVF   25,W
044D:  MOVWF  2C
044E:  MOVF   24,W
044F:  MOVWF  2B
0450:  BCF    03.5
0451:  CALL   318
0452:  BSF    03.1
0453:  BSF    03.5
0454:  MOVF   2A,W
0455:  MOVWF  2E
0456:  MOVF   29,W
0457:  MOVWF  2D
0458:  MOVF   28,W
0459:  MOVWF  2C
045A:  MOVF   27,W
045B:  MOVWF  2B
045C:  MOVF   7A,W
045D:  MOVWF  32
045E:  MOVF   79,W
045F:  MOVWF  31
0460:  MOVF   78,W
0461:  MOVWF  30
0462:  MOVF   77,W
0463:  MOVWF  2F
0464:  BCF    03.5
0465:  CALL   08F
0466:  BSF    03.5
0467:  CLRF   2A
0468:  CLRF   29
0469:  CLRF   28
046A:  MOVLW  8E
046B:  MOVWF  27
046C:  MOVF   7A,W
046D:  MOVWF  2E
046E:  MOVF   79,W
046F:  MOVWF  2D
0470:  MOVF   78,W
0471:  MOVWF  2C
0472:  MOVF   77,W
0473:  MOVWF  2B
0474:  BCF    03.5
0475:  CALL   337
0476:  MOVF   7A,W
0477:  MOVWF  7E
0478:  MOVF   79,W
0479:  MOVWF  7D
047A:  MOVF   78,W
047B:  MOVWF  7C
047C:  MOVF   77,W
047D:  MOVWF  7B
....................       res = 32768.0 * (float32)l; 
047E:  BSF    03.5
047F:  MOVF   25,W
0480:  MOVWF  2C
0481:  MOVF   24,W
0482:  MOVWF  2B
0483:  BCF    03.5
0484:  CALL   318
0485:  BSF    03.5
0486:  CLRF   2A
0487:  CLRF   29
0488:  CLRF   28
0489:  MOVLW  8E
048A:  MOVWF  27
048B:  MOVF   7A,W
048C:  MOVWF  2E
048D:  MOVF   79,W
048E:  MOVWF  2D
048F:  MOVF   78,W
0490:  MOVWF  2C
0491:  MOVF   77,W
0492:  MOVWF  2B
0493:  BCF    03.5
0494:  CALL   337
0495:  MOVF   7A,W
0496:  BSF    03.5
0497:  MOVWF  23
0498:  MOVF   79,W
0499:  MOVWF  22
049A:  MOVF   78,W
049B:  MOVWF  21
049C:  MOVF   77,W
049D:  MOVWF  20
....................       res += (float32)(unsigned int16)y; 
049E:  MOVF   7E,W
049F:  MOVWF  2A
04A0:  MOVF   7D,W
04A1:  MOVWF  29
04A2:  MOVF   7C,W
04A3:  MOVWF  28
04A4:  MOVF   7B,W
04A5:  MOVWF  27
04A6:  BCF    03.5
04A7:  CALL   2F7
04A8:  MOVF   79,W
04A9:  BSF    03.5
04AA:  MOVWF  2C
04AB:  MOVF   78,W
04AC:  MOVWF  2B
04AD:  BCF    03.5
04AE:  CALL   318
04AF:  BCF    03.1
04B0:  BSF    03.5
04B1:  MOVF   23,W
04B2:  MOVWF  2E
04B3:  MOVF   22,W
04B4:  MOVWF  2D
04B5:  MOVF   21,W
04B6:  MOVWF  2C
04B7:  MOVF   20,W
04B8:  MOVWF  2B
04B9:  MOVF   7A,W
04BA:  MOVWF  32
04BB:  MOVF   79,W
04BC:  MOVWF  31
04BD:  MOVF   78,W
04BE:  MOVWF  30
04BF:  MOVF   77,W
04C0:  MOVWF  2F
04C1:  BCF    03.5
04C2:  CALL   08F
04C3:  MOVF   7A,W
04C4:  BSF    03.5
04C5:  MOVWF  23
04C6:  MOVF   79,W
04C7:  MOVWF  22
04C8:  MOVF   78,W
04C9:  MOVWF  21
04CA:  MOVF   77,W
04CB:  MOVWF  20
....................    } 
04CC:  GOTO   4D7
04CD:  BCF    03.5
....................  
....................    else 
....................       res = y; 
04CE:  MOVF   7E,W
04CF:  BSF    03.5
04D0:  MOVWF  23
04D1:  MOVF   7D,W
04D2:  MOVWF  22
04D3:  MOVF   7C,W
04D4:  MOVWF  21
04D5:  MOVF   7B,W
04D6:  MOVWF  20
....................  
....................    y = y - (float32)(unsigned int16)y; 
04D7:  MOVF   7E,W
04D8:  MOVWF  2A
04D9:  MOVF   7D,W
04DA:  MOVWF  29
04DB:  MOVF   7C,W
04DC:  MOVWF  28
04DD:  MOVF   7B,W
04DE:  MOVWF  27
04DF:  BCF    03.5
04E0:  CALL   2F7
04E1:  MOVF   79,W
04E2:  BSF    03.5
04E3:  MOVWF  2C
04E4:  MOVF   78,W
04E5:  MOVWF  2B
04E6:  BCF    03.5
04E7:  CALL   318
04E8:  BSF    03.1
04E9:  MOVF   7E,W
04EA:  BSF    03.5
04EB:  MOVWF  2E
04EC:  MOVF   7D,W
04ED:  MOVWF  2D
04EE:  MOVF   7C,W
04EF:  MOVWF  2C
04F0:  MOVF   7B,W
04F1:  MOVWF  2B
04F2:  MOVF   7A,W
04F3:  MOVWF  32
04F4:  MOVF   79,W
04F5:  MOVWF  31
04F6:  MOVF   78,W
04F7:  MOVWF  30
04F8:  MOVF   77,W
04F9:  MOVWF  2F
04FA:  BCF    03.5
04FB:  CALL   08F
04FC:  MOVF   7A,W
04FD:  MOVWF  7E
04FE:  MOVF   79,W
04FF:  MOVWF  7D
0500:  MOVF   78,W
0501:  MOVWF  7C
0502:  MOVF   77,W
0503:  MOVWF  7B
....................  
....................    if (s) 
0504:  BSF    03.5
0505:  BTFSS  26.0
0506:  GOTO   50A
....................       res = -res; 
0507:  MOVF   21,W
0508:  XORLW  80
0509:  MOVWF  21
....................  
....................    if (y != 0) 
050A:  MOVF   7E,W
050B:  MOVWF  2A
050C:  MOVF   7D,W
050D:  MOVWF  29
050E:  MOVF   7C,W
050F:  MOVWF  28
0510:  MOVF   7B,W
0511:  MOVWF  27
0512:  CLRF   2E
0513:  CLRF   2D
0514:  CLRF   2C
0515:  CLRF   2B
0516:  BCF    03.5
0517:  CALL   2B6
0518:  BTFSC  03.2
0519:  GOTO   537
....................    { 
....................       if (s == 1) 
051A:  BSF    03.5
051B:  BTFSS  26.0
051C:  GOTO   536
....................          res -= 1.0; 
051D:  BSF    03.1
051E:  MOVF   23,W
051F:  MOVWF  2E
0520:  MOVF   22,W
0521:  MOVWF  2D
0522:  MOVF   21,W
0523:  MOVWF  2C
0524:  MOVF   20,W
0525:  MOVWF  2B
0526:  CLRF   32
0527:  CLRF   31
0528:  CLRF   30
0529:  MOVLW  7F
052A:  MOVWF  2F
052B:  BCF    03.5
052C:  CALL   08F
052D:  MOVF   7A,W
052E:  BSF    03.5
052F:  MOVWF  23
0530:  MOVF   79,W
0531:  MOVWF  22
0532:  MOVF   78,W
0533:  MOVWF  21
0534:  MOVF   77,W
0535:  MOVWF  20
0536:  BCF    03.5
....................    } 
....................    if (x == 0) 
0537:  MOVF   76,W
0538:  BSF    03.5
0539:  MOVWF  2A
053A:  MOVF   75,W
053B:  MOVWF  29
053C:  MOVF   74,W
053D:  MOVWF  28
053E:  MOVF   73,W
053F:  MOVWF  27
0540:  CLRF   2E
0541:  CLRF   2D
0542:  CLRF   2C
0543:  CLRF   2B
0544:  BCF    03.5
0545:  CALL   2B6
0546:  BTFSS  03.2
0547:  GOTO   54E
....................       res = 0; 
0548:  BSF    03.5
0549:  CLRF   23
054A:  CLRF   22
054B:  CLRF   21
054C:  CLRF   20
054D:  BCF    03.5
....................  
....................    return (res); 
054E:  BSF    03.5
054F:  MOVF   20,W
0550:  MOVWF  77
0551:  MOVF   21,W
0552:  MOVWF  78
0553:  MOVF   22,W
0554:  MOVWF  79
0555:  MOVF   23,W
0556:  MOVWF  7A
0557:  BCF    03.5
0558:  RETURN
.................... } 
....................  
....................  
.................... //================================================== VARIABLES ================================================== 
....................  
.................... // set angle (10 levels). more angle, weaker motor 
.................... volatile int32 angleStarter = 1; 
.................... volatile int32 angleRingTheBell = 6; 
.................... // volatile int32 angleStarter = read_eeprom(0x00); 
.................... // volatile int32 angleRingTheBell = read_eeprom(0x01); 
....................  
.................... volatile int32 valTimer0SetStarter = (int32)FLOOR((13.1072 - angleStarter) / 0.0512) - 1; 
.................... volatile int32 valTimer0SetRingTheBell = (int32)FLOOR((13.1072 - angleRingTheBell) / 0.0512) - 1; 
....................  
.................... volatile signed int16 count = 0; 
.................... volatile int16 iTimer2OverFlow; 
.................... int1 flagForward = true, flagStarter = true, flagSTOP = true; 
....................  
.................... //================================================== ISR Func() ================================================== 
....................  
.................... // #INT_COMP 
.................... // void isrComparator() 
.................... // { // A mismatch condition will continue to set flag bit CMIF. Reading CMCON will end the mismatch condition and allow flag bit CMIF to be cleared 
.................... //    char charas = CMCON; 
.................... //    output_low(relayOut);   // safety switch 
.................... //    output_high(PIN_RESET); // reset mcu 
.................... // } 
....................  
.................... #INT_EXT 
.................... void ext_isr() 
.................... { 
....................    // cross zero point detector 50Hz >> 1/50/2 sec per half pulse after diode brighet 
....................  
....................    output_low(triac1Out); 
*
0048:  BSF    03.5
0049:  BCF    08.0
004A:  BCF    03.5
004B:  BCF    08.0
....................    output_low(triac2Out); 
004C:  BSF    03.5
004D:  BCF    08.1
004E:  BCF    03.5
004F:  BCF    08.1
....................  
....................    if (flagStarter) 
0050:  BTFSS  3C.1
0051:  GOTO   055
....................       set_timer0(valTimer0SetStarter); 
0052:  MOVF   30,W
0053:  MOVWF  01
0054:  GOTO   057
....................    else 
....................       set_timer0(valTimer0SetRingTheBell); 
0055:  MOVF   34,W
0056:  MOVWF  01
....................  
....................    clear_interrupt(INT_TIMER0); 
0057:  BCF    0B.2
....................    enable_interrupts(INT_TIMER0); 
0058:  BSF    0B.5
....................    clear_interrupt(INT_EXT); // waiting for next EXT 
0059:  BCF    0B.1
.................... } 
....................  
005A:  BCF    0B.1
005B:  BCF    0A.3
005C:  BCF    0A.4
005D:  GOTO   02B
.................... #INT_TIMER0 
.................... void timer0_isr() 
.................... { 
....................    if (flagForward && !flagSTOP) 
005E:  BTFSS  3C.0
005F:  GOTO   067
0060:  BTFSC  3C.2
0061:  GOTO   067
....................       output_high(triac1Out); 
0062:  BSF    03.5
0063:  BCF    08.0
0064:  BCF    03.5
0065:  BSF    08.0
0066:  GOTO   06F
....................    else if (!flagForward && !flagSTOP) 
0067:  BTFSC  3C.0
0068:  GOTO   06F
0069:  BTFSC  3C.2
006A:  GOTO   06F
....................       output_high(triac2Out); 
006B:  BSF    03.5
006C:  BCF    08.1
006D:  BCF    03.5
006E:  BSF    08.1
....................  
....................    // set_timer0(200.00); 
....................    disable_interrupts(INT_TIMER0); 
006F:  BCF    0B.5
.................... } 
....................  
0070:  BCF    0B.2
0071:  BCF    0A.3
0072:  BCF    0A.4
0073:  GOTO   02B
.................... #INT_TIMER2 
.................... void timer2_isr() 
.................... { 
....................    // --iTimer2OverFlow; 
....................    // if (!(--iTimer2OverFlow)) 
....................    // if (!iTimer2OverFlow) 
....................    { 
....................       // reset neu quay qua 4 vong 
....................       if (flagForward) 
*
0578:  BTFSS  3C.0
0579:  GOTO   590
....................       { 
....................          if (count >= 1600) // (+)4 rotate 
057A:  BTFSC  39.7
057B:  GOTO   58F
057C:  MOVF   39,W
057D:  SUBLW  05
057E:  BTFSC  03.0
057F:  GOTO   58F
0580:  XORLW  FF
0581:  BTFSS  03.2
0582:  GOTO   587
0583:  MOVF   38,W
0584:  SUBLW  3F
0585:  BTFSC  03.0
0586:  GOTO   58F
....................          { 
....................             output_low(relayOut); // safety switch 
0587:  BCF    3D.0
0588:  MOVF   3D,W
0589:  BSF    03.5
058A:  MOVWF  07
058B:  BCF    03.5
058C:  BCF    07.0
....................             reset_cpu(); 
058D:  CLRF   0A
058E:  GOTO   000
....................          } 
....................       } 
058F:  GOTO   5A4
....................       else 
....................       { 
....................          if (count <= -1600) // (-)4 rotate 
0590:  BTFSS  39.7
0591:  GOTO   5A4
0592:  MOVF   39,W
0593:  SUBLW  F9
0594:  BTFSS  03.0
0595:  GOTO   5A4
0596:  BTFSS  03.2
0597:  GOTO   59C
0598:  MOVF   38,W
0599:  SUBLW  C0
059A:  BTFSS  03.0
059B:  GOTO   5A4
....................          { 
....................             output_low(relayOut); // safety switch 
059C:  BCF    3D.0
059D:  MOVF   3D,W
059E:  BSF    03.5
059F:  MOVWF  07
05A0:  BCF    03.5
05A1:  BCF    07.0
....................             reset_cpu(); 
05A2:  CLRF   0A
05A3:  GOTO   000
....................          } 
....................       } 
....................  
....................       if (!input(btnDECREASE)) 
05A4:  BSF    03.5
05A5:  BSF    06.1
05A6:  BCF    03.5
05A7:  BTFSC  06.1
05A8:  GOTO   6A9
....................       { 
....................          output_high(ledBUTTON); 
05A9:  BSF    03.5
05AA:  BCF    08.4
05AB:  BCF    03.5
05AC:  BSF    08.4
....................          if (flagStarter) 
05AD:  BTFSS  3C.1
05AE:  GOTO   62A
....................          { 
....................             if (angleStarter < 9) 
05AF:  MOVF   2B,F
05B0:  BTFSS  03.2
05B1:  GOTO   629
05B2:  MOVF   2A,F
05B3:  BTFSS  03.2
05B4:  GOTO   629
05B5:  MOVF   29,F
05B6:  BTFSS  03.2
05B7:  GOTO   629
05B8:  MOVF   28,W
05B9:  SUBLW  08
05BA:  BTFSS  03.0
05BB:  GOTO   629
....................             { 
....................                ++angleStarter; 
05BC:  MOVLW  01
05BD:  ADDWF  28,F
05BE:  BTFSC  03.0
05BF:  INCF   29,F
05C0:  BTFSC  03.2
05C1:  INCF   2A,F
05C2:  BTFSC  03.2
05C3:  INCF   2B,F
....................                // write_eeprom(0x00, ++angleStarter); 
....................                valTimer0SetStarter = (int32)FLOOR((13.1072 - angleStarter) / 0.0512) - 1; 
05C4:  MOVF   2B,W
05C5:  MOVWF  6A
05C6:  MOVF   2A,W
05C7:  MOVWF  69
05C8:  MOVF   29,W
05C9:  MOVWF  68
05CA:  MOVF   28,W
05CB:  MOVWF  67
05CC:  CALL   074
05CD:  BSF    03.1
05CE:  MOVLW  17
05CF:  BSF    03.5
05D0:  MOVWF  2E
05D1:  MOVLW  B7
05D2:  MOVWF  2D
05D3:  MOVLW  51
05D4:  MOVWF  2C
05D5:  MOVLW  82
05D6:  MOVWF  2B
05D7:  MOVF   7A,W
05D8:  MOVWF  32
05D9:  MOVF   79,W
05DA:  MOVWF  31
05DB:  MOVF   78,W
05DC:  MOVWF  30
05DD:  MOVF   77,W
05DE:  MOVWF  2F
05DF:  BCF    03.5
05E0:  CALL   08F
05E1:  MOVF   7A,W
05E2:  MOVWF  6A
05E3:  MOVF   79,W
05E4:  MOVWF  69
05E5:  MOVF   78,W
05E6:  MOVWF  68
05E7:  MOVF   77,W
05E8:  MOVWF  67
05E9:  MOVF   7A,W
05EA:  MOVWF  6E
05EB:  MOVF   79,W
05EC:  MOVWF  6D
05ED:  MOVF   78,W
05EE:  MOVWF  6C
05EF:  MOVF   77,W
05F0:  MOVWF  6B
05F1:  MOVLW  17
05F2:  MOVWF  72
05F3:  MOVLW  B7
05F4:  MOVWF  71
05F5:  MOVLW  51
05F6:  MOVWF  70
05F7:  MOVLW  7A
05F8:  MOVWF  6F
05F9:  CALL   1D5
05FA:  MOVF   7A,W
05FB:  MOVWF  6A
05FC:  MOVF   79,W
05FD:  MOVWF  69
05FE:  MOVF   78,W
05FF:  MOVWF  68
0600:  MOVF   77,W
0601:  MOVWF  67
0602:  MOVF   7A,W
0603:  MOVWF  76
0604:  MOVF   79,W
0605:  MOVWF  75
0606:  MOVF   78,W
0607:  MOVWF  74
0608:  MOVF   77,W
0609:  MOVWF  73
060A:  CALL   3AE
060B:  MOVF   7A,W
060C:  MOVWF  6A
060D:  MOVF   79,W
060E:  MOVWF  69
060F:  MOVF   78,W
0610:  MOVWF  68
0611:  MOVF   77,W
0612:  MOVWF  67
0613:  CALL   559
0614:  MOVLW  01
0615:  SUBWF  77,W
0616:  MOVWF  30
0617:  MOVF   78,W
0618:  MOVWF  31
0619:  MOVLW  00
061A:  BTFSS  03.0
061B:  MOVLW  01
061C:  SUBWF  31,F
061D:  MOVF   79,W
061E:  MOVWF  32
061F:  MOVLW  00
0620:  BTFSS  03.0
0621:  MOVLW  01
0622:  SUBWF  32,F
0623:  MOVF   7A,W
0624:  MOVWF  33
0625:  MOVLW  00
0626:  BTFSS  03.0
0627:  MOVLW  01
0628:  SUBWF  33,F
....................             } 
....................          } 
0629:  GOTO   6A4
....................          else 
....................          { 
....................             if (angleRingTheBell < 9) 
062A:  MOVF   2F,F
062B:  BTFSS  03.2
062C:  GOTO   6A4
062D:  MOVF   2E,F
062E:  BTFSS  03.2
062F:  GOTO   6A4
0630:  MOVF   2D,F
0631:  BTFSS  03.2
0632:  GOTO   6A4
0633:  MOVF   2C,W
0634:  SUBLW  08
0635:  BTFSS  03.0
0636:  GOTO   6A4
....................             { 
....................                ++angleRingTheBell; 
0637:  MOVLW  01
0638:  ADDWF  2C,F
0639:  BTFSC  03.0
063A:  INCF   2D,F
063B:  BTFSC  03.2
063C:  INCF   2E,F
063D:  BTFSC  03.2
063E:  INCF   2F,F
....................                // write_eeprom(0x01, ++angleRingTheBell); 
....................                valTimer0SetRingTheBell = (int32)FLOOR((13.1072 - angleRingTheBell) / 0.0512) - 1; 
063F:  MOVF   2F,W
0640:  MOVWF  6A
0641:  MOVF   2E,W
0642:  MOVWF  69
0643:  MOVF   2D,W
0644:  MOVWF  68
0645:  MOVF   2C,W
0646:  MOVWF  67
0647:  CALL   074
0648:  BSF    03.1
0649:  MOVLW  17
064A:  BSF    03.5
064B:  MOVWF  2E
064C:  MOVLW  B7
064D:  MOVWF  2D
064E:  MOVLW  51
064F:  MOVWF  2C
0650:  MOVLW  82
0651:  MOVWF  2B
0652:  MOVF   7A,W
0653:  MOVWF  32
0654:  MOVF   79,W
0655:  MOVWF  31
0656:  MOVF   78,W
0657:  MOVWF  30
0658:  MOVF   77,W
0659:  MOVWF  2F
065A:  BCF    03.5
065B:  CALL   08F
065C:  MOVF   7A,W
065D:  MOVWF  6A
065E:  MOVF   79,W
065F:  MOVWF  69
0660:  MOVF   78,W
0661:  MOVWF  68
0662:  MOVF   77,W
0663:  MOVWF  67
0664:  MOVF   7A,W
0665:  MOVWF  6E
0666:  MOVF   79,W
0667:  MOVWF  6D
0668:  MOVF   78,W
0669:  MOVWF  6C
066A:  MOVF   77,W
066B:  MOVWF  6B
066C:  MOVLW  17
066D:  MOVWF  72
066E:  MOVLW  B7
066F:  MOVWF  71
0670:  MOVLW  51
0671:  MOVWF  70
0672:  MOVLW  7A
0673:  MOVWF  6F
0674:  CALL   1D5
0675:  MOVF   7A,W
0676:  MOVWF  6A
0677:  MOVF   79,W
0678:  MOVWF  69
0679:  MOVF   78,W
067A:  MOVWF  68
067B:  MOVF   77,W
067C:  MOVWF  67
067D:  MOVF   7A,W
067E:  MOVWF  76
067F:  MOVF   79,W
0680:  MOVWF  75
0681:  MOVF   78,W
0682:  MOVWF  74
0683:  MOVF   77,W
0684:  MOVWF  73
0685:  CALL   3AE
0686:  MOVF   7A,W
0687:  MOVWF  6A
0688:  MOVF   79,W
0689:  MOVWF  69
068A:  MOVF   78,W
068B:  MOVWF  68
068C:  MOVF   77,W
068D:  MOVWF  67
068E:  CALL   559
068F:  MOVLW  01
0690:  SUBWF  77,W
0691:  MOVWF  34
0692:  MOVF   78,W
0693:  MOVWF  35
0694:  MOVLW  00
0695:  BTFSS  03.0
0696:  MOVLW  01
0697:  SUBWF  35,F
0698:  MOVF   79,W
0699:  MOVWF  36
069A:  MOVLW  00
069B:  BTFSS  03.0
069C:  MOVLW  01
069D:  SUBWF  36,F
069E:  MOVF   7A,W
069F:  MOVWF  37
06A0:  MOVLW  00
06A1:  BTFSS  03.0
06A2:  MOVLW  01
06A3:  SUBWF  37,F
....................             } 
....................          } 
....................          output_low(ledBUTTON); 
06A4:  BSF    03.5
06A5:  BCF    08.4
06A6:  BCF    03.5
06A7:  BCF    08.4
....................       } 
06A8:  GOTO   7AD
....................       else if (!input(btnINCREASE)) 
06A9:  BSF    03.5
06AA:  BSF    06.4
06AB:  BCF    03.5
06AC:  BTFSC  06.4
06AD:  GOTO   7AD
....................       { 
....................          output_high(ledBUTTON); 
06AE:  BSF    03.5
06AF:  BCF    08.4
06B0:  BCF    03.5
06B1:  BSF    08.4
....................          if (flagStarter) 
06B2:  BTFSS  3C.1
06B3:  GOTO   72F
....................          { 
....................             if (angleStarter > 1) 
06B4:  MOVF   2B,F
06B5:  BTFSS  03.2
06B6:  GOTO   6C1
06B7:  MOVF   2A,F
06B8:  BTFSS  03.2
06B9:  GOTO   6C1
06BA:  MOVF   29,F
06BB:  BTFSS  03.2
06BC:  GOTO   6C1
06BD:  MOVF   28,W
06BE:  SUBLW  01
06BF:  BTFSC  03.0
06C0:  GOTO   72E
....................             { 
....................                --angleStarter; 
06C1:  MOVLW  FF
06C2:  ADDWF  28,F
06C3:  BTFSS  03.0
06C4:  ADDWF  29,F
06C5:  BTFSS  03.0
06C6:  ADDWF  2A,F
06C7:  BTFSS  03.0
06C8:  ADDWF  2B,F
....................                // write_eeprom(0x00, --angleStarter); 
....................                valTimer0SetStarter = (int32)FLOOR((13.1072 - angleStarter) / 0.0512) - 1; 
06C9:  MOVF   2B,W
06CA:  MOVWF  6A
06CB:  MOVF   2A,W
06CC:  MOVWF  69
06CD:  MOVF   29,W
06CE:  MOVWF  68
06CF:  MOVF   28,W
06D0:  MOVWF  67
06D1:  CALL   074
06D2:  BSF    03.1
06D3:  MOVLW  17
06D4:  BSF    03.5
06D5:  MOVWF  2E
06D6:  MOVLW  B7
06D7:  MOVWF  2D
06D8:  MOVLW  51
06D9:  MOVWF  2C
06DA:  MOVLW  82
06DB:  MOVWF  2B
06DC:  MOVF   7A,W
06DD:  MOVWF  32
06DE:  MOVF   79,W
06DF:  MOVWF  31
06E0:  MOVF   78,W
06E1:  MOVWF  30
06E2:  MOVF   77,W
06E3:  MOVWF  2F
06E4:  BCF    03.5
06E5:  CALL   08F
06E6:  MOVF   7A,W
06E7:  MOVWF  6A
06E8:  MOVF   79,W
06E9:  MOVWF  69
06EA:  MOVF   78,W
06EB:  MOVWF  68
06EC:  MOVF   77,W
06ED:  MOVWF  67
06EE:  MOVF   7A,W
06EF:  MOVWF  6E
06F0:  MOVF   79,W
06F1:  MOVWF  6D
06F2:  MOVF   78,W
06F3:  MOVWF  6C
06F4:  MOVF   77,W
06F5:  MOVWF  6B
06F6:  MOVLW  17
06F7:  MOVWF  72
06F8:  MOVLW  B7
06F9:  MOVWF  71
06FA:  MOVLW  51
06FB:  MOVWF  70
06FC:  MOVLW  7A
06FD:  MOVWF  6F
06FE:  CALL   1D5
06FF:  MOVF   7A,W
0700:  MOVWF  6A
0701:  MOVF   79,W
0702:  MOVWF  69
0703:  MOVF   78,W
0704:  MOVWF  68
0705:  MOVF   77,W
0706:  MOVWF  67
0707:  MOVF   7A,W
0708:  MOVWF  76
0709:  MOVF   79,W
070A:  MOVWF  75
070B:  MOVF   78,W
070C:  MOVWF  74
070D:  MOVF   77,W
070E:  MOVWF  73
070F:  CALL   3AE
0710:  MOVF   7A,W
0711:  MOVWF  6A
0712:  MOVF   79,W
0713:  MOVWF  69
0714:  MOVF   78,W
0715:  MOVWF  68
0716:  MOVF   77,W
0717:  MOVWF  67
0718:  CALL   559
0719:  MOVLW  01
071A:  SUBWF  77,W
071B:  MOVWF  30
071C:  MOVF   78,W
071D:  MOVWF  31
071E:  MOVLW  00
071F:  BTFSS  03.0
0720:  MOVLW  01
0721:  SUBWF  31,F
0722:  MOVF   79,W
0723:  MOVWF  32
0724:  MOVLW  00
0725:  BTFSS  03.0
0726:  MOVLW  01
0727:  SUBWF  32,F
0728:  MOVF   7A,W
0729:  MOVWF  33
072A:  MOVLW  00
072B:  BTFSS  03.0
072C:  MOVLW  01
072D:  SUBWF  33,F
....................             } 
....................          } 
072E:  GOTO   7A9
....................          else 
....................          { 
....................             if (angleRingTheBell > 1) 
072F:  MOVF   2F,F
0730:  BTFSS  03.2
0731:  GOTO   73C
0732:  MOVF   2E,F
0733:  BTFSS  03.2
0734:  GOTO   73C
0735:  MOVF   2D,F
0736:  BTFSS  03.2
0737:  GOTO   73C
0738:  MOVF   2C,W
0739:  SUBLW  01
073A:  BTFSC  03.0
073B:  GOTO   7A9
....................             { 
....................                --angleRingTheBell; 
073C:  MOVLW  FF
073D:  ADDWF  2C,F
073E:  BTFSS  03.0
073F:  ADDWF  2D,F
0740:  BTFSS  03.0
0741:  ADDWF  2E,F
0742:  BTFSS  03.0
0743:  ADDWF  2F,F
....................                // write_eeprom(0x01, --angleRingTheBell); 
....................                valTimer0SetRingTheBell = (int32)FLOOR((13.1072 - angleRingTheBell) / 0.0512) - 1; 
0744:  MOVF   2F,W
0745:  MOVWF  6A
0746:  MOVF   2E,W
0747:  MOVWF  69
0748:  MOVF   2D,W
0749:  MOVWF  68
074A:  MOVF   2C,W
074B:  MOVWF  67
074C:  CALL   074
074D:  BSF    03.1
074E:  MOVLW  17
074F:  BSF    03.5
0750:  MOVWF  2E
0751:  MOVLW  B7
0752:  MOVWF  2D
0753:  MOVLW  51
0754:  MOVWF  2C
0755:  MOVLW  82
0756:  MOVWF  2B
0757:  MOVF   7A,W
0758:  MOVWF  32
0759:  MOVF   79,W
075A:  MOVWF  31
075B:  MOVF   78,W
075C:  MOVWF  30
075D:  MOVF   77,W
075E:  MOVWF  2F
075F:  BCF    03.5
0760:  CALL   08F
0761:  MOVF   7A,W
0762:  MOVWF  6A
0763:  MOVF   79,W
0764:  MOVWF  69
0765:  MOVF   78,W
0766:  MOVWF  68
0767:  MOVF   77,W
0768:  MOVWF  67
0769:  MOVF   7A,W
076A:  MOVWF  6E
076B:  MOVF   79,W
076C:  MOVWF  6D
076D:  MOVF   78,W
076E:  MOVWF  6C
076F:  MOVF   77,W
0770:  MOVWF  6B
0771:  MOVLW  17
0772:  MOVWF  72
0773:  MOVLW  B7
0774:  MOVWF  71
0775:  MOVLW  51
0776:  MOVWF  70
0777:  MOVLW  7A
0778:  MOVWF  6F
0779:  CALL   1D5
077A:  MOVF   7A,W
077B:  MOVWF  6A
077C:  MOVF   79,W
077D:  MOVWF  69
077E:  MOVF   78,W
077F:  MOVWF  68
0780:  MOVF   77,W
0781:  MOVWF  67
0782:  MOVF   7A,W
0783:  MOVWF  76
0784:  MOVF   79,W
0785:  MOVWF  75
0786:  MOVF   78,W
0787:  MOVWF  74
0788:  MOVF   77,W
0789:  MOVWF  73
078A:  CALL   3AE
078B:  MOVF   7A,W
078C:  MOVWF  6A
078D:  MOVF   79,W
078E:  MOVWF  69
078F:  MOVF   78,W
0790:  MOVWF  68
0791:  MOVF   77,W
0792:  MOVWF  67
0793:  CALL   559
0794:  MOVLW  01
0795:  SUBWF  77,W
0796:  MOVWF  34
0797:  MOVF   78,W
0798:  MOVWF  35
0799:  MOVLW  00
079A:  BTFSS  03.0
079B:  MOVLW  01
079C:  SUBWF  35,F
079D:  MOVF   79,W
079E:  MOVWF  36
079F:  MOVLW  00
07A0:  BTFSS  03.0
07A1:  MOVLW  01
07A2:  SUBWF  36,F
07A3:  MOVF   7A,W
07A4:  MOVWF  37
07A5:  MOVLW  00
07A6:  BTFSS  03.0
07A7:  MOVLW  01
07A8:  SUBWF  37,F
....................             } 
....................          } 
....................          output_low(ledBUTTON); 
07A9:  BSF    03.5
07AA:  BCF    08.4
07AB:  BCF    03.5
07AC:  BCF    08.4
....................       } 
....................  
....................       // iTimer2OverFlow = 50; // 100ms every command 
....................       // iTimer2OverFlow = 7660; // 100ms every command 
....................    } 
.................... } 
....................  
07AD:  BCF    0C.1
07AE:  BCF    0A.3
07AF:  BCF    0A.4
07B0:  GOTO   02B
.................... #INT_CCP1 
.................... void ccp1_isr() 
.................... { 
....................    if (RC1) 
07B1:  BTFSS  07.1
07B2:  GOTO   7B7
....................       ++count; 
07B3:  INCF   38,F
07B4:  BTFSC  03.2
07B5:  INCF   39,F
07B6:  GOTO   7BB
....................    else 
....................       --count; 
07B7:  MOVF   38,W
07B8:  BTFSC  03.2
07B9:  DECF   39,F
07BA:  DECF   38,F
....................    // clear_interrupt(INT_CCP1); 
07BB:  BCF    0C.2
07BC:  BCF    0A.3
07BD:  BCF    0A.4
07BE:  GOTO   02B
.................... } 
....................  
.................... //================================================== Func() ================================================== 
....................  
.................... void FORWARD() 
.................... { 
....................    output_low(triac2Out); 
*
07D3:  BSF    03.5
07D4:  BCF    08.1
07D5:  BCF    03.5
07D6:  BCF    08.1
....................  
....................    flagForward = true; 
07D7:  BSF    3C.0
....................    flagSTOP = false; 
07D8:  BCF    3C.2
07D9:  RETURN
.................... } 
.................... void REVERSE() 
.................... { 
....................    output_low(triac1Out); 
*
07E4:  BSF    03.5
07E5:  BCF    08.0
07E6:  BCF    03.5
07E7:  BCF    08.0
....................    flagForward = flagSTOP = false; 
07E8:  BCF    3C.2
07E9:  BCF    3C.0
07EA:  RETURN
.................... } 
.................... void STOP() 
.................... { 
....................    flagSTOP = true; 
*
07DA:  BSF    3C.2
....................    output_low(triac1Out); 
07DB:  BSF    03.5
07DC:  BCF    08.0
07DD:  BCF    03.5
07DE:  BCF    08.0
....................    output_low(triac2Out); 
07DF:  BSF    03.5
07E0:  BCF    08.1
07E1:  BCF    03.5
07E2:  BCF    08.1
07E3:  RETURN
.................... } 
....................  
.................... void starter() 
.................... { 
....................    // half rotate 
....................    while (count <= 200) 
*
0856:  BTFSC  39.7
0857:  GOTO   05F
0858:  MOVF   39,F
0859:  BTFSS  03.2
085A:  GOTO   063
085B:  MOVF   38,W
085C:  SUBLW  C8
085D:  BTFSS  03.0
085E:  GOTO   063
....................       FORWARD(); 
085F:  BCF    0A.3
0860:  CALL   7D3
0861:  BSF    0A.3
0862:  GOTO   056
....................    STOP(); 
0863:  BCF    0A.3
0864:  CALL   7DA
0865:  BSF    0A.3
....................    while (count >= 0) 
0866:  BTFSC  39.7
0867:  GOTO   06C
....................       STOP(); 
0868:  BCF    0A.3
0869:  CALL   7DA
086A:  BSF    0A.3
086B:  GOTO   066
....................    while (count >= -200) 
086C:  BTFSS  39.7
086D:  GOTO   079
086E:  MOVF   39,W
086F:  SUBLW  FE
0870:  BTFSC  03.0
0871:  GOTO   07D
0872:  XORLW  FF
0873:  BTFSS  03.2
0874:  GOTO   079
0875:  MOVF   38,W
0876:  SUBLW  37
0877:  BTFSC  03.0
0878:  GOTO   07D
....................       REVERSE(); 
0879:  BCF    0A.3
087A:  CALL   7E4
087B:  BSF    0A.3
087C:  GOTO   06C
....................    STOP(); 
087D:  BCF    0A.3
087E:  CALL   7DA
087F:  BSF    0A.3
....................    while (count <= 0) 
0880:  BTFSC  39.7
0881:  GOTO   089
0882:  MOVF   39,F
0883:  BTFSS  03.2
0884:  GOTO   08D
0885:  MOVF   38,W
0886:  SUBLW  00
0887:  BTFSS  03.0
0888:  GOTO   08D
....................       STOP(); 
0889:  BCF    0A.3
088A:  CALL   7DA
088B:  BSF    0A.3
088C:  GOTO   080
....................  
....................    // 1 rotate 
....................    while (count <= 400) 
088D:  BTFSC  39.7
088E:  GOTO   099
088F:  MOVF   39,W
0890:  SUBLW  01
0891:  BTFSS  03.0
0892:  GOTO   09D
0893:  BTFSS  03.2
0894:  GOTO   099
0895:  MOVF   38,W
0896:  SUBLW  90
0897:  BTFSS  03.0
0898:  GOTO   09D
....................       FORWARD(); 
0899:  BCF    0A.3
089A:  CALL   7D3
089B:  BSF    0A.3
089C:  GOTO   08D
....................    STOP(); 
089D:  BCF    0A.3
089E:  CALL   7DA
089F:  BSF    0A.3
....................    while (count >= 0) 
08A0:  BTFSC  39.7
08A1:  GOTO   0A6
....................       STOP(); 
08A2:  BCF    0A.3
08A3:  CALL   7DA
08A4:  BSF    0A.3
08A5:  GOTO   0A0
....................    while (count >= -400) 
08A6:  BTFSS  39.7
08A7:  GOTO   0B3
08A8:  MOVF   39,W
08A9:  SUBLW  FD
08AA:  BTFSC  03.0
08AB:  GOTO   0B7
08AC:  XORLW  FF
08AD:  BTFSS  03.2
08AE:  GOTO   0B3
08AF:  MOVF   38,W
08B0:  SUBLW  6F
08B1:  BTFSC  03.0
08B2:  GOTO   0B7
....................       REVERSE(); 
08B3:  BCF    0A.3
08B4:  CALL   7E4
08B5:  BSF    0A.3
08B6:  GOTO   0A6
....................    STOP(); 
08B7:  BCF    0A.3
08B8:  CALL   7DA
08B9:  BSF    0A.3
....................    while (count <= 0) 
08BA:  BTFSC  39.7
08BB:  GOTO   0C3
08BC:  MOVF   39,F
08BD:  BTFSS  03.2
08BE:  GOTO   0C7
08BF:  MOVF   38,W
08C0:  SUBLW  00
08C1:  BTFSS  03.0
08C2:  GOTO   0C7
....................       STOP(); 
08C3:  BCF    0A.3
08C4:  CALL   7DA
08C5:  BSF    0A.3
08C6:  GOTO   0BA
....................  
....................    // 2 rotates 
....................    while (count <= 800) 
08C7:  BTFSC  39.7
08C8:  GOTO   0D3
08C9:  MOVF   39,W
08CA:  SUBLW  03
08CB:  BTFSS  03.0
08CC:  GOTO   0D7
08CD:  BTFSS  03.2
08CE:  GOTO   0D3
08CF:  MOVF   38,W
08D0:  SUBLW  20
08D1:  BTFSS  03.0
08D2:  GOTO   0D7
....................       FORWARD(); 
08D3:  BCF    0A.3
08D4:  CALL   7D3
08D5:  BSF    0A.3
08D6:  GOTO   0C7
....................    STOP(); 
08D7:  BCF    0A.3
08D8:  CALL   7DA
08D9:  BSF    0A.3
....................    while (count >= 0) 
08DA:  BTFSC  39.7
08DB:  GOTO   0E0
....................       STOP(); 
08DC:  BCF    0A.3
08DD:  CALL   7DA
08DE:  BSF    0A.3
08DF:  GOTO   0DA
....................    while (count >= -800) 
08E0:  BTFSS  39.7
08E1:  GOTO   0ED
08E2:  MOVF   39,W
08E3:  SUBLW  FB
08E4:  BTFSC  03.0
08E5:  GOTO   0F1
08E6:  XORLW  FF
08E7:  BTFSS  03.2
08E8:  GOTO   0ED
08E9:  MOVF   38,W
08EA:  SUBLW  DF
08EB:  BTFSC  03.0
08EC:  GOTO   0F1
....................       REVERSE(); 
08ED:  BCF    0A.3
08EE:  CALL   7E4
08EF:  BSF    0A.3
08F0:  GOTO   0E0
....................    STOP(); 
08F1:  BCF    0A.3
08F2:  CALL   7DA
08F3:  BSF    0A.3
....................    while (count <= 0) 
08F4:  BTFSC  39.7
08F5:  GOTO   0FD
08F6:  MOVF   39,F
08F7:  BTFSS  03.2
08F8:  GOTO   101
08F9:  MOVF   38,W
08FA:  SUBLW  00
08FB:  BTFSS  03.0
08FC:  GOTO   101
....................       STOP(); 
08FD:  BCF    0A.3
08FE:  CALL   7DA
08FF:  BSF    0A.3
0900:  GOTO   0F4
....................  
....................    // 3 rotates 1 side 
....................    while (count <= 1200) 
0901:  BTFSC  39.7
0902:  GOTO   10D
0903:  MOVF   39,W
0904:  SUBLW  04
0905:  BTFSS  03.0
0906:  GOTO   111
0907:  BTFSS  03.2
0908:  GOTO   10D
0909:  MOVF   38,W
090A:  SUBLW  B0
090B:  BTFSS  03.0
090C:  GOTO   111
....................       FORWARD(); 
090D:  BCF    0A.3
090E:  CALL   7D3
090F:  BSF    0A.3
0910:  GOTO   101
....................    STOP(); 
0911:  BCF    0A.3
0912:  CALL   7DA
0913:  BSF    0A.3
....................  
....................    flagStarter = false; 
0914:  BCF    3C.1
0915:  BSF    0A.3
0916:  BCF    0A.4
0917:  GOTO   302 (RETURN)
.................... } 
....................  
.................... void RingTheBell() 
.................... { 
....................    while (count >= 400) 
0918:  BTFSC  39.7
0919:  GOTO   129
091A:  MOVF   39,W
091B:  SUBLW  00
091C:  BTFSC  03.0
091D:  GOTO   129
091E:  XORLW  FF
091F:  BTFSS  03.2
0920:  GOTO   125
0921:  MOVF   38,W
0922:  SUBLW  8F
0923:  BTFSC  03.0
0924:  GOTO   129
....................       STOP(); 
0925:  BCF    0A.3
0926:  CALL   7DA
0927:  BSF    0A.3
0928:  GOTO   118
....................  
....................    while (count >= -800) 
0929:  BTFSS  39.7
092A:  GOTO   136
092B:  MOVF   39,W
092C:  SUBLW  FB
092D:  BTFSC  03.0
092E:  GOTO   13A
092F:  XORLW  FF
0930:  BTFSS  03.2
0931:  GOTO   136
0932:  MOVF   38,W
0933:  SUBLW  DF
0934:  BTFSC  03.0
0935:  GOTO   13A
....................       REVERSE(); 
0936:  BCF    0A.3
0937:  CALL   7E4
0938:  BSF    0A.3
0939:  GOTO   129
....................    STOP(); 
093A:  BCF    0A.3
093B:  CALL   7DA
093C:  BSF    0A.3
....................  
....................    while (count <= -400) 
093D:  BTFSS  39.7
093E:  GOTO   14D
093F:  MOVF   39,W
0940:  SUBLW  FE
0941:  BTFSS  03.0
0942:  GOTO   14D
0943:  BTFSS  03.2
0944:  GOTO   149
0945:  MOVF   38,W
0946:  SUBLW  70
0947:  BTFSS  03.0
0948:  GOTO   14D
....................       STOP(); 
0949:  BCF    0A.3
094A:  CALL   7DA
094B:  BSF    0A.3
094C:  GOTO   13D
....................  
....................    while (count <= 800) 
094D:  BTFSC  39.7
094E:  GOTO   159
094F:  MOVF   39,W
0950:  SUBLW  03
0951:  BTFSS  03.0
0952:  GOTO   15D
0953:  BTFSS  03.2
0954:  GOTO   159
0955:  MOVF   38,W
0956:  SUBLW  20
0957:  BTFSS  03.0
0958:  GOTO   15D
....................       FORWARD(); 
0959:  BCF    0A.3
095A:  CALL   7D3
095B:  BSF    0A.3
095C:  GOTO   14D
....................    STOP(); 
095D:  BCF    0A.3
095E:  CALL   7DA
095F:  BSF    0A.3
0960:  BSF    0A.3
0961:  BCF    0A.4
0962:  GOTO   30D (RETURN)
.................... } 
....................  
.................... // pic 20mhz 5.10^6 = 1sec 
.................... // motor 2000rpm 
.................... // quay co tai: 0.5rps -> 200xung/s -> 1/200 s/xung 
.................... void checkSafetyFirst(int32 sec) 
.................... { 
....................    flagSTOP = true; 
*
0800:  BSF    3C.2
....................    output_low(relayOut); // safety switch 
0801:  BCF    3D.0
0802:  MOVF   3D,W
0803:  BSF    03.5
0804:  MOVWF  07
0805:  BCF    03.5
0806:  BCF    07.0
....................  
....................    signed int16 lastCount = count; 
0807:  MOVF   39,W
0808:  MOVWF  43
0809:  MOVF   38,W
080A:  MOVWF  42
....................    for (int32 i = sec; --i;) // waitting steady 
080B:  MOVF   41,W
080C:  MOVWF  47
080D:  MOVF   40,W
080E:  MOVWF  46
080F:  MOVF   3F,W
0810:  MOVWF  45
0811:  MOVF   3E,W
0812:  MOVWF  44
0813:  MOVLW  FF
0814:  ADDWF  44,F
0815:  BTFSS  03.0
0816:  ADDWF  45,F
0817:  BTFSS  03.0
0818:  ADDWF  46,F
0819:  BTFSS  03.0
081A:  ADDWF  47,F
081B:  MOVF   44,F
081C:  BTFSS  03.2
081D:  GOTO   027
081E:  MOVF   45,F
081F:  BTFSS  03.2
0820:  GOTO   027
0821:  MOVF   46,F
0822:  BTFSS  03.2
0823:  GOTO   027
0824:  MOVF   47,F
0825:  BTFSC  03.2
0826:  GOTO   041
....................    { 
....................       if (count != lastCount) 
0827:  MOVF   42,W
0828:  SUBWF  38,W
0829:  BTFSS  03.2
082A:  GOTO   02F
082B:  MOVF   43,W
082C:  SUBWF  39,W
082D:  BTFSC  03.2
082E:  GOTO   040
....................       { 
....................          i = sec; // reset 
082F:  MOVF   41,W
0830:  MOVWF  47
0831:  MOVF   40,W
0832:  MOVWF  46
0833:  MOVF   3F,W
0834:  MOVWF  45
0835:  MOVF   3E,W
0836:  MOVWF  44
....................          lastCount = count; 
0837:  MOVF   39,W
0838:  MOVWF  43
0839:  MOVF   38,W
083A:  MOVWF  42
....................          delay_ms(30); // pray for couting up 
083B:  MOVLW  1E
083C:  MOVWF  49
083D:  BCF    0A.3
083E:  CALL   7BF
083F:  BSF    0A.3
....................       } 
0840:  GOTO   013
....................    } 
....................  
....................    count = 0; // update 0 point 
0841:  CLRF   39
0842:  CLRF   38
....................    output_high(relayOut); 
0843:  BCF    3D.0
0844:  MOVF   3D,W
0845:  BSF    03.5
0846:  MOVWF  07
0847:  BCF    03.5
0848:  BSF    07.0
....................    delay_ms(3000); // ngăn hồ quang nếu cùng lúc đóng triac lập tức 
0849:  MOVLW  0C
084A:  MOVWF  48
084B:  MOVLW  FA
084C:  MOVWF  49
084D:  BCF    0A.3
084E:  CALL   7BF
084F:  BSF    0A.3
0850:  DECFSZ 48,F
0851:  GOTO   04B
....................    flagSTOP = false; 
0852:  BCF    3C.2
0853:  BSF    0A.3
0854:  BCF    0A.4
0855:  GOTO   2F9 (RETURN)
.................... } 
....................  
.................... //================================================== MAIN ================================================== 
....................  
.................... void main() 
*
0963:  MOVF   03,W
0964:  ANDLW  1F
0965:  MOVWF  03
0966:  CLRF   2B
0967:  CLRF   2A
0968:  CLRF   29
0969:  MOVLW  01
096A:  MOVWF  28
096B:  CLRF   2F
096C:  CLRF   2E
096D:  CLRF   2D
096E:  MOVLW  06
096F:  MOVWF  2C
0970:  CLRF   27
0971:  BTFSC  0B.7
0972:  BSF    27.7
0973:  BCF    0B.7
0974:  MOVF   2B,W
0975:  MOVWF  6A
0976:  MOVF   2A,W
0977:  MOVWF  69
0978:  MOVF   29,W
0979:  MOVWF  68
097A:  MOVF   28,W
097B:  MOVWF  67
097C:  BCF    0A.3
097D:  CALL   074
097E:  BSF    0A.3
097F:  BTFSC  27.7
0980:  BSF    0B.7
0981:  BSF    03.1
0982:  CLRF   27
0983:  BTFSC  0B.7
0984:  BSF    27.7
0985:  BCF    0B.7
0986:  MOVLW  17
0987:  BSF    03.5
0988:  MOVWF  2E
0989:  MOVLW  B7
098A:  MOVWF  2D
098B:  MOVLW  51
098C:  MOVWF  2C
098D:  MOVLW  82
098E:  MOVWF  2B
098F:  MOVF   7A,W
0990:  MOVWF  32
0991:  MOVF   79,W
0992:  MOVWF  31
0993:  MOVF   78,W
0994:  MOVWF  30
0995:  MOVF   77,W
0996:  MOVWF  2F
0997:  BCF    0A.3
0998:  BCF    03.5
0999:  CALL   08F
099A:  BSF    0A.3
099B:  BTFSC  27.7
099C:  BSF    0B.7
099D:  MOVF   7A,W
099E:  MOVWF  41
099F:  MOVF   79,W
09A0:  MOVWF  40
09A1:  MOVF   78,W
09A2:  MOVWF  3F
09A3:  MOVF   77,W
09A4:  MOVWF  3E
09A5:  CLRF   27
09A6:  BTFSC  0B.7
09A7:  BSF    27.7
09A8:  BCF    0B.7
09A9:  MOVF   7A,W
09AA:  MOVWF  6E
09AB:  MOVF   79,W
09AC:  MOVWF  6D
09AD:  MOVF   78,W
09AE:  MOVWF  6C
09AF:  MOVF   77,W
09B0:  MOVWF  6B
09B1:  MOVLW  17
09B2:  MOVWF  72
09B3:  MOVLW  B7
09B4:  MOVWF  71
09B5:  MOVLW  51
09B6:  MOVWF  70
09B7:  MOVLW  7A
09B8:  MOVWF  6F
09B9:  BCF    0A.3
09BA:  CALL   1D5
09BB:  BSF    0A.3
09BC:  BTFSC  27.7
09BD:  BSF    0B.7
09BE:  MOVF   7A,W
09BF:  MOVWF  41
09C0:  MOVF   79,W
09C1:  MOVWF  40
09C2:  MOVF   78,W
09C3:  MOVWF  3F
09C4:  MOVF   77,W
09C5:  MOVWF  3E
09C6:  CLRF   27
09C7:  BTFSC  0B.7
09C8:  BSF    27.7
09C9:  BCF    0B.7
09CA:  MOVF   7A,W
09CB:  MOVWF  76
09CC:  MOVF   79,W
09CD:  MOVWF  75
09CE:  MOVF   78,W
09CF:  MOVWF  74
09D0:  MOVF   77,W
09D1:  MOVWF  73
09D2:  BCF    0A.3
09D3:  CALL   3AE
09D4:  BSF    0A.3
09D5:  BTFSC  27.7
09D6:  BSF    0B.7
09D7:  CLRF   27
09D8:  BTFSC  0B.7
09D9:  BSF    27.7
09DA:  BCF    0B.7
09DB:  MOVF   7A,W
09DC:  MOVWF  6A
09DD:  MOVF   79,W
09DE:  MOVWF  69
09DF:  MOVF   78,W
09E0:  MOVWF  68
09E1:  MOVF   77,W
09E2:  MOVWF  67
09E3:  BCF    0A.3
09E4:  CALL   559
09E5:  BSF    0A.3
09E6:  BTFSC  27.7
09E7:  BSF    0B.7
09E8:  MOVF   7A,W
09E9:  MOVWF  41
09EA:  MOVF   79,W
09EB:  MOVWF  40
09EC:  MOVF   78,W
09ED:  MOVWF  3F
09EE:  MOVF   77,W
09EF:  MOVWF  3E
09F0:  MOVLW  01
09F1:  SUBWF  77,W
09F2:  MOVWF  30
09F3:  MOVF   78,W
09F4:  MOVWF  31
09F5:  MOVLW  00
09F6:  BTFSS  03.0
09F7:  MOVLW  01
09F8:  SUBWF  31,F
09F9:  MOVF   79,W
09FA:  MOVWF  32
09FB:  MOVLW  00
09FC:  BTFSS  03.0
09FD:  MOVLW  01
09FE:  SUBWF  32,F
09FF:  MOVF   7A,W
0A00:  MOVWF  33
0A01:  MOVLW  00
0A02:  BTFSS  03.0
0A03:  MOVLW  01
0A04:  SUBWF  33,F
0A05:  CLRF   27
0A06:  BTFSC  0B.7
0A07:  BSF    27.7
0A08:  BCF    0B.7
0A09:  MOVF   2F,W
0A0A:  MOVWF  6A
0A0B:  MOVF   2E,W
0A0C:  MOVWF  69
0A0D:  MOVF   2D,W
0A0E:  MOVWF  68
0A0F:  MOVF   2C,W
0A10:  MOVWF  67
0A11:  BCF    0A.3
0A12:  CALL   074
0A13:  BSF    0A.3
0A14:  BTFSC  27.7
0A15:  BSF    0B.7
0A16:  CLRF   3F
0A17:  MOVF   04,W
0A18:  MOVWF  3E
0A19:  BCF    3F.0
0A1A:  BTFSC  03.7
0A1B:  BSF    3F.0
0A1C:  BSF    03.1
0A1D:  CLRF   27
0A1E:  BTFSC  0B.7
0A1F:  BSF    27.7
0A20:  BCF    0B.7
0A21:  MOVLW  17
0A22:  BSF    03.5
0A23:  MOVWF  2E
0A24:  MOVLW  B7
0A25:  MOVWF  2D
0A26:  MOVLW  51
0A27:  MOVWF  2C
0A28:  MOVLW  82
0A29:  MOVWF  2B
0A2A:  MOVF   7A,W
0A2B:  MOVWF  32
0A2C:  MOVF   79,W
0A2D:  MOVWF  31
0A2E:  MOVF   78,W
0A2F:  MOVWF  30
0A30:  MOVF   77,W
0A31:  MOVWF  2F
0A32:  BCF    0A.3
0A33:  BCF    03.5
0A34:  CALL   08F
0A35:  BSF    0A.3
0A36:  BTFSC  27.7
0A37:  BSF    0B.7
0A38:  MOVF   3E,W
0A39:  MOVWF  04
0A3A:  BCF    03.7
0A3B:  BTFSC  3F.0
0A3C:  BSF    03.7
0A3D:  MOVF   7A,W
0A3E:  MOVWF  43
0A3F:  MOVF   79,W
0A40:  MOVWF  42
0A41:  MOVF   78,W
0A42:  MOVWF  41
0A43:  MOVF   77,W
0A44:  MOVWF  40
0A45:  CLRF   27
0A46:  BTFSC  0B.7
0A47:  BSF    27.7
0A48:  BCF    0B.7
0A49:  MOVF   7A,W
0A4A:  MOVWF  6E
0A4B:  MOVF   79,W
0A4C:  MOVWF  6D
0A4D:  MOVF   78,W
0A4E:  MOVWF  6C
0A4F:  MOVF   77,W
0A50:  MOVWF  6B
0A51:  MOVLW  17
0A52:  MOVWF  72
0A53:  MOVLW  B7
0A54:  MOVWF  71
0A55:  MOVLW  51
0A56:  MOVWF  70
0A57:  MOVLW  7A
0A58:  MOVWF  6F
0A59:  BCF    0A.3
0A5A:  CALL   1D5
0A5B:  BSF    0A.3
0A5C:  BTFSC  27.7
0A5D:  BSF    0B.7
0A5E:  MOVF   7A,W
0A5F:  MOVWF  43
0A60:  MOVF   79,W
0A61:  MOVWF  42
0A62:  MOVF   78,W
0A63:  MOVWF  41
0A64:  MOVF   77,W
0A65:  MOVWF  40
0A66:  CLRF   27
0A67:  BTFSC  0B.7
0A68:  BSF    27.7
0A69:  BCF    0B.7
0A6A:  MOVF   7A,W
0A6B:  MOVWF  76
0A6C:  MOVF   79,W
0A6D:  MOVWF  75
0A6E:  MOVF   78,W
0A6F:  MOVWF  74
0A70:  MOVF   77,W
0A71:  MOVWF  73
0A72:  BCF    0A.3
0A73:  CALL   3AE
0A74:  BSF    0A.3
0A75:  BTFSC  27.7
0A76:  BSF    0B.7
0A77:  CLRF   27
0A78:  BTFSC  0B.7
0A79:  BSF    27.7
0A7A:  BCF    0B.7
0A7B:  MOVF   7A,W
0A7C:  MOVWF  6A
0A7D:  MOVF   79,W
0A7E:  MOVWF  69
0A7F:  MOVF   78,W
0A80:  MOVWF  68
0A81:  MOVF   77,W
0A82:  MOVWF  67
0A83:  BCF    0A.3
0A84:  CALL   559
0A85:  BSF    0A.3
0A86:  BTFSC  27.7
0A87:  BSF    0B.7
0A88:  MOVLW  01
0A89:  SUBWF  77,W
0A8A:  MOVWF  34
0A8B:  MOVF   78,W
0A8C:  MOVWF  35
0A8D:  MOVLW  00
0A8E:  BTFSS  03.0
0A8F:  MOVLW  01
0A90:  SUBWF  35,F
0A91:  MOVF   79,W
0A92:  MOVWF  36
0A93:  MOVLW  00
0A94:  BTFSS  03.0
0A95:  MOVLW  01
0A96:  SUBWF  36,F
0A97:  MOVF   7A,W
0A98:  MOVWF  37
0A99:  MOVLW  00
0A9A:  BTFSS  03.0
0A9B:  MOVLW  01
0A9C:  SUBWF  37,F
0A9D:  CLRF   39
0A9E:  CLRF   38
0A9F:  BSF    3C.0
0AA0:  BSF    3C.1
0AA1:  BSF    3C.2
0AA2:  MOVLW  FF
0AA3:  MOVWF  3D
0AA4:  BSF    03.5
0AA5:  BSF    1F.0
0AA6:  BSF    1F.1
0AA7:  BSF    1F.2
0AA8:  BCF    1F.3
0AA9:  MOVLW  07
0AAA:  MOVWF  1C
0AAB:  BCF    03.7
.................... { 
....................    TRISB0 = TRISC1 = TRISC2 = TRISB1 = TRISB2 = TRISB3 = TRISB4 = 1;          //input 
0AAC:  BSF    06.4
0AAD:  BSF    06.3
0AAE:  BSF    06.2
0AAF:  BSF    06.1
0AB0:  BSF    07.2
0AB1:  BSF    07.1
0AB2:  BSF    06.0
....................    TRISD0 = TRISD1 = TRISC0 = TRISD2 = TRISD3 = TRISC5 = TRISD4 = TRISB5 = 0; //output 
0AB3:  BCF    06.5
0AB4:  BCF    08.4
0AB5:  BCF    07.5
0AB6:  BCF    08.3
0AB7:  BCF    08.2
0AB8:  BCF    07.0
0AB9:  BCF    08.1
0ABA:  BCF    08.0
....................  
....................    output_low(ledSAFETY);   // CLEAR reset pin 
0ABB:  BCF    08.2
0ABC:  BCF    03.5
0ABD:  BCF    08.2
....................    output_low(ledSTARTING); // CLEAR reset pin 
0ABE:  BSF    03.5
0ABF:  BCF    08.3
0AC0:  BCF    03.5
0AC1:  BCF    08.3
....................    output_low(ledRINGING);  // CLEAR reset pin 
0AC2:  BCF    3D.5
0AC3:  MOVF   3D,W
0AC4:  BSF    03.5
0AC5:  MOVWF  07
0AC6:  BCF    03.5
0AC7:  BCF    07.5
....................  
....................    clear_interrupt(INT_EXT); 
0AC8:  BCF    0B.1
....................    enable_interrupts(INT_EXT); 
0AC9:  BSF    0B.4
....................    ext_int_edge(H_TO_L); 
0ACA:  BSF    03.5
0ACB:  BCF    01.6
....................  
....................    setup_timer_0(RTCC_INTERNAL | RTCC_DIV_256); // 51.2us 
0ACC:  MOVF   01,W
0ACD:  ANDLW  C0
0ACE:  IORLW  07
0ACF:  MOVWF  01
....................    enable_interrupts(INT_TIMER0); 
0AD0:  BCF    03.5
0AD1:  BSF    0B.5
....................  
....................    setup_ccp1(CCP_CAPTURE_FE); 
0AD2:  BSF    3D.2
0AD3:  MOVF   3D,W
0AD4:  BSF    03.5
0AD5:  MOVWF  07
0AD6:  BCF    03.5
0AD7:  CLRF   17
0AD8:  MOVLW  04
0AD9:  MOVWF  17
....................    setup_timer_1(T1_INTERNAL); 
0ADA:  MOVLW  85
0ADB:  MOVWF  10
....................    enable_interrupts(INT_CCP1); 
0ADC:  BSF    03.5
0ADD:  BSF    0C.2
....................  
....................    setup_timer_2(T2_DIV_BY_16, 255, 16); // Overflow every 13.056us 
0ADE:  MOVLW  78
0ADF:  MOVWF  78
0AE0:  IORLW  06
0AE1:  BCF    03.5
0AE2:  MOVWF  12
0AE3:  MOVLW  FF
0AE4:  BSF    03.5
0AE5:  MOVWF  12
....................    set_timer2(0); 
0AE6:  BCF    03.5
0AE7:  CLRF   11
....................    // iTimer2OverFlow = 50; // 100ms every command 
....................    // iTimer2OverFlow = 7660; // 100ms every command 
....................    enable_interrupts(INT_TIMER2); 
0AE8:  BSF    03.5
0AE9:  BSF    0C.1
....................  
....................    // setup_comparator(A0_VR_A1_VR); 
....................    // setup_vref(VREF_HIGH | 5); 
....................    // enable_interrupts(INT_COMP); 
....................  
....................    enable_interrupts(GLOBAL); 
0AEA:  MOVLW  C0
0AEB:  BCF    03.5
0AEC:  IORWF  0B,F
....................  
....................    output_high(ledSAFETY); 
0AED:  BSF    03.5
0AEE:  BCF    08.2
0AEF:  BCF    03.5
0AF0:  BSF    08.2
....................    // checkSafetyFirst(15); // ~~ 6 seconds 
....................    checkSafetyFirst(1500000); // ~~ 6 seconds 
0AF1:  CLRF   41
0AF2:  MOVLW  16
0AF3:  MOVWF  40
0AF4:  MOVLW  E3
0AF5:  MOVWF  3F
0AF6:  MOVLW  60
0AF7:  MOVWF  3E
0AF8:  GOTO   000
....................    output_low(ledSAFETY); 
0AF9:  BSF    03.5
0AFA:  BCF    08.2
0AFB:  BCF    03.5
0AFC:  BCF    08.2
....................  
....................    output_high(ledSTARTING); 
0AFD:  BSF    03.5
0AFE:  BCF    08.3
0AFF:  BCF    03.5
0B00:  BSF    08.3
....................    starter(); 
0B01:  GOTO   056
....................    output_low(ledSTARTING); 
0B02:  BSF    03.5
0B03:  BCF    08.3
0B04:  BCF    03.5
0B05:  BCF    08.3
....................  
....................    output_high(ledRINGING); 
0B06:  BCF    3D.5
0B07:  MOVF   3D,W
0B08:  BSF    03.5
0B09:  MOVWF  07
0B0A:  BCF    03.5
0B0B:  BSF    07.5
....................    while (TRUE) 
....................    { 
....................       RingTheBell(); 
0B0C:  GOTO   118
0B0D:  GOTO   30C
....................    } 
.................... } 
0B0E:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
