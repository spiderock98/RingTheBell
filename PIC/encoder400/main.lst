CCS PCM C Compiler, Version 5.025, 47277               21-Apr-20 05:25

               Filename:   D:\Desktop\RingTheBell\PIC\encoder400\main.lst

               ROM used:   2924 words (36%)
                           Largest free fragment is 2048
               RAM used:   35 (10%) at main() level
                           123 (33%) worst case
               Stack used: 5 locations (2 in main + 3 for interrupts)
               Stack size: 8

*
0000:  MOVLW  0A
0001:  MOVWF  0A
0002:  GOTO   2D7
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.4
0018:  GOTO   01B
0019:  BTFSC  0B.1
001A:  GOTO   03C
001B:  MOVLW  8C
001C:  MOVWF  04
001D:  BTFSS  00.1
001E:  GOTO   021
001F:  BTFSC  0C.1
0020:  GOTO   03F
0021:  MOVLW  8C
0022:  MOVWF  04
0023:  BTFSS  00.2
0024:  GOTO   027
0025:  BTFSC  0C.2
0026:  GOTO   042
0027:  BTFSS  0B.5
0028:  GOTO   02B
0029:  BTFSC  0B.2
002A:  GOTO   045
002B:  MOVF   22,W
002C:  MOVWF  04
002D:  MOVF   23,W
002E:  MOVWF  77
002F:  MOVF   24,W
0030:  MOVWF  78
0031:  MOVF   25,W
0032:  MOVWF  79
0033:  MOVF   26,W
0034:  MOVWF  7A
0035:  MOVF   20,W
0036:  MOVWF  0A
0037:  SWAPF  21,W
0038:  MOVWF  03
0039:  SWAPF  7F,F
003A:  SWAPF  7F,W
003B:  RETFIE
003C:  BCF    0A.3
003D:  BCF    0A.4
003E:  GOTO   048
003F:  BSF    0A.3
0040:  BCF    0A.4
0041:  GOTO   000
0042:  BCF    0A.3
0043:  BCF    0A.4
0044:  GOTO   578
0045:  BCF    0A.3
0046:  BCF    0A.4
0047:  GOTO   05E
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
*
0074:  MOVLW  B6
0075:  MOVWF  77
0076:  CLRF   7A
0077:  CLRF   79
0078:  CLRF   78
0079:  MOVF   67,W
007A:  IORWF  68,W
007B:  IORWF  69,W
007C:  IORWF  6A,W
007D:  BTFSS  03.2
007E:  GOTO   081
007F:  CLRF   77
0080:  GOTO   08E
0081:  BCF    03.0
0082:  BTFSC  78.7
0083:  GOTO   08D
0084:  RLF    67,F
0085:  RLF    68,F
0086:  RLF    69,F
0087:  RLF    6A,F
0088:  RLF    7A,F
0089:  RLF    79,F
008A:  RLF    78,F
008B:  DECFSZ 77,F
008C:  GOTO   081
008D:  BCF    78.7
008E:  RETURN
008F:  MOVLW  80
0090:  BTFSS  03.1
0091:  GOTO   095
0092:  BSF    03.5
0093:  XORWF  30,F
0094:  BCF    03.5
0095:  BSF    03.5
0096:  CLRF   35
0097:  CLRF   36
0098:  MOVF   2C,W
0099:  MOVWF  34
009A:  MOVF   30,W
009B:  XORWF  34,F
009C:  MOVF   2B,W
009D:  BTFSC  03.2
009E:  GOTO   183
009F:  MOVWF  33
00A0:  MOVWF  77
00A1:  MOVF   2F,W
00A2:  BTFSC  03.2
00A3:  GOTO   18C
00A4:  SUBWF  33,F
00A5:  BTFSC  03.2
00A6:  GOTO   128
00A7:  BTFSS  03.0
00A8:  GOTO   0E6
00A9:  MOVF   30,W
00AA:  MOVWF  39
00AB:  BSF    39.7
00AC:  MOVF   31,W
00AD:  MOVWF  38
00AE:  MOVF   32,W
00AF:  MOVWF  37
00B0:  CLRF   36
00B1:  BCF    03.0
00B2:  RRF    39,F
00B3:  RRF    38,F
00B4:  RRF    37,F
00B5:  RRF    36,F
00B6:  DECFSZ 33,F
00B7:  GOTO   0B0
00B8:  BTFSS  34.7
00B9:  GOTO   0BD
00BA:  BSF    35.0
00BB:  GOTO   1A0
00BC:  BCF    35.0
00BD:  BCF    33.0
00BE:  BSF    35.4
00BF:  MOVLW  AE
00C0:  MOVWF  04
00C1:  BCF    03.7
00C2:  GOTO   1B5
00C3:  BCF    35.4
00C4:  BTFSC  34.7
00C5:  GOTO   0D0
00C6:  BTFSS  33.0
00C7:  GOTO   0DB
00C8:  RRF    39,F
00C9:  RRF    38,F
00CA:  RRF    37,F
00CB:  RRF    36,F
00CC:  INCF   77,F
00CD:  BTFSC  03.2
00CE:  GOTO   19B
00CF:  GOTO   0DB
00D0:  BTFSC  39.7
00D1:  GOTO   0DE
00D2:  BCF    03.0
00D3:  RLF    36,F
00D4:  RLF    37,F
00D5:  RLF    38,F
00D6:  RLF    39,F
00D7:  DECF   77,F
00D8:  BTFSC  03.2
00D9:  GOTO   19B
00DA:  GOTO   0D0
00DB:  BSF    35.6
00DC:  GOTO   148
00DD:  BCF    35.6
00DE:  MOVF   2C,W
00DF:  MOVWF  34
00E0:  BTFSS  34.7
00E1:  GOTO   0E4
00E2:  BSF    39.7
00E3:  GOTO   194
00E4:  BCF    39.7
00E5:  GOTO   194
00E6:  MOVF   2F,W
00E7:  MOVWF  33
00E8:  MOVWF  77
00E9:  MOVF   2B,W
00EA:  SUBWF  33,F
00EB:  MOVF   2C,W
00EC:  MOVWF  39
00ED:  BSF    39.7
00EE:  MOVF   2D,W
00EF:  MOVWF  38
00F0:  MOVF   2E,W
00F1:  MOVWF  37
00F2:  CLRF   36
00F3:  BCF    03.0
00F4:  RRF    39,F
00F5:  RRF    38,F
00F6:  RRF    37,F
00F7:  RRF    36,F
00F8:  DECFSZ 33,F
00F9:  GOTO   0F2
00FA:  BTFSS  34.7
00FB:  GOTO   0FF
00FC:  BSF    35.1
00FD:  GOTO   1A0
00FE:  BCF    35.1
00FF:  BCF    33.0
0100:  BSF    35.5
0101:  MOVLW  B2
0102:  MOVWF  04
0103:  BCF    03.7
0104:  GOTO   1B5
0105:  BCF    35.5
0106:  BTFSC  34.7
0107:  GOTO   112
0108:  BTFSS  33.0
0109:  GOTO   11D
010A:  RRF    39,F
010B:  RRF    38,F
010C:  RRF    37,F
010D:  RRF    36,F
010E:  INCF   77,F
010F:  BTFSC  03.2
0110:  GOTO   19B
0111:  GOTO   11D
0112:  BTFSC  39.7
0113:  GOTO   120
0114:  BCF    03.0
0115:  RLF    36,F
0116:  RLF    37,F
0117:  RLF    38,F
0118:  RLF    39,F
0119:  DECF   77,F
011A:  BTFSC  03.2
011B:  GOTO   19B
011C:  GOTO   112
011D:  BSF    35.7
011E:  GOTO   148
011F:  BCF    35.7
0120:  MOVF   30,W
0121:  MOVWF  34
0122:  BTFSS  34.7
0123:  GOTO   126
0124:  BSF    39.7
0125:  GOTO   194
0126:  BCF    39.7
0127:  GOTO   194
0128:  MOVF   30,W
0129:  MOVWF  39
012A:  BSF    39.7
012B:  MOVF   31,W
012C:  MOVWF  38
012D:  MOVF   32,W
012E:  MOVWF  37
012F:  BTFSS  34.7
0130:  GOTO   135
0131:  BCF    39.7
0132:  BSF    35.2
0133:  GOTO   1A0
0134:  BCF    35.2
0135:  CLRF   36
0136:  BCF    33.0
0137:  MOVLW  AE
0138:  MOVWF  04
0139:  BCF    03.7
013A:  GOTO   1B5
013B:  BTFSC  34.7
013C:  GOTO   15E
013D:  MOVF   2C,W
013E:  MOVWF  34
013F:  BTFSS  33.0
0140:  GOTO   148
0141:  RRF    39,F
0142:  RRF    38,F
0143:  RRF    37,F
0144:  RRF    36,F
0145:  INCF   77,F
0146:  BTFSC  03.2
0147:  GOTO   19B
0148:  BTFSS  36.7
0149:  GOTO   159
014A:  INCF   37,F
014B:  BTFSS  03.2
014C:  GOTO   159
014D:  INCF   38,F
014E:  BTFSS  03.2
014F:  GOTO   159
0150:  INCF   39,F
0151:  BTFSS  03.2
0152:  GOTO   159
0153:  RRF    39,F
0154:  RRF    38,F
0155:  RRF    37,F
0156:  INCF   77,F
0157:  BTFSC  03.2
0158:  GOTO   19B
0159:  BTFSC  35.6
015A:  GOTO   0DD
015B:  BTFSC  35.7
015C:  GOTO   11F
015D:  GOTO   17D
015E:  MOVLW  80
015F:  XORWF  39,F
0160:  BTFSS  39.7
0161:  GOTO   166
0162:  GOTO   1A0
0163:  MOVF   30,W
0164:  MOVWF  34
0165:  GOTO   173
0166:  MOVF   2C,W
0167:  MOVWF  34
0168:  MOVF   39,F
0169:  BTFSS  03.2
016A:  GOTO   173
016B:  MOVF   38,F
016C:  BTFSS  03.2
016D:  GOTO   173
016E:  MOVF   37,F
016F:  BTFSS  03.2
0170:  GOTO   173
0171:  CLRF   77
0172:  GOTO   194
0173:  BTFSC  39.7
0174:  GOTO   17D
0175:  BCF    03.0
0176:  RLF    36,F
0177:  RLF    37,F
0178:  RLF    38,F
0179:  RLF    39,F
017A:  DECFSZ 77,F
017B:  GOTO   173
017C:  GOTO   19B
017D:  BTFSS  34.7
017E:  GOTO   181
017F:  BSF    39.7
0180:  GOTO   194
0181:  BCF    39.7
0182:  GOTO   194
0183:  MOVF   2F,W
0184:  MOVWF  77
0185:  MOVF   30,W
0186:  MOVWF  39
0187:  MOVF   31,W
0188:  MOVWF  38
0189:  MOVF   32,W
018A:  MOVWF  37
018B:  GOTO   194
018C:  MOVF   2B,W
018D:  MOVWF  77
018E:  MOVF   2C,W
018F:  MOVWF  39
0190:  MOVF   2D,W
0191:  MOVWF  38
0192:  MOVF   2E,W
0193:  MOVWF  37
0194:  MOVF   39,W
0195:  MOVWF  78
0196:  MOVF   38,W
0197:  MOVWF  79
0198:  MOVF   37,W
0199:  MOVWF  7A
019A:  GOTO   1D3
019B:  CLRF   77
019C:  CLRF   78
019D:  CLRF   79
019E:  CLRF   7A
019F:  GOTO   1D3
01A0:  CLRF   36
01A1:  COMF   37,F
01A2:  COMF   38,F
01A3:  COMF   39,F
01A4:  COMF   36,F
01A5:  INCF   36,F
01A6:  BTFSS  03.2
01A7:  GOTO   1AE
01A8:  INCF   37,F
01A9:  BTFSS  03.2
01AA:  GOTO   1AE
01AB:  INCF   38,F
01AC:  BTFSC  03.2
01AD:  INCF   39,F
01AE:  BTFSC  35.0
01AF:  GOTO   0BC
01B0:  BTFSC  35.1
01B1:  GOTO   0FE
01B2:  BTFSC  35.2
01B3:  GOTO   134
01B4:  GOTO   163
01B5:  MOVF   00,W
01B6:  ADDWF  37,F
01B7:  BTFSS  03.0
01B8:  GOTO   1BF
01B9:  INCF   38,F
01BA:  BTFSS  03.2
01BB:  GOTO   1BF
01BC:  INCF   39,F
01BD:  BTFSC  03.2
01BE:  BSF    33.0
01BF:  DECF   04,F
01C0:  MOVF   00,W
01C1:  ADDWF  38,F
01C2:  BTFSS  03.0
01C3:  GOTO   1C7
01C4:  INCF   39,F
01C5:  BTFSC  03.2
01C6:  BSF    33.0
01C7:  DECF   04,F
01C8:  MOVF   00,W
01C9:  BTFSS  00.7
01CA:  XORLW  80
01CB:  ADDWF  39,F
01CC:  BTFSC  03.0
01CD:  BSF    33.0
01CE:  BTFSC  35.4
01CF:  GOTO   0C3
01D0:  BTFSC  35.5
01D1:  GOTO   105
01D2:  GOTO   13B
01D3:  BCF    03.5
01D4:  RETURN
01D5:  MOVF   6B,W
01D6:  BTFSC  03.2
01D7:  GOTO   2AF
01D8:  BSF    03.5
01D9:  MOVWF  24
01DA:  BCF    03.5
01DB:  MOVF   6F,W
01DC:  BTFSC  03.2
01DD:  GOTO   2AF
01DE:  BSF    03.5
01DF:  SUBWF  24,F
01E0:  BTFSS  03.0
01E1:  GOTO   1E9
01E2:  MOVLW  7F
01E3:  ADDWF  24,F
01E4:  BTFSS  03.0
01E5:  GOTO   1E8
01E6:  BCF    03.5
01E7:  GOTO   2AF
01E8:  GOTO   1F3
01E9:  MOVLW  81
01EA:  SUBWF  24,F
01EB:  BTFSC  03.0
01EC:  GOTO   1EF
01ED:  BCF    03.5
01EE:  GOTO   2AF
01EF:  BTFSS  03.2
01F0:  GOTO   1F3
01F1:  BCF    03.5
01F2:  GOTO   2AF
01F3:  MOVF   24,W
01F4:  MOVWF  77
01F5:  CLRF   78
01F6:  CLRF   79
01F7:  CLRF   7A
01F8:  CLRF   23
01F9:  BCF    03.5
01FA:  MOVF   6C,W
01FB:  BSF    03.5
01FC:  MOVWF  22
01FD:  BSF    22.7
01FE:  BCF    03.5
01FF:  MOVF   6D,W
0200:  BSF    03.5
0201:  MOVWF  21
0202:  BCF    03.5
0203:  MOVF   6E,W
0204:  BSF    03.5
0205:  MOVWF  20
0206:  MOVLW  19
0207:  MOVWF  24
0208:  MOVF   72,W
0209:  SUBWF  20,F
020A:  BTFSC  03.0
020B:  GOTO   21C
020C:  MOVLW  01
020D:  SUBWF  21,F
020E:  BTFSC  03.0
020F:  GOTO   21C
0210:  SUBWF  22,F
0211:  BTFSC  03.0
0212:  GOTO   21C
0213:  SUBWF  23,F
0214:  BTFSC  03.0
0215:  GOTO   21C
0216:  INCF   23,F
0217:  INCF   22,F
0218:  INCF   21,F
0219:  MOVF   72,W
021A:  ADDWF  20,F
021B:  GOTO   24E
021C:  MOVF   71,W
021D:  SUBWF  21,F
021E:  BTFSC  03.0
021F:  GOTO   237
0220:  MOVLW  01
0221:  SUBWF  22,F
0222:  BTFSC  03.0
0223:  GOTO   237
0224:  SUBWF  23,F
0225:  BTFSC  03.0
0226:  GOTO   237
0227:  INCF   23,F
0228:  INCF   22,F
0229:  MOVF   71,W
022A:  ADDWF  21,F
022B:  MOVF   72,W
022C:  ADDWF  20,F
022D:  BTFSS  03.0
022E:  GOTO   24E
022F:  INCF   21,F
0230:  BTFSS  03.2
0231:  GOTO   24E
0232:  INCF   22,F
0233:  BTFSS  03.2
0234:  GOTO   24E
0235:  INCF   23,F
0236:  GOTO   24E
0237:  MOVF   70,W
0238:  IORLW  80
0239:  SUBWF  22,F
023A:  BTFSC  03.0
023B:  GOTO   24D
023C:  MOVLW  01
023D:  SUBWF  23,F
023E:  BTFSC  03.0
023F:  GOTO   24D
0240:  INCF   23,F
0241:  MOVF   70,W
0242:  IORLW  80
0243:  ADDWF  22,F
0244:  MOVF   71,W
0245:  ADDWF  21,F
0246:  BTFSS  03.0
0247:  GOTO   22B
0248:  INCF   22,F
0249:  BTFSS  03.2
024A:  GOTO   22B
024B:  INCF   23,F
024C:  GOTO   22B
024D:  BSF    7A.0
024E:  DECFSZ 24,F
024F:  GOTO   251
0250:  GOTO   25C
0251:  BCF    03.0
0252:  RLF    20,F
0253:  RLF    21,F
0254:  RLF    22,F
0255:  RLF    23,F
0256:  BCF    03.0
0257:  RLF    7A,F
0258:  RLF    79,F
0259:  RLF    78,F
025A:  RLF    25,F
025B:  GOTO   208
025C:  BTFSS  25.0
025D:  GOTO   264
025E:  BCF    03.0
025F:  RRF    78,F
0260:  RRF    79,F
0261:  RRF    7A,F
0262:  RRF    25,F
0263:  GOTO   268
0264:  DECFSZ 77,F
0265:  GOTO   268
0266:  BCF    03.5
0267:  GOTO   2AF
0268:  BTFSC  25.7
0269:  GOTO   291
026A:  BCF    03.0
026B:  RLF    20,F
026C:  RLF    21,F
026D:  RLF    22,F
026E:  RLF    23,F
026F:  MOVF   72,W
0270:  SUBWF  20,F
0271:  BTFSC  03.0
0272:  GOTO   27D
0273:  MOVLW  01
0274:  SUBWF  21,F
0275:  BTFSC  03.0
0276:  GOTO   27D
0277:  SUBWF  22,F
0278:  BTFSC  03.0
0279:  GOTO   27D
027A:  SUBWF  23,F
027B:  BTFSS  03.0
027C:  GOTO   2A2
027D:  MOVF   71,W
027E:  SUBWF  21,F
027F:  BTFSC  03.0
0280:  GOTO   288
0281:  MOVLW  01
0282:  SUBWF  22,F
0283:  BTFSC  03.0
0284:  GOTO   288
0285:  SUBWF  23,F
0286:  BTFSS  03.0
0287:  GOTO   2A2
0288:  MOVF   70,W
0289:  IORLW  80
028A:  SUBWF  22,F
028B:  BTFSC  03.0
028C:  GOTO   291
028D:  MOVLW  01
028E:  SUBWF  23,F
028F:  BTFSS  03.0
0290:  GOTO   2A2
0291:  INCF   7A,F
0292:  BTFSS  03.2
0293:  GOTO   2A2
0294:  INCF   79,F
0295:  BTFSS  03.2
0296:  GOTO   2A2
0297:  INCF   78,F
0298:  BTFSS  03.2
0299:  GOTO   2A2
029A:  INCF   77,F
029B:  BTFSS  03.2
029C:  GOTO   29F
029D:  BCF    03.5
029E:  GOTO   2AF
029F:  RRF    78,F
02A0:  RRF    79,F
02A1:  RRF    7A,F
02A2:  BCF    03.5
02A3:  MOVF   6C,W
02A4:  BSF    03.5
02A5:  MOVWF  24
02A6:  MOVF   70,W
02A7:  XORWF  24,F
02A8:  BTFSS  24.7
02A9:  GOTO   2AC
02AA:  BSF    78.7
02AB:  GOTO   2B4
02AC:  BCF    78.7
02AD:  GOTO   2B4
02AE:  BCF    03.5
02AF:  CLRF   77
02B0:  CLRF   78
02B1:  CLRF   79
02B2:  CLRF   7A
02B3:  BSF    03.5
02B4:  BCF    03.5
02B5:  RETURN
02B6:  BSF    03.5
02B7:  MOVF   28,W
02B8:  MOVWF  2F
02B9:  MOVF   2C,W
02BA:  XORWF  2F,F
02BB:  BTFSS  2F.7
02BC:  GOTO   2C2
02BD:  BCF    03.2
02BE:  BCF    03.0
02BF:  BTFSC  28.7
02C0:  BSF    03.0
02C1:  GOTO   2F5
02C2:  MOVF   28,W
02C3:  MOVWF  2F
02C4:  MOVF   2B,W
02C5:  MOVWF  30
02C6:  MOVF   27,W
02C7:  SUBWF  30,F
02C8:  BTFSC  03.2
02C9:  GOTO   2D0
02CA:  BTFSS  2F.7
02CB:  GOTO   2F5
02CC:  MOVF   03,W
02CD:  XORLW  01
02CE:  MOVWF  03
02CF:  GOTO   2F5
02D0:  MOVF   2C,W
02D1:  MOVWF  30
02D2:  MOVF   28,W
02D3:  SUBWF  30,F
02D4:  BTFSC  03.2
02D5:  GOTO   2DC
02D6:  BTFSS  2F.7
02D7:  GOTO   2F5
02D8:  MOVF   03,W
02D9:  XORLW  01
02DA:  MOVWF  03
02DB:  GOTO   2F5
02DC:  MOVF   2D,W
02DD:  MOVWF  30
02DE:  MOVF   29,W
02DF:  SUBWF  30,F
02E0:  BTFSC  03.2
02E1:  GOTO   2E8
02E2:  BTFSS  2F.7
02E3:  GOTO   2F5
02E4:  MOVF   03,W
02E5:  XORLW  01
02E6:  MOVWF  03
02E7:  GOTO   2F5
02E8:  MOVF   2E,W
02E9:  MOVWF  30
02EA:  MOVF   2A,W
02EB:  SUBWF  30,F
02EC:  BTFSC  03.2
02ED:  GOTO   2F4
02EE:  BTFSS  2F.7
02EF:  GOTO   2F5
02F0:  MOVF   03,W
02F1:  XORLW  01
02F2:  MOVWF  03
02F3:  GOTO   2F5
02F4:  BCF    03.0
02F5:  BCF    03.5
02F6:  RETURN
02F7:  MOVLW  8E
02F8:  MOVWF  77
02F9:  BSF    03.5
02FA:  MOVF   27,W
02FB:  SUBWF  77,F
02FC:  MOVF   28,W
02FD:  MOVWF  79
02FE:  MOVF   29,W
02FF:  MOVWF  78
0300:  BSF    79.7
0301:  MOVF   77,F
0302:  BTFSC  03.2
0303:  GOTO   30F
0304:  BCF    03.0
0305:  MOVF   79,F
0306:  BTFSS  03.2
0307:  GOTO   30B
0308:  MOVF   78,F
0309:  BTFSC  03.2
030A:  GOTO   30F
030B:  RRF    79,F
030C:  RRF    78,F
030D:  DECFSZ 77,F
030E:  GOTO   304
030F:  BTFSS  28.7
0310:  GOTO   316
0311:  COMF   78,F
0312:  COMF   79,F
0313:  INCF   78,F
0314:  BTFSC  03.2
0315:  INCF   79,F
0316:  BCF    03.5
0317:  RETURN
0318:  MOVLW  8E
0319:  MOVWF  77
031A:  BSF    03.5
031B:  MOVF   2C,W
031C:  MOVWF  78
031D:  MOVF   2B,W
031E:  MOVWF  79
031F:  CLRF   7A
0320:  MOVF   78,F
0321:  BTFSS  03.2
0322:  GOTO   32D
0323:  MOVF   79,W
0324:  MOVWF  78
0325:  CLRF   79
0326:  MOVLW  08
0327:  SUBWF  77,F
0328:  MOVF   78,F
0329:  BTFSS  03.2
032A:  GOTO   32D
032B:  CLRF   77
032C:  GOTO   335
032D:  BCF    03.0
032E:  BTFSC  78.7
032F:  GOTO   334
0330:  RLF    79,F
0331:  RLF    78,F
0332:  DECF   77,F
0333:  GOTO   32D
0334:  BCF    78.7
0335:  BCF    03.5
0336:  RETURN
0337:  BSF    03.5
0338:  MOVF   27,W
0339:  BTFSC  03.2
033A:  GOTO   3A8
033B:  MOVWF  2F
033C:  MOVF   2B,W
033D:  BTFSC  03.2
033E:  GOTO   3A8
033F:  ADDWF  2F,F
0340:  BTFSC  03.0
0341:  GOTO   349
0342:  MOVLW  7F
0343:  SUBWF  2F,F
0344:  BTFSS  03.0
0345:  GOTO   3A8
0346:  BTFSC  03.2
0347:  GOTO   3A8
0348:  GOTO   34D
0349:  MOVLW  81
034A:  ADDWF  2F,F
034B:  BTFSC  03.0
034C:  GOTO   3A8
034D:  MOVF   2F,W
034E:  MOVWF  77
034F:  CLRF   78
0350:  CLRF   79
0351:  CLRF   7A
0352:  MOVF   28,W
0353:  MOVWF  33
0354:  BSF    33.7
0355:  MOVF   29,W
0356:  MOVWF  32
0357:  MOVF   2A,W
0358:  MOVWF  31
0359:  MOVLW  18
035A:  MOVWF  2F
035B:  CLRF   30
035C:  BTFSS  31.0
035D:  GOTO   376
035E:  MOVF   2E,W
035F:  ADDWF  7A,F
0360:  BTFSS  03.0
0361:  GOTO   368
0362:  INCF   79,F
0363:  BTFSS  03.2
0364:  GOTO   368
0365:  INCF   78,F
0366:  BTFSC  03.2
0367:  BSF    30.7
0368:  MOVF   2D,W
0369:  ADDWF  79,F
036A:  BTFSS  03.0
036B:  GOTO   36F
036C:  INCF   78,F
036D:  BTFSC  03.2
036E:  BSF    30.7
036F:  MOVF   2C,W
0370:  MOVWF  29
0371:  BSF    29.7
0372:  MOVF   29,W
0373:  ADDWF  78,F
0374:  BTFSC  03.0
0375:  BSF    30.7
0376:  RLF    30,F
0377:  RRF    78,F
0378:  RRF    79,F
0379:  RRF    7A,F
037A:  RRF    33,F
037B:  RRF    32,F
037C:  RRF    31,F
037D:  BCF    03.0
037E:  DECFSZ 2F,F
037F:  GOTO   35B
0380:  MOVLW  01
0381:  ADDWF  77,F
0382:  BTFSC  03.0
0383:  GOTO   3A8
0384:  BTFSC  78.7
0385:  GOTO   38D
0386:  RLF    33,F
0387:  RLF    7A,F
0388:  RLF    79,F
0389:  RLF    78,F
038A:  DECF   77,F
038B:  BTFSC  03.2
038C:  GOTO   3A8
038D:  BTFSS  33.7
038E:  GOTO   39E
038F:  INCF   7A,F
0390:  BTFSS  03.2
0391:  GOTO   39E
0392:  INCF   79,F
0393:  BTFSS  03.2
0394:  GOTO   39E
0395:  INCF   78,F
0396:  BTFSS  03.2
0397:  GOTO   39E
0398:  RRF    78,F
0399:  RRF    79,F
039A:  RRF    7A,F
039B:  INCF   77,F
039C:  BTFSC  03.2
039D:  GOTO   3A8
039E:  MOVF   28,W
039F:  MOVWF  30
03A0:  MOVF   2C,W
03A1:  XORWF  30,F
03A2:  BTFSS  30.7
03A3:  GOTO   3A6
03A4:  BSF    78.7
03A5:  GOTO   3AC
03A6:  BCF    78.7
03A7:  GOTO   3AC
03A8:  CLRF   77
03A9:  CLRF   78
03AA:  CLRF   79
03AB:  CLRF   7A
03AC:  BCF    03.5
03AD:  RETURN
*
0559:  MOVF   67,W
055A:  SUBLW  B6
055B:  MOVWF  67
055C:  CLRF   7A
055D:  MOVF   68,W
055E:  MOVWF  6B
055F:  BSF    68.7
0560:  BCF    03.0
0561:  RRF    68,F
0562:  RRF    69,F
0563:  RRF    6A,F
0564:  RRF    7A,F
0565:  RRF    79,F
0566:  RRF    78,F
0567:  RRF    77,F
0568:  DECFSZ 67,F
0569:  GOTO   560
056A:  BTFSS  6B.7
056B:  GOTO   577
056C:  COMF   77,F
056D:  COMF   78,F
056E:  COMF   79,F
056F:  COMF   7A,F
0570:  INCF   77,F
0571:  BTFSC  03.2
0572:  INCF   78,F
0573:  BTFSC  03.2
0574:  INCF   79,F
0575:  BTFSC  03.2
0576:  INCF   7A,F
0577:  RETURN
....................  
.................... #list 
....................  
.................... #include <def_16f877a.h> 
.................... //========================= Register Definitions ========================== 
.................... //-----Register Files------------------------------------------------------ 
.................... #byte INDF = 0x00 
.................... #byte TMR0 = 0x01 
.................... #byte PCL = 0x02 
.................... #byte STATUS = 0x03 
.................... #byte FSR = 0x04 
.................... #byte PORTA = 0x05 
.................... #byte PORTB = 0x06 
.................... #byte PORTC = 0x07 
.................... #byte PORTD = 0x08 
.................... #byte PORTE = 0x09 
.................... #byte PCLATH = 0x0A 
.................... #byte INTCON = 0x0B 
.................... #byte PIR1 = 0x0C 
.................... #byte PIR2 = 0x0D 
.................... #byte TMR1L = 0x0E 
.................... #byte TMR1H = 0x0F 
.................... #byte T1CON = 0x10 
.................... #byte TMR2 = 0x11 
.................... #byte T2CON = 0x12 
.................... #byte SSPBUF = 0x13 
.................... #byte SSPCON = 0x14 
.................... #byte CCPR1L = 0x15 
.................... #byte CCPR1H = 0x16 
.................... #byte CCP1CON = 0x17 
.................... #byte RCSTA = 0x18 
.................... #byte TXREG = 0x19 
.................... #byte RCREG = 0x1A 
.................... #byte CCPR2L = 0x1B 
.................... #byte CCPR2H = 0x1C 
.................... #byte CCP2CON = 0x1D 
.................... #byte ADRESH = 0x1E 
.................... #byte ADCON0 = 0x1F 
.................... #byte OPTION_REG = 0x81 
.................... //-------------- TRIS PORT ----------------------------- 
.................... #byte TRISA = 0x85 
.................... #byte TRISB = 0x86 
.................... #byte TRISC = 0x87 
.................... #byte TRISD = 0x88 
.................... #byte TRISE = 0x89 
.................... #byte PIE1 = 0x8C 
.................... #byte PIE2 = 0x8D 
.................... #byte PCON = 0x8E 
....................  
.................... #byte SSPCON2 = 0x91 
.................... #byte PR2 = 0x92 
.................... #byte SSPADD = 0x93 
.................... #byte SSPSTAT = 0x94 
....................  
.................... #byte TXSTA = 0x98 
.................... #byte SPBRG = 0x99 
....................  
.................... #byte ADRESL = 0x9E 
.................... #byte ADCON1 = 0x9F 
....................  
.................... /*	bank 2 registers */ 
....................  
.................... #byte EEDATA = 0x010C 
.................... #byte EEADR = 0x010D 
.................... #byte EEDATH = 0x010E 
.................... #byte EEADRH = 0x010F 
....................  
.................... /*	bank 3 registers */ 
....................  
.................... #byte EECON1 = 0x018C 
.................... #byte EECON2 = 0x018D 
....................  
.................... //----- STATUS Bits -------------------------------------------------------- 
....................  
.................... // For Assembly Language - Note upper case 
.................... #define IRP 7 
.................... #define RP1 6 
.................... #define RP0 5 
.................... #define NOT_TO 4 
.................... #define NOT_PD 3 
.................... #define Z 2 
.................... #define DC 1 
.................... #define C 0 
....................  
.................... //---------------- TRIS BIT PORT-------------------------------------- 
.................... //------------------TRISA bits--------------------------- 
....................  
.................... #bit TRISA5 = 0x85.5 
.................... #bit TRISA4 = 0x85.4 
.................... #bit TRISA3 = 0x85.3 
.................... #bit TRISA2 = 0x85.2 
.................... #bit TRISA1 = 0x85.1 
.................... #bit TRISA0 = 0x85.0 
....................  
.................... //-----------------TRISB bits----------------------------- 
....................  
.................... #bit TRISB7 = 0x86.7 
.................... #bit TRISB6 = 0x86.6 
.................... #bit TRISB5 = 0x86.5 
.................... #bit TRISB4 = 0x86.4 
.................... #bit TRISB3 = 0x86.3 
.................... #bit TRISB2 = 0x86.2 
.................... #bit TRISB1 = 0x86.1 
.................... #bit TRISB0 = 0x86.0 
....................  
.................... //----------------TRISC bits------------------- 
....................  
.................... #bit TRISC7 = 0x87.7 
.................... #bit TRISC6 = 0x87.6 
.................... #bit TRISC5 = 0x87.5 
.................... #bit TRISC4 = 0x87.4 
.................... #bit TRISC3 = 0x87.3 
.................... #bit TRISC2 = 0x87.2 
.................... #bit TRISC1 = 0x87.1 
.................... #bit TRISC0 = 0x87.0 
.................... //------------------TRISD bit------------------ 
.................... #bit TRISD7 = 0x88.7 
.................... #bit TRISD6 = 0x88.6 
.................... #bit TRISD5 = 0x88.5 
.................... #bit TRISD4 = 0x88.4 
.................... #bit TRISD3 = 0x88.3 
.................... #bit TRISD2 = 0x88.2 
.................... #bit TRISD1 = 0x88.1 
.................... #bit TRISD0 = 0x88.0 
.................... //-------------TRISE bit---------------------- 
.................... #bit TRISE2 = 0x89.2 
.................... #bit TRISE1 = 0x89.1 
.................... #bit TRISE0 = 0x89.0 
.................... //--------------------------------------------------------------------------- 
.................... //---------PORTA bits------------------ 
.................... #bit RA4 = 0x05.4 
.................... #bit RA3 = 0x05.3 
.................... #bit RA2 = 0x05.2 
.................... #bit RA1 = 0x05.1 
.................... #bit RA0 = 0x05.0 
.................... //---------PORTB bits------------------ 
.................... #bit RB7 = 0x06.7 
.................... #bit RB6 = 0x06.6 
.................... #bit RB5 = 0x06.5 
.................... #bit RB4 = 0x06.4 
.................... #bit RB3 = 0x06.3 
.................... #bit RB2 = 0x06.2 
.................... #bit RB1 = 0x06.1 
.................... #bit RB0 = 0x06.0 
.................... //---------PORTC bits------------------ 
.................... #bit RC7 = 0x07.7 
.................... #bit RC6 = 0x07.6 
.................... #bit RC5 = 0x07.5 
.................... #bit RC4 = 0x07.4 
.................... #bit RC3 = 0x07.3 
.................... #bit RC2 = 0x07.2 
.................... #bit RC1 = 0x07.1 
.................... #bit RC0 = 0x07.0 
.................... //---------PORTD bits------------------ 
.................... #bit RD7 = 0x08.7 
.................... #bit RD6 = 0x08.6 
.................... #bit RD5 = 0x08.5 
.................... #bit RD4 = 0x08.4 
.................... #bit RD3 = 0x08.3 
.................... #bit RD2 = 0x08.2 
.................... #bit RD1 = 0x08.1 
.................... #bit RD0 = 0x08.0 
.................... //---------PORTE bits------------------ 
.................... #bit RE2 = 0x09.2 
.................... #bit RE1 = 0x09.1 
.................... #bit RE0 = 0x09.0 
....................  
.................... //----- INTCON ------------------------------------------------------------- 
....................  
.................... #bit GIE = 0x0b.7 
.................... #bit PEIE = 0x0b.6 
.................... #bit TMR0IE = 0x0b.5 
.................... #bit INTE = 0x0b.4 
.................... #bit RBIE = 0x0b.3 
.................... #bit TMR0IF = 0x0b.2 
.................... #bit INTF = 0x0b.1 
.................... #bit RBIF = 0x0b.0 
....................  
.................... //----- PIR1 --------------------------------------------------------------- 
....................  
.................... #bit pspif = 0x0c.7 
.................... #bit adif = 0x0c.6 
.................... #bit rcif = 0x0c.5 
.................... #bit txif = 0x0c.4 
.................... #bit sspif = 0x0c.3 
.................... #bit ccp1if = 0x0c.2 
.................... #bit tmr2if = 0x0c.1 
.................... #bit tmr1if = 0x0c.0 
....................  
.................... //----- PIR2 --------------------------------------------------------------- 
....................  
.................... #bit cmif = 0x0d.6 
.................... #bit eeif = 0x0d.4 
.................... #bit bclif = 0x0d.3 
.................... #bit ccp2if = 0x0d.0 
....................  
.................... //----- PIE1 --------------------------------------------------------------- 
....................  
.................... #bit pspie = 0x8c.7 
.................... #bit adie = 0x8c.6 
.................... #bit rcie = 0x8c.5 
.................... #bit txie = 0x8c.4 
.................... #bit sspie = 0x8c.3 
.................... #bit ccp1ie = 0x8c.2 
.................... #bit tmr2ie = 0x8c.1 
.................... #bit tmr1ie = 0x8c.0 
....................  
.................... //----- PIE2 --------------------------------------------------------------- 
....................  
.................... #bit cmie = 0x8d.6 
.................... #bit eeie = 0x8d.4 
.................... #bit bclie = 0x8d.3 
.................... #bit ccp2ie = 0x8d.0 
.................... //----- T1CON Bits --------------------------------------------------------- 
.................... #bit T1CKPS1 = 0x10.5 
.................... #bit T1CKPS0 = 0x10.4 
.................... #bit T1OSCEN = 0x10.3 
.................... #bit T1SYNC = 0x10.2 
.................... #bit TMR1CS = 0x10.1 
.................... #bit TMR1ON = 0x10.0 
....................  
.................... //----- T2CON Bits --------------------------------------------------------- 
.................... #bit TOUTPS3 = 0x12.6 
.................... #bit TOUTPS2 = 0x12.5 
.................... #bit TOUTPS1 = 0x12.4 
.................... #bit TOUTPS0 = 0x12.3 
.................... #bit TMR2ON = 0x12.2 
.................... #bit T2CKPS1 = 0x12.1 
.................... #bit T2CKPS0 = 0x12.0 
....................  
.................... //-------------SSPCON bits-------------------------- 
.................... #bit WCOL = 0x14.7 
.................... #bit SSPOV = 0x14.6 
.................... #bit SSPEN = 0x14.5 
.................... #bit CKP = 0x14.4 
.................... #bit SSPM3 = 0x14.3 
.................... #bit SSPM2 = 0x14.2 
.................... #bit SSPM1 = 0x14.1 
.................... #bit SSPM0 = 0x14.0 
....................  
.................... //---------------CCP1CON bits-------- 
.................... #bit CCP1X = 0x17.5 
.................... #bit CCP1Y = 0x17.4 
.................... #bit CCP1M3 = 0x17.3 
.................... #bit CCP1M2 = 0x17.2 
.................... #bit CCP1M1 = 0x17.1 
.................... #bit CCP1M0 = 0x17.0 
....................  
.................... //---------------RCSTA bits------------------- 
....................  
.................... #bit SPEN = 0x18.7 
.................... #bit RX9 = 0x18.6 
.................... #bit SREN = 0x18.5 
.................... #bit CREN = 0x18.4 
.................... #bit ADDEN = 0x18.3 
.................... #bit FERR = 0x18.2 
.................... #bit OERR = 0x18.1 
.................... #bit RX9D = 0x18.0 
....................  
.................... //-----------------------CCP2CON bits---------- 
....................  
.................... #bit CCP2X = 0x1D.5 
.................... #bit CCP2Y = 0x1D.4 
.................... #bit CCP2M3 = 0x1D.3 
.................... #bit CCP2M2 = 0x1D.2 
.................... #bit CCP2M1 = 0x1D.1 
.................... #bit CCP2M0 = 0x1D.0 
....................  
.................... //----- ADCON0 Bits -------------------------------------------------------- 
.................... #bit ADCS1 = 0x1F.7 
.................... #bit ADCS0 = 0x1F.6 
.................... #bit CHS2 = 0x1F.5 
.................... #bit CHS1 = 0x1F.4 
.................... #bit CHS0 = 0x1F.3 
.................... #bit ADGO = 0x1F.2 
.................... #bit ADON = 0x1F.0 
....................  
.................... //----- OPTION_reg Bits -------------------------------------------------------- 
....................  
.................... #bit RBPU = 0x81.7 
.................... #bit INTEDG = 0x81.6 
.................... #bit T0CS = 0x81.5 
.................... #bit T0SE = 0x81.4 
.................... #bit PSA = 0x81.3 
.................... #bit PS2 = 0x81.2 
.................... #bit PS1 = 0x81.1 
.................... #bit PS0 = 0x81.0 
.................... //----- PCON Bits ---------------------------------------------------------- 
....................  
.................... #bit POR = 0x8E.1 
.................... #bit BOD = 0x8E.0 
....................  
.................... //-----------SSPCON2 bits--------------------------------------------- 
....................  
.................... #bit GCEN = 0x91.7 
.................... #bit ACKSTAT = 0x91.6 
.................... #bit ACKDT = 0x91.5 
.................... #bit ACKEN = 0x91.4 
.................... #bit RCEN = 0x91.3 
.................... #bit PEN = 0x91.2 
.................... #bit RSEN = 0x91.1 
.................... #bit SEN = 0x91.0 
....................  
.................... //---------------------SSPSTAT bits------------------------ 
....................  
.................... #bit STAT_SMP = 0x94.7 
.................... #bit STAT_CKE = 0x94.6 
.................... #bit STAT_DA = 0x94.5 
.................... #bit STAT_P = 0x94.4 
.................... #bit STAT_S = 0x94.3 
.................... #bit STAT_RW = 0x94.2 
.................... #bit STAT_UA = 0x94.1 
.................... #bit STAT_BF = 0x94.0 
....................  
.................... //----------------TXSTA bits----------------- 
....................  
.................... #bit CSRC = 0x98.7 
.................... #bit TX9 = 0x98.6 
.................... #bit TXEN = 0x98.5 
.................... #bit SYNC = 0x98.4 
.................... #bit BRGH = 0x98.2 
.................... #bit TRMT = 0x98.1 
.................... #bit TX9D = 0x98.0 
....................  
.................... //--------------ADCON1 bits--------------- 
....................  
.................... #bit ADFM = 0x9F.7 
.................... #bit ADCS2 = 0x9F.6 
.................... #bit PCFG3 = 0x9F.3 
.................... #bit PCFG2 = 0x9F.2 
.................... #bit PCFG1 = 0x9F.1 
.................... #bit PCFG0 = 0x9F.0 
....................  
.................... //-----------EECON1 bits---------- 
....................  
.................... #bit EEPGD = 0x018C.7 
.................... #bit WRERR = 0x018C.3 
.................... #bit WREN = 0x018C.2 
.................... #bit WR = 0x018C.1 
.................... #bit RD = 0x018C.0 
....................  
....................  
.................... #device ADC = 16, WRITE_EEPROM = ASYNC 
....................  
.................... #FUSES NOWDT      //No Watch Dog Timer 
.................... #FUSES NOBROWNOUT //No brownout reset 
.................... #FUSES NOLVP      //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal = 20000000) 
*
0586:  MOVLW  49
0587:  MOVWF  04
0588:  BCF    03.7
0589:  MOVF   00,W
058A:  BTFSC  03.2
058B:  GOTO   599
058C:  MOVLW  06
058D:  MOVWF  78
058E:  CLRF   77
058F:  DECFSZ 77,F
0590:  GOTO   58F
0591:  DECFSZ 78,F
0592:  GOTO   58E
0593:  MOVLW  7B
0594:  MOVWF  77
0595:  DECFSZ 77,F
0596:  GOTO   595
0597:  DECFSZ 00,F
0598:  GOTO   58C
0599:  RETURN
....................  
.................... //================================================== PREPROSECSOR ================================================== 
....................  
.................... // 1 >> on 
.................... #define triac1Out PIN_D0 
.................... #define triac2Out PIN_D1 
.................... #define relayOut PIN_C0 
.................... // 0 >> pressed 
.................... #define btnINCREASE PIN_B4 
.................... #define btnDECREASE PIN_B1 
.................... // 1 >> led on 
.................... #define ledSAFETY PIN_D2 
.................... #define ledSTARTING PIN_D3 
.................... #define ledRINGING PIN_C5 
.................... #define ledBUTTON PIN_D4 
.................... // rst soft 
.................... #define PIN_RESET PIN_B5 
....................  
.................... #byte CMCON = 0x9C 
....................  
.................... #include "floor.c" 
.................... float32 FLOOR(float32 x) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
*
03AE:  BSF    03.5
03AF:  BCF    26.0
....................    y = x; 
03B0:  MOVF   76,W
03B1:  MOVWF  7E
03B2:  MOVF   75,W
03B3:  MOVWF  7D
03B4:  MOVF   74,W
03B5:  MOVWF  7C
03B6:  MOVF   73,W
03B7:  MOVWF  7B
....................  
....................    if (x < 0) 
03B8:  MOVF   76,W
03B9:  MOVWF  2A
03BA:  MOVF   75,W
03BB:  MOVWF  29
03BC:  MOVF   74,W
03BD:  MOVWF  28
03BE:  MOVF   73,W
03BF:  MOVWF  27
03C0:  CLRF   2E
03C1:  CLRF   2D
03C2:  CLRF   2C
03C3:  CLRF   2B
03C4:  BCF    03.5
03C5:  CALL   2B6
03C6:  BTFSS  03.0
03C7:  GOTO   3CE
....................    { 
....................       s = 1; 
03C8:  BSF    03.5
03C9:  BSF    26.0
....................       y = -y; 
03CA:  MOVF   7C,W
03CB:  XORLW  80
03CC:  MOVWF  7C
03CD:  BCF    03.5
....................    } 
....................  
....................    if (y <= 32768.0) 
03CE:  MOVF   7E,W
03CF:  BSF    03.5
03D0:  MOVWF  2A
03D1:  MOVF   7D,W
03D2:  MOVWF  29
03D3:  MOVF   7C,W
03D4:  MOVWF  28
03D5:  MOVF   7B,W
03D6:  MOVWF  27
03D7:  CLRF   2E
03D8:  CLRF   2D
03D9:  CLRF   2C
03DA:  MOVLW  8E
03DB:  MOVWF  2B
03DC:  BCF    03.5
03DD:  CALL   2B6
03DE:  BTFSC  03.0
03DF:  GOTO   3E2
03E0:  BTFSS  03.2
03E1:  GOTO   3FF
....................       res = (float32)(unsigned int16)y; 
03E2:  MOVF   7E,W
03E3:  BSF    03.5
03E4:  MOVWF  2A
03E5:  MOVF   7D,W
03E6:  MOVWF  29
03E7:  MOVF   7C,W
03E8:  MOVWF  28
03E9:  MOVF   7B,W
03EA:  MOVWF  27
03EB:  BCF    03.5
03EC:  CALL   2F7
03ED:  MOVF   79,W
03EE:  BSF    03.5
03EF:  MOVWF  2C
03F0:  MOVF   78,W
03F1:  MOVWF  2B
03F2:  BCF    03.5
03F3:  CALL   318
03F4:  MOVF   7A,W
03F5:  BSF    03.5
03F6:  MOVWF  23
03F7:  MOVF   79,W
03F8:  MOVWF  22
03F9:  MOVF   78,W
03FA:  MOVWF  21
03FB:  MOVF   77,W
03FC:  MOVWF  20
03FD:  GOTO   4D7
03FE:  BCF    03.5
....................  
....................    else if (y < 10000000.0) 
03FF:  MOVF   7E,W
0400:  BSF    03.5
0401:  MOVWF  2A
0402:  MOVF   7D,W
0403:  MOVWF  29
0404:  MOVF   7C,W
0405:  MOVWF  28
0406:  MOVF   7B,W
0407:  MOVWF  27
0408:  MOVLW  80
0409:  MOVWF  2E
040A:  MOVLW  96
040B:  MOVWF  2D
040C:  MOVLW  18
040D:  MOVWF  2C
040E:  MOVLW  96
040F:  MOVWF  2B
0410:  BCF    03.5
0411:  CALL   2B6
0412:  BTFSS  03.0
0413:  GOTO   4CE
....................    { 
....................       l = (unsigned int16)(y * 0.000030517578125); 
0414:  MOVF   7E,W
0415:  BSF    03.5
0416:  MOVWF  2A
0417:  MOVF   7D,W
0418:  MOVWF  29
0419:  MOVF   7C,W
041A:  MOVWF  28
041B:  MOVF   7B,W
041C:  MOVWF  27
041D:  CLRF   2E
041E:  CLRF   2D
041F:  CLRF   2C
0420:  MOVLW  70
0421:  MOVWF  2B
0422:  BCF    03.5
0423:  CALL   337
0424:  MOVF   7A,W
0425:  BSF    03.5
0426:  MOVWF  2A
0427:  MOVF   79,W
0428:  MOVWF  29
0429:  MOVF   78,W
042A:  MOVWF  28
042B:  MOVF   77,W
042C:  MOVWF  27
042D:  BCF    03.5
042E:  CALL   2F7
042F:  MOVF   79,W
0430:  BSF    03.5
0431:  MOVWF  25
0432:  MOVF   78,W
0433:  MOVWF  24
....................       y = 32768.0 * (y * 0.000030517578125 - (float32)l); 
0434:  MOVF   7E,W
0435:  MOVWF  2A
0436:  MOVF   7D,W
0437:  MOVWF  29
0438:  MOVF   7C,W
0439:  MOVWF  28
043A:  MOVF   7B,W
043B:  MOVWF  27
043C:  CLRF   2E
043D:  CLRF   2D
043E:  CLRF   2C
043F:  MOVLW  70
0440:  MOVWF  2B
0441:  BCF    03.5
0442:  CALL   337
0443:  MOVF   7A,W
0444:  BSF    03.5
0445:  MOVWF  2A
0446:  MOVF   79,W
0447:  MOVWF  29
0448:  MOVF   78,W
0449:  MOVWF  28
044A:  MOVF   77,W
044B:  MOVWF  27
044C:  MOVF   25,W
044D:  MOVWF  2C
044E:  MOVF   24,W
044F:  MOVWF  2B
0450:  BCF    03.5
0451:  CALL   318
0452:  BSF    03.1
0453:  BSF    03.5
0454:  MOVF   2A,W
0455:  MOVWF  2E
0456:  MOVF   29,W
0457:  MOVWF  2D
0458:  MOVF   28,W
0459:  MOVWF  2C
045A:  MOVF   27,W
045B:  MOVWF  2B
045C:  MOVF   7A,W
045D:  MOVWF  32
045E:  MOVF   79,W
045F:  MOVWF  31
0460:  MOVF   78,W
0461:  MOVWF  30
0462:  MOVF   77,W
0463:  MOVWF  2F
0464:  BCF    03.5
0465:  CALL   08F
0466:  BSF    03.5
0467:  CLRF   2A
0468:  CLRF   29
0469:  CLRF   28
046A:  MOVLW  8E
046B:  MOVWF  27
046C:  MOVF   7A,W
046D:  MOVWF  2E
046E:  MOVF   79,W
046F:  MOVWF  2D
0470:  MOVF   78,W
0471:  MOVWF  2C
0472:  MOVF   77,W
0473:  MOVWF  2B
0474:  BCF    03.5
0475:  CALL   337
0476:  MOVF   7A,W
0477:  MOVWF  7E
0478:  MOVF   79,W
0479:  MOVWF  7D
047A:  MOVF   78,W
047B:  MOVWF  7C
047C:  MOVF   77,W
047D:  MOVWF  7B
....................       res = 32768.0 * (float32)l; 
047E:  BSF    03.5
047F:  MOVF   25,W
0480:  MOVWF  2C
0481:  MOVF   24,W
0482:  MOVWF  2B
0483:  BCF    03.5
0484:  CALL   318
0485:  BSF    03.5
0486:  CLRF   2A
0487:  CLRF   29
0488:  CLRF   28
0489:  MOVLW  8E
048A:  MOVWF  27
048B:  MOVF   7A,W
048C:  MOVWF  2E
048D:  MOVF   79,W
048E:  MOVWF  2D
048F:  MOVF   78,W
0490:  MOVWF  2C
0491:  MOVF   77,W
0492:  MOVWF  2B
0493:  BCF    03.5
0494:  CALL   337
0495:  MOVF   7A,W
0496:  BSF    03.5
0497:  MOVWF  23
0498:  MOVF   79,W
0499:  MOVWF  22
049A:  MOVF   78,W
049B:  MOVWF  21
049C:  MOVF   77,W
049D:  MOVWF  20
....................       res += (float32)(unsigned int16)y; 
049E:  MOVF   7E,W
049F:  MOVWF  2A
04A0:  MOVF   7D,W
04A1:  MOVWF  29
04A2:  MOVF   7C,W
04A3:  MOVWF  28
04A4:  MOVF   7B,W
04A5:  MOVWF  27
04A6:  BCF    03.5
04A7:  CALL   2F7
04A8:  MOVF   79,W
04A9:  BSF    03.5
04AA:  MOVWF  2C
04AB:  MOVF   78,W
04AC:  MOVWF  2B
04AD:  BCF    03.5
04AE:  CALL   318
04AF:  BCF    03.1
04B0:  BSF    03.5
04B1:  MOVF   23,W
04B2:  MOVWF  2E
04B3:  MOVF   22,W
04B4:  MOVWF  2D
04B5:  MOVF   21,W
04B6:  MOVWF  2C
04B7:  MOVF   20,W
04B8:  MOVWF  2B
04B9:  MOVF   7A,W
04BA:  MOVWF  32
04BB:  MOVF   79,W
04BC:  MOVWF  31
04BD:  MOVF   78,W
04BE:  MOVWF  30
04BF:  MOVF   77,W
04C0:  MOVWF  2F
04C1:  BCF    03.5
04C2:  CALL   08F
04C3:  MOVF   7A,W
04C4:  BSF    03.5
04C5:  MOVWF  23
04C6:  MOVF   79,W
04C7:  MOVWF  22
04C8:  MOVF   78,W
04C9:  MOVWF  21
04CA:  MOVF   77,W
04CB:  MOVWF  20
....................    } 
04CC:  GOTO   4D7
04CD:  BCF    03.5
....................  
....................    else 
....................       res = y; 
04CE:  MOVF   7E,W
04CF:  BSF    03.5
04D0:  MOVWF  23
04D1:  MOVF   7D,W
04D2:  MOVWF  22
04D3:  MOVF   7C,W
04D4:  MOVWF  21
04D5:  MOVF   7B,W
04D6:  MOVWF  20
....................  
....................    y = y - (float32)(unsigned int16)y; 
04D7:  MOVF   7E,W
04D8:  MOVWF  2A
04D9:  MOVF   7D,W
04DA:  MOVWF  29
04DB:  MOVF   7C,W
04DC:  MOVWF  28
04DD:  MOVF   7B,W
04DE:  MOVWF  27
04DF:  BCF    03.5
04E0:  CALL   2F7
04E1:  MOVF   79,W
04E2:  BSF    03.5
04E3:  MOVWF  2C
04E4:  MOVF   78,W
04E5:  MOVWF  2B
04E6:  BCF    03.5
04E7:  CALL   318
04E8:  BSF    03.1
04E9:  MOVF   7E,W
04EA:  BSF    03.5
04EB:  MOVWF  2E
04EC:  MOVF   7D,W
04ED:  MOVWF  2D
04EE:  MOVF   7C,W
04EF:  MOVWF  2C
04F0:  MOVF   7B,W
04F1:  MOVWF  2B
04F2:  MOVF   7A,W
04F3:  MOVWF  32
04F4:  MOVF   79,W
04F5:  MOVWF  31
04F6:  MOVF   78,W
04F7:  MOVWF  30
04F8:  MOVF   77,W
04F9:  MOVWF  2F
04FA:  BCF    03.5
04FB:  CALL   08F
04FC:  MOVF   7A,W
04FD:  MOVWF  7E
04FE:  MOVF   79,W
04FF:  MOVWF  7D
0500:  MOVF   78,W
0501:  MOVWF  7C
0502:  MOVF   77,W
0503:  MOVWF  7B
....................  
....................    if (s) 
0504:  BSF    03.5
0505:  BTFSS  26.0
0506:  GOTO   50A
....................       res = -res; 
0507:  MOVF   21,W
0508:  XORLW  80
0509:  MOVWF  21
....................  
....................    if (y != 0) 
050A:  MOVF   7E,W
050B:  MOVWF  2A
050C:  MOVF   7D,W
050D:  MOVWF  29
050E:  MOVF   7C,W
050F:  MOVWF  28
0510:  MOVF   7B,W
0511:  MOVWF  27
0512:  CLRF   2E
0513:  CLRF   2D
0514:  CLRF   2C
0515:  CLRF   2B
0516:  BCF    03.5
0517:  CALL   2B6
0518:  BTFSC  03.2
0519:  GOTO   537
....................    { 
....................       if (s == 1) 
051A:  BSF    03.5
051B:  BTFSS  26.0
051C:  GOTO   536
....................          res -= 1.0; 
051D:  BSF    03.1
051E:  MOVF   23,W
051F:  MOVWF  2E
0520:  MOVF   22,W
0521:  MOVWF  2D
0522:  MOVF   21,W
0523:  MOVWF  2C
0524:  MOVF   20,W
0525:  MOVWF  2B
0526:  CLRF   32
0527:  CLRF   31
0528:  CLRF   30
0529:  MOVLW  7F
052A:  MOVWF  2F
052B:  BCF    03.5
052C:  CALL   08F
052D:  MOVF   7A,W
052E:  BSF    03.5
052F:  MOVWF  23
0530:  MOVF   79,W
0531:  MOVWF  22
0532:  MOVF   78,W
0533:  MOVWF  21
0534:  MOVF   77,W
0535:  MOVWF  20
0536:  BCF    03.5
....................    } 
....................    if (x == 0) 
0537:  MOVF   76,W
0538:  BSF    03.5
0539:  MOVWF  2A
053A:  MOVF   75,W
053B:  MOVWF  29
053C:  MOVF   74,W
053D:  MOVWF  28
053E:  MOVF   73,W
053F:  MOVWF  27
0540:  CLRF   2E
0541:  CLRF   2D
0542:  CLRF   2C
0543:  CLRF   2B
0544:  BCF    03.5
0545:  CALL   2B6
0546:  BTFSS  03.2
0547:  GOTO   54E
....................       res = 0; 
0548:  BSF    03.5
0549:  CLRF   23
054A:  CLRF   22
054B:  CLRF   21
054C:  CLRF   20
054D:  BCF    03.5
....................  
....................    return (res); 
054E:  BSF    03.5
054F:  MOVF   20,W
0550:  MOVWF  77
0551:  MOVF   21,W
0552:  MOVWF  78
0553:  MOVF   22,W
0554:  MOVWF  79
0555:  MOVF   23,W
0556:  MOVWF  7A
0557:  BCF    03.5
0558:  RETURN
.................... } 
....................  
....................  
.................... //================================================== VARIABLES ================================================== 
....................  
.................... // set angle (10 levels). more angle, weaker motor 
.................... volatile int32 angleStarter = 1; 
.................... volatile int32 angleRingTheBell = 6; 
.................... // volatile int32 angleStarter = read_eeprom(0x00); 
.................... // volatile int32 angleRingTheBell = read_eeprom(0x01); 
....................  
.................... volatile int32 valTimer0SetStarter = (int32)FLOOR((13.1072 - angleStarter) / 0.0512) - 1; 
.................... volatile int32 valTimer0SetRingTheBell = (int32)FLOOR((13.1072 - angleRingTheBell) / 0.0512) - 1; 
....................  
.................... volatile signed int16 count = 0; 
.................... int16 iTimer2OverFlow; 
.................... int1 flagForward = true, flagStarter = true, flagSTOP = true; 
....................  
.................... //================================================== ISR Func() ================================================== 
....................  
.................... // #INT_COMP 
.................... // void isrComparator() 
.................... // { // A mismatch condition will continue to set flag bit CMIF. Reading CMCON will end the mismatch condition and allow flag bit CMIF to be cleared 
.................... //    char charas = CMCON; 
.................... //    output_low(relayOut);   // safety switch 
.................... //    output_high(PIN_RESET); // reset mcu 
.................... // } 
....................  
.................... #INT_EXT 
.................... void ext_isr() 
.................... { 
....................    // cross zero point detector 50Hz >> 1/50/2 sec per half pulse after diode brighet 
....................  
....................    output_low(triac1Out); 
*
0048:  BSF    03.5
0049:  BCF    08.0
004A:  BCF    03.5
004B:  BCF    08.0
....................    output_low(triac2Out); 
004C:  BSF    03.5
004D:  BCF    08.1
004E:  BCF    03.5
004F:  BCF    08.1
....................  
....................    if (flagStarter) 
0050:  BTFSS  3C.1
0051:  GOTO   055
....................       set_timer0(valTimer0SetStarter); 
0052:  MOVF   30,W
0053:  MOVWF  01
0054:  GOTO   057
....................    else 
....................       set_timer0(valTimer0SetRingTheBell); 
0055:  MOVF   34,W
0056:  MOVWF  01
....................  
....................    clear_interrupt(INT_TIMER0); 
0057:  BCF    0B.2
....................    enable_interrupts(INT_TIMER0); 
0058:  BSF    0B.5
....................    clear_interrupt(INT_EXT); // waiting for next EXT 
0059:  BCF    0B.1
.................... } 
....................  
005A:  BCF    0B.1
005B:  BCF    0A.3
005C:  BCF    0A.4
005D:  GOTO   02B
.................... #INT_TIMER0 
.................... void timer0_isr() 
.................... { 
....................    if (flagForward && !flagSTOP) 
005E:  BTFSS  3C.0
005F:  GOTO   067
0060:  BTFSC  3C.2
0061:  GOTO   067
....................       output_high(triac1Out); 
0062:  BSF    03.5
0063:  BCF    08.0
0064:  BCF    03.5
0065:  BSF    08.0
0066:  GOTO   06F
....................    else if (!flagForward && !flagSTOP) 
0067:  BTFSC  3C.0
0068:  GOTO   06F
0069:  BTFSC  3C.2
006A:  GOTO   06F
....................       output_high(triac2Out); 
006B:  BSF    03.5
006C:  BCF    08.1
006D:  BCF    03.5
006E:  BSF    08.1
....................  
....................    // set_timer0(200.00); 
....................    disable_interrupts(INT_TIMER0); 
006F:  BCF    0B.5
.................... } 
....................  
0070:  BCF    0B.2
0071:  BCF    0A.3
0072:  BCF    0A.4
0073:  GOTO   02B
.................... #INT_TIMER2 
.................... void timer2_isr() 
.................... { 
....................    if (!(--iTimer2OverFlow)) 
*
0800:  MOVF   3A,W
0801:  BTFSC  03.2
0802:  DECF   3B,F
0803:  DECF   3A,F
0804:  MOVF   3A,W
0805:  IORWF  3B,W
0806:  BTFSS  03.2
0807:  GOTO   2D3
....................    { 
....................       // reset neu quay qua 4 vong 
....................       if (flagForward) 
0808:  BTFSS  3C.0
0809:  GOTO   022
....................       { 
....................          if (count >= 1600) // (+)4 rotate 
080A:  BTFSC  39.7
080B:  GOTO   021
080C:  MOVF   39,W
080D:  SUBLW  05
080E:  BTFSC  03.0
080F:  GOTO   021
0810:  XORLW  FF
0811:  BTFSS  03.2
0812:  GOTO   017
0813:  MOVF   38,W
0814:  SUBLW  3F
0815:  BTFSC  03.0
0816:  GOTO   021
....................          { 
....................             output_low(relayOut);   // safety switch 
0817:  BCF    3D.0
0818:  MOVF   3D,W
0819:  BSF    03.5
081A:  MOVWF  07
081B:  BCF    03.5
081C:  BCF    07.0
....................             output_high(PIN_RESET); // reset mcu 
081D:  BSF    03.5
081E:  BCF    06.5
081F:  BCF    03.5
0820:  BSF    06.5
....................          } 
....................       } 
0821:  GOTO   038
....................       else 
....................       { 
....................          if (count <= -1600) // (-)4 rotate 
0822:  BTFSS  39.7
0823:  GOTO   038
0824:  MOVF   39,W
0825:  SUBLW  F9
0826:  BTFSS  03.0
0827:  GOTO   038
0828:  BTFSS  03.2
0829:  GOTO   02E
082A:  MOVF   38,W
082B:  SUBLW  C0
082C:  BTFSS  03.0
082D:  GOTO   038
....................          { 
....................             output_low(relayOut);   // safety switch 
082E:  BCF    3D.0
082F:  MOVF   3D,W
0830:  BSF    03.5
0831:  MOVWF  07
0832:  BCF    03.5
0833:  BCF    07.0
....................             output_high(PIN_RESET); // reset mcu 
0834:  BSF    03.5
0835:  BCF    06.5
0836:  BCF    03.5
0837:  BSF    06.5
....................          } 
....................       } 
....................  
....................       if (!input(btnDECREASE)) 
0838:  BSF    03.5
0839:  BSF    06.1
083A:  BCF    03.5
083B:  BTFSC  06.1
083C:  GOTO   176
....................       { 
....................          if (flagStarter) 
083D:  BTFSS  3C.1
083E:  GOTO   0CC
....................          { 
....................             if (angleStarter < 9) 
083F:  MOVF   2B,F
0840:  BTFSS  03.2
0841:  GOTO   0CB
0842:  MOVF   2A,F
0843:  BTFSS  03.2
0844:  GOTO   0CB
0845:  MOVF   29,F
0846:  BTFSS  03.2
0847:  GOTO   0CB
0848:  MOVF   28,W
0849:  SUBLW  08
084A:  BTFSS  03.0
084B:  GOTO   0CB
....................             { 
....................                ++angleStarter; 
084C:  MOVLW  01
084D:  ADDWF  28,F
084E:  BTFSC  03.0
084F:  INCF   29,F
0850:  BTFSC  03.2
0851:  INCF   2A,F
0852:  BTFSC  03.2
0853:  INCF   2B,F
....................                // write_eeprom(0x00, ++angleStarter); 
....................                valTimer0SetStarter = (int32)FLOOR((13.1072 - angleStarter) / 0.0512) - 1; 
0854:  MOVF   2B,W
0855:  MOVWF  6A
0856:  MOVF   2A,W
0857:  MOVWF  69
0858:  MOVF   29,W
0859:  MOVWF  68
085A:  MOVF   28,W
085B:  MOVWF  67
085C:  BCF    0A.3
085D:  CALL   074
085E:  BSF    0A.3
085F:  BSF    03.1
0860:  MOVLW  17
0861:  BSF    03.5
0862:  MOVWF  2E
0863:  MOVLW  B7
0864:  MOVWF  2D
0865:  MOVLW  51
0866:  MOVWF  2C
0867:  MOVLW  82
0868:  MOVWF  2B
0869:  MOVF   7A,W
086A:  MOVWF  32
086B:  MOVF   79,W
086C:  MOVWF  31
086D:  MOVF   78,W
086E:  MOVWF  30
086F:  MOVF   77,W
0870:  MOVWF  2F
0871:  BCF    0A.3
0872:  BCF    03.5
0873:  CALL   08F
0874:  BSF    0A.3
0875:  MOVF   7A,W
0876:  MOVWF  6A
0877:  MOVF   79,W
0878:  MOVWF  69
0879:  MOVF   78,W
087A:  MOVWF  68
087B:  MOVF   77,W
087C:  MOVWF  67
087D:  MOVF   6A,W
087E:  MOVWF  6E
087F:  MOVF   69,W
0880:  MOVWF  6D
0881:  MOVF   68,W
0882:  MOVWF  6C
0883:  MOVF   67,W
0884:  MOVWF  6B
0885:  MOVLW  17
0886:  MOVWF  72
0887:  MOVLW  B7
0888:  MOVWF  71
0889:  MOVLW  51
088A:  MOVWF  70
088B:  MOVLW  7A
088C:  MOVWF  6F
088D:  BCF    0A.3
088E:  CALL   1D5
088F:  BSF    0A.3
0890:  MOVF   7A,W
0891:  MOVWF  6A
0892:  MOVF   79,W
0893:  MOVWF  69
0894:  MOVF   78,W
0895:  MOVWF  68
0896:  MOVF   77,W
0897:  MOVWF  67
0898:  MOVF   6A,W
0899:  MOVWF  76
089A:  MOVF   69,W
089B:  MOVWF  75
089C:  MOVF   68,W
089D:  MOVWF  74
089E:  MOVF   67,W
089F:  MOVWF  73
08A0:  BCF    0A.3
08A1:  CALL   3AE
08A2:  BSF    0A.3
08A3:  MOVF   7A,W
08A4:  MOVWF  6A
08A5:  MOVF   79,W
08A6:  MOVWF  69
08A7:  MOVF   78,W
08A8:  MOVWF  68
08A9:  MOVF   77,W
08AA:  MOVWF  67
08AB:  BCF    0A.3
08AC:  CALL   559
08AD:  BSF    0A.3
08AE:  MOVF   7A,W
08AF:  MOVWF  6A
08B0:  MOVF   79,W
08B1:  MOVWF  69
08B2:  MOVF   78,W
08B3:  MOVWF  68
08B4:  MOVF   77,W
08B5:  MOVWF  67
08B6:  MOVLW  01
08B7:  SUBWF  67,W
08B8:  MOVWF  30
08B9:  MOVF   68,W
08BA:  MOVWF  31
08BB:  MOVLW  00
08BC:  BTFSS  03.0
08BD:  MOVLW  01
08BE:  SUBWF  31,F
08BF:  MOVF   69,W
08C0:  MOVWF  32
08C1:  MOVLW  00
08C2:  BTFSS  03.0
08C3:  MOVLW  01
08C4:  SUBWF  32,F
08C5:  MOVF   6A,W
08C6:  MOVWF  33
08C7:  MOVLW  00
08C8:  BTFSS  03.0
08C9:  MOVLW  01
08CA:  SUBWF  33,F
....................             } 
....................          } 
08CB:  GOTO   175
....................          else 
....................          { 
....................             if (angleRingTheBell < 9) 
08CC:  MOVF   2F,F
08CD:  BTFSS  03.2
08CE:  GOTO   175
08CF:  MOVF   2E,F
08D0:  BTFSS  03.2
08D1:  GOTO   175
08D2:  MOVF   2D,F
08D3:  BTFSS  03.2
08D4:  GOTO   175
08D5:  MOVF   2C,W
08D6:  SUBLW  08
08D7:  BTFSS  03.0
08D8:  GOTO   175
....................             { 
....................                write_eeprom(0x01, ++angleRingTheBell); 
08D9:  MOVLW  01
08DA:  ADDWF  2C,F
08DB:  BTFSC  03.0
08DC:  INCF   2D,F
08DD:  BTFSC  03.2
08DE:  INCF   2E,F
08DF:  BTFSC  03.2
08E0:  INCF   2F,F
08E1:  BSF    03.5
08E2:  BSF    03.6
08E3:  BTFSC  0C.1
08E4:  GOTO   0E3
08E5:  BCF    0C.2
08E6:  BCF    03.5
08E7:  BCF    03.6
08E8:  MOVF   0B,W
08E9:  MOVWF  77
08EA:  BCF    0B.7
08EB:  MOVLW  01
08EC:  BSF    03.6
08ED:  MOVWF  0D
08EE:  BCF    03.6
08EF:  MOVF   2C,W
08F0:  BSF    03.6
08F1:  MOVWF  0C
08F2:  BSF    03.5
08F3:  BCF    0C.7
08F4:  BSF    0C.2
08F5:  MOVLW  55
08F6:  MOVWF  0D
08F7:  MOVLW  AA
08F8:  MOVWF  0D
08F9:  BSF    0C.1
08FA:  MOVF   77,W
08FB:  BCF    03.5
08FC:  BCF    03.6
08FD:  IORWF  0B,F
....................                valTimer0SetRingTheBell = (int32)FLOOR((13.1072 - angleRingTheBell) / 0.0512) - 1; 
08FE:  MOVF   2F,W
08FF:  MOVWF  6A
0900:  MOVF   2E,W
0901:  MOVWF  69
0902:  MOVF   2D,W
0903:  MOVWF  68
0904:  MOVF   2C,W
0905:  MOVWF  67
0906:  BCF    0A.3
0907:  CALL   074
0908:  BSF    0A.3
0909:  BSF    03.1
090A:  MOVLW  17
090B:  BSF    03.5
090C:  MOVWF  2E
090D:  MOVLW  B7
090E:  MOVWF  2D
090F:  MOVLW  51
0910:  MOVWF  2C
0911:  MOVLW  82
0912:  MOVWF  2B
0913:  MOVF   7A,W
0914:  MOVWF  32
0915:  MOVF   79,W
0916:  MOVWF  31
0917:  MOVF   78,W
0918:  MOVWF  30
0919:  MOVF   77,W
091A:  MOVWF  2F
091B:  BCF    0A.3
091C:  BCF    03.5
091D:  CALL   08F
091E:  BSF    0A.3
091F:  MOVF   7A,W
0920:  MOVWF  6A
0921:  MOVF   79,W
0922:  MOVWF  69
0923:  MOVF   78,W
0924:  MOVWF  68
0925:  MOVF   77,W
0926:  MOVWF  67
0927:  MOVF   6A,W
0928:  MOVWF  6E
0929:  MOVF   69,W
092A:  MOVWF  6D
092B:  MOVF   68,W
092C:  MOVWF  6C
092D:  MOVF   67,W
092E:  MOVWF  6B
092F:  MOVLW  17
0930:  MOVWF  72
0931:  MOVLW  B7
0932:  MOVWF  71
0933:  MOVLW  51
0934:  MOVWF  70
0935:  MOVLW  7A
0936:  MOVWF  6F
0937:  BCF    0A.3
0938:  CALL   1D5
0939:  BSF    0A.3
093A:  MOVF   7A,W
093B:  MOVWF  6A
093C:  MOVF   79,W
093D:  MOVWF  69
093E:  MOVF   78,W
093F:  MOVWF  68
0940:  MOVF   77,W
0941:  MOVWF  67
0942:  MOVF   6A,W
0943:  MOVWF  76
0944:  MOVF   69,W
0945:  MOVWF  75
0946:  MOVF   68,W
0947:  MOVWF  74
0948:  MOVF   67,W
0949:  MOVWF  73
094A:  BCF    0A.3
094B:  CALL   3AE
094C:  BSF    0A.3
094D:  MOVF   7A,W
094E:  MOVWF  6A
094F:  MOVF   79,W
0950:  MOVWF  69
0951:  MOVF   78,W
0952:  MOVWF  68
0953:  MOVF   77,W
0954:  MOVWF  67
0955:  BCF    0A.3
0956:  CALL   559
0957:  BSF    0A.3
0958:  MOVF   7A,W
0959:  MOVWF  6A
095A:  MOVF   79,W
095B:  MOVWF  69
095C:  MOVF   78,W
095D:  MOVWF  68
095E:  MOVF   77,W
095F:  MOVWF  67
0960:  MOVLW  01
0961:  SUBWF  67,W
0962:  MOVWF  34
0963:  MOVF   68,W
0964:  MOVWF  35
0965:  MOVLW  00
0966:  BTFSS  03.0
0967:  MOVLW  01
0968:  SUBWF  35,F
0969:  MOVF   69,W
096A:  MOVWF  36
096B:  MOVLW  00
096C:  BTFSS  03.0
096D:  MOVLW  01
096E:  SUBWF  36,F
096F:  MOVF   6A,W
0970:  MOVWF  37
0971:  MOVLW  00
0972:  BTFSS  03.0
0973:  MOVLW  01
0974:  SUBWF  37,F
....................             } 
....................          } 
....................       } 
0975:  GOTO   2CF
....................       else if (!input(btnINCREASE)) 
0976:  BSF    03.5
0977:  BSF    06.4
0978:  BCF    03.5
0979:  BTFSC  06.4
097A:  GOTO   2CF
....................       { 
....................          if (flagStarter) 
097B:  BTFSS  3C.1
097C:  GOTO   226
....................          { 
....................             if (angleStarter > 1) 
097D:  MOVF   2B,F
097E:  BTFSS  03.2
097F:  GOTO   18A
0980:  MOVF   2A,F
0981:  BTFSS  03.2
0982:  GOTO   18A
0983:  MOVF   29,F
0984:  BTFSS  03.2
0985:  GOTO   18A
0986:  MOVF   28,W
0987:  SUBLW  01
0988:  BTFSC  03.0
0989:  GOTO   225
....................             { 
....................                write_eeprom(0x00, --angleStarter); 
098A:  MOVLW  FF
098B:  ADDWF  28,F
098C:  BTFSS  03.0
098D:  ADDWF  29,F
098E:  BTFSS  03.0
098F:  ADDWF  2A,F
0990:  BTFSS  03.0
0991:  ADDWF  2B,F
0992:  BSF    03.5
0993:  BSF    03.6
0994:  BTFSC  0C.1
0995:  GOTO   194
0996:  BCF    0C.2
0997:  BCF    03.5
0998:  BCF    03.6
0999:  MOVF   0B,W
099A:  MOVWF  77
099B:  BCF    0B.7
099C:  BSF    03.6
099D:  CLRF   0D
099E:  BCF    03.6
099F:  MOVF   28,W
09A0:  BSF    03.6
09A1:  MOVWF  0C
09A2:  BSF    03.5
09A3:  BCF    0C.7
09A4:  BSF    0C.2
09A5:  MOVLW  55
09A6:  MOVWF  0D
09A7:  MOVLW  AA
09A8:  MOVWF  0D
09A9:  BSF    0C.1
09AA:  MOVF   77,W
09AB:  BCF    03.5
09AC:  BCF    03.6
09AD:  IORWF  0B,F
....................                valTimer0SetStarter = (int32)FLOOR((13.1072 - angleStarter) / 0.0512) - 1; 
09AE:  MOVF   2B,W
09AF:  MOVWF  6A
09B0:  MOVF   2A,W
09B1:  MOVWF  69
09B2:  MOVF   29,W
09B3:  MOVWF  68
09B4:  MOVF   28,W
09B5:  MOVWF  67
09B6:  BCF    0A.3
09B7:  CALL   074
09B8:  BSF    0A.3
09B9:  BSF    03.1
09BA:  MOVLW  17
09BB:  BSF    03.5
09BC:  MOVWF  2E
09BD:  MOVLW  B7
09BE:  MOVWF  2D
09BF:  MOVLW  51
09C0:  MOVWF  2C
09C1:  MOVLW  82
09C2:  MOVWF  2B
09C3:  MOVF   7A,W
09C4:  MOVWF  32
09C5:  MOVF   79,W
09C6:  MOVWF  31
09C7:  MOVF   78,W
09C8:  MOVWF  30
09C9:  MOVF   77,W
09CA:  MOVWF  2F
09CB:  BCF    0A.3
09CC:  BCF    03.5
09CD:  CALL   08F
09CE:  BSF    0A.3
09CF:  MOVF   7A,W
09D0:  MOVWF  6A
09D1:  MOVF   79,W
09D2:  MOVWF  69
09D3:  MOVF   78,W
09D4:  MOVWF  68
09D5:  MOVF   77,W
09D6:  MOVWF  67
09D7:  MOVF   6A,W
09D8:  MOVWF  6E
09D9:  MOVF   69,W
09DA:  MOVWF  6D
09DB:  MOVF   68,W
09DC:  MOVWF  6C
09DD:  MOVF   67,W
09DE:  MOVWF  6B
09DF:  MOVLW  17
09E0:  MOVWF  72
09E1:  MOVLW  B7
09E2:  MOVWF  71
09E3:  MOVLW  51
09E4:  MOVWF  70
09E5:  MOVLW  7A
09E6:  MOVWF  6F
09E7:  BCF    0A.3
09E8:  CALL   1D5
09E9:  BSF    0A.3
09EA:  MOVF   7A,W
09EB:  MOVWF  6A
09EC:  MOVF   79,W
09ED:  MOVWF  69
09EE:  MOVF   78,W
09EF:  MOVWF  68
09F0:  MOVF   77,W
09F1:  MOVWF  67
09F2:  MOVF   6A,W
09F3:  MOVWF  76
09F4:  MOVF   69,W
09F5:  MOVWF  75
09F6:  MOVF   68,W
09F7:  MOVWF  74
09F8:  MOVF   67,W
09F9:  MOVWF  73
09FA:  BCF    0A.3
09FB:  CALL   3AE
09FC:  BSF    0A.3
09FD:  MOVF   7A,W
09FE:  MOVWF  6A
09FF:  MOVF   79,W
0A00:  MOVWF  69
0A01:  MOVF   78,W
0A02:  MOVWF  68
0A03:  MOVF   77,W
0A04:  MOVWF  67
0A05:  BCF    0A.3
0A06:  CALL   559
0A07:  BSF    0A.3
0A08:  MOVF   7A,W
0A09:  MOVWF  6A
0A0A:  MOVF   79,W
0A0B:  MOVWF  69
0A0C:  MOVF   78,W
0A0D:  MOVWF  68
0A0E:  MOVF   77,W
0A0F:  MOVWF  67
0A10:  MOVLW  01
0A11:  SUBWF  67,W
0A12:  MOVWF  30
0A13:  MOVF   68,W
0A14:  MOVWF  31
0A15:  MOVLW  00
0A16:  BTFSS  03.0
0A17:  MOVLW  01
0A18:  SUBWF  31,F
0A19:  MOVF   69,W
0A1A:  MOVWF  32
0A1B:  MOVLW  00
0A1C:  BTFSS  03.0
0A1D:  MOVLW  01
0A1E:  SUBWF  32,F
0A1F:  MOVF   6A,W
0A20:  MOVWF  33
0A21:  MOVLW  00
0A22:  BTFSS  03.0
0A23:  MOVLW  01
0A24:  SUBWF  33,F
....................             } 
....................          } 
0A25:  GOTO   2CF
....................          else 
....................          { 
....................             if (angleRingTheBell > 1) 
0A26:  MOVF   2F,F
0A27:  BTFSS  03.2
0A28:  GOTO   233
0A29:  MOVF   2E,F
0A2A:  BTFSS  03.2
0A2B:  GOTO   233
0A2C:  MOVF   2D,F
0A2D:  BTFSS  03.2
0A2E:  GOTO   233
0A2F:  MOVF   2C,W
0A30:  SUBLW  01
0A31:  BTFSC  03.0
0A32:  GOTO   2CF
....................             { 
....................                write_eeprom(0x01, --angleRingTheBell); 
0A33:  MOVLW  FF
0A34:  ADDWF  2C,F
0A35:  BTFSS  03.0
0A36:  ADDWF  2D,F
0A37:  BTFSS  03.0
0A38:  ADDWF  2E,F
0A39:  BTFSS  03.0
0A3A:  ADDWF  2F,F
0A3B:  BSF    03.5
0A3C:  BSF    03.6
0A3D:  BTFSC  0C.1
0A3E:  GOTO   23D
0A3F:  BCF    0C.2
0A40:  BCF    03.5
0A41:  BCF    03.6
0A42:  MOVF   0B,W
0A43:  MOVWF  77
0A44:  BCF    0B.7
0A45:  MOVLW  01
0A46:  BSF    03.6
0A47:  MOVWF  0D
0A48:  BCF    03.6
0A49:  MOVF   2C,W
0A4A:  BSF    03.6
0A4B:  MOVWF  0C
0A4C:  BSF    03.5
0A4D:  BCF    0C.7
0A4E:  BSF    0C.2
0A4F:  MOVLW  55
0A50:  MOVWF  0D
0A51:  MOVLW  AA
0A52:  MOVWF  0D
0A53:  BSF    0C.1
0A54:  MOVF   77,W
0A55:  BCF    03.5
0A56:  BCF    03.6
0A57:  IORWF  0B,F
....................                valTimer0SetRingTheBell = (int32)FLOOR((13.1072 - angleRingTheBell) / 0.0512) - 1; 
0A58:  MOVF   2F,W
0A59:  MOVWF  6A
0A5A:  MOVF   2E,W
0A5B:  MOVWF  69
0A5C:  MOVF   2D,W
0A5D:  MOVWF  68
0A5E:  MOVF   2C,W
0A5F:  MOVWF  67
0A60:  BCF    0A.3
0A61:  CALL   074
0A62:  BSF    0A.3
0A63:  BSF    03.1
0A64:  MOVLW  17
0A65:  BSF    03.5
0A66:  MOVWF  2E
0A67:  MOVLW  B7
0A68:  MOVWF  2D
0A69:  MOVLW  51
0A6A:  MOVWF  2C
0A6B:  MOVLW  82
0A6C:  MOVWF  2B
0A6D:  MOVF   7A,W
0A6E:  MOVWF  32
0A6F:  MOVF   79,W
0A70:  MOVWF  31
0A71:  MOVF   78,W
0A72:  MOVWF  30
0A73:  MOVF   77,W
0A74:  MOVWF  2F
0A75:  BCF    0A.3
0A76:  BCF    03.5
0A77:  CALL   08F
0A78:  BSF    0A.3
0A79:  MOVF   7A,W
0A7A:  MOVWF  6A
0A7B:  MOVF   79,W
0A7C:  MOVWF  69
0A7D:  MOVF   78,W
0A7E:  MOVWF  68
0A7F:  MOVF   77,W
0A80:  MOVWF  67
0A81:  MOVF   6A,W
0A82:  MOVWF  6E
0A83:  MOVF   69,W
0A84:  MOVWF  6D
0A85:  MOVF   68,W
0A86:  MOVWF  6C
0A87:  MOVF   67,W
0A88:  MOVWF  6B
0A89:  MOVLW  17
0A8A:  MOVWF  72
0A8B:  MOVLW  B7
0A8C:  MOVWF  71
0A8D:  MOVLW  51
0A8E:  MOVWF  70
0A8F:  MOVLW  7A
0A90:  MOVWF  6F
0A91:  BCF    0A.3
0A92:  CALL   1D5
0A93:  BSF    0A.3
0A94:  MOVF   7A,W
0A95:  MOVWF  6A
0A96:  MOVF   79,W
0A97:  MOVWF  69
0A98:  MOVF   78,W
0A99:  MOVWF  68
0A9A:  MOVF   77,W
0A9B:  MOVWF  67
0A9C:  MOVF   6A,W
0A9D:  MOVWF  76
0A9E:  MOVF   69,W
0A9F:  MOVWF  75
0AA0:  MOVF   68,W
0AA1:  MOVWF  74
0AA2:  MOVF   67,W
0AA3:  MOVWF  73
0AA4:  BCF    0A.3
0AA5:  CALL   3AE
0AA6:  BSF    0A.3
0AA7:  MOVF   7A,W
0AA8:  MOVWF  6A
0AA9:  MOVF   79,W
0AAA:  MOVWF  69
0AAB:  MOVF   78,W
0AAC:  MOVWF  68
0AAD:  MOVF   77,W
0AAE:  MOVWF  67
0AAF:  BCF    0A.3
0AB0:  CALL   559
0AB1:  BSF    0A.3
0AB2:  MOVF   7A,W
0AB3:  MOVWF  6A
0AB4:  MOVF   79,W
0AB5:  MOVWF  69
0AB6:  MOVF   78,W
0AB7:  MOVWF  68
0AB8:  MOVF   77,W
0AB9:  MOVWF  67
0ABA:  MOVLW  01
0ABB:  SUBWF  67,W
0ABC:  MOVWF  34
0ABD:  MOVF   68,W
0ABE:  MOVWF  35
0ABF:  MOVLW  00
0AC0:  BTFSS  03.0
0AC1:  MOVLW  01
0AC2:  SUBWF  35,F
0AC3:  MOVF   69,W
0AC4:  MOVWF  36
0AC5:  MOVLW  00
0AC6:  BTFSS  03.0
0AC7:  MOVLW  01
0AC8:  SUBWF  36,F
0AC9:  MOVF   6A,W
0ACA:  MOVWF  37
0ACB:  MOVLW  00
0ACC:  BTFSS  03.0
0ACD:  MOVLW  01
0ACE:  SUBWF  37,F
....................             } 
....................          } 
....................       } 
....................  
....................       iTimer2OverFlow = 7660; // 100ms every command 
0ACF:  MOVLW  1D
0AD0:  MOVWF  3B
0AD1:  MOVLW  EC
0AD2:  MOVWF  3A
....................    } 
.................... } 
....................  
0AD3:  BCF    0C.1
0AD4:  BCF    0A.3
0AD5:  BCF    0A.4
0AD6:  GOTO   02B
.................... #INT_CCP1 
.................... void ccp1_isr() 
.................... { 
....................    if (RC1) 
*
0578:  BTFSS  07.1
0579:  GOTO   57E
....................       ++count; 
057A:  INCF   38,F
057B:  BTFSC  03.2
057C:  INCF   39,F
057D:  GOTO   582
....................    else 
....................       --count; 
057E:  MOVF   38,W
057F:  BTFSC  03.2
0580:  DECF   39,F
0581:  DECF   38,F
....................    // clear_interrupt(INT_CCP1); 
0582:  BCF    0C.2
0583:  BCF    0A.3
0584:  BCF    0A.4
0585:  GOTO   02B
.................... } 
....................  
.................... //================================================== Func() ================================================== 
....................  
.................... void FORWARD() 
.................... { 
....................    output_low(triac2Out); 
*
05EF:  BSF    03.5
05F0:  BCF    08.1
05F1:  BCF    03.5
05F2:  BCF    08.1
....................  
....................    flagForward = true; 
05F3:  BSF    3C.0
....................    flagSTOP = false; 
05F4:  BCF    3C.2
05F5:  RETURN
.................... } 
.................... void REVERSE() 
.................... { 
....................    output_low(triac1Out); 
*
0600:  BSF    03.5
0601:  BCF    08.0
0602:  BCF    03.5
0603:  BCF    08.0
....................    flagForward = flagSTOP = false; 
0604:  BCF    3C.2
0605:  BCF    3C.0
0606:  RETURN
.................... } 
.................... void STOP() 
.................... { 
....................    flagSTOP = true; 
*
05F6:  BSF    3C.2
....................    output_low(triac1Out); 
05F7:  BSF    03.5
05F8:  BCF    08.0
05F9:  BCF    03.5
05FA:  BCF    08.0
....................    output_low(triac2Out); 
05FB:  BSF    03.5
05FC:  BCF    08.1
05FD:  BCF    03.5
05FE:  BCF    08.1
05FF:  RETURN
.................... } 
....................  
.................... void starter() 
.................... { 
....................    // half rotate 
....................    while (count <= 200) 
*
0607:  BTFSC  39.7
0608:  GOTO   610
0609:  MOVF   39,F
060A:  BTFSS  03.2
060B:  GOTO   612
060C:  MOVF   38,W
060D:  SUBLW  C8
060E:  BTFSS  03.0
060F:  GOTO   612
....................       FORWARD(); 
0610:  CALL   5EF
0611:  GOTO   607
....................    STOP(); 
0612:  CALL   5F6
....................    while (count >= 0) 
0613:  BTFSC  39.7
0614:  GOTO   617
....................       STOP(); 
0615:  CALL   5F6
0616:  GOTO   613
....................    while (count >= -200) 
0617:  BTFSS  39.7
0618:  GOTO   624
0619:  MOVF   39,W
061A:  SUBLW  FE
061B:  BTFSC  03.0
061C:  GOTO   626
061D:  XORLW  FF
061E:  BTFSS  03.2
061F:  GOTO   624
0620:  MOVF   38,W
0621:  SUBLW  37
0622:  BTFSC  03.0
0623:  GOTO   626
....................       REVERSE(); 
0624:  CALL   600
0625:  GOTO   617
....................    STOP(); 
0626:  CALL   5F6
....................    while (count <= 0) 
0627:  BTFSC  39.7
0628:  GOTO   630
0629:  MOVF   39,F
062A:  BTFSS  03.2
062B:  GOTO   632
062C:  MOVF   38,W
062D:  SUBLW  00
062E:  BTFSS  03.0
062F:  GOTO   632
....................       STOP(); 
0630:  CALL   5F6
0631:  GOTO   627
....................  
....................    // 1 rotate 
....................    while (count <= 400) 
0632:  BTFSC  39.7
0633:  GOTO   63E
0634:  MOVF   39,W
0635:  SUBLW  01
0636:  BTFSS  03.0
0637:  GOTO   640
0638:  BTFSS  03.2
0639:  GOTO   63E
063A:  MOVF   38,W
063B:  SUBLW  90
063C:  BTFSS  03.0
063D:  GOTO   640
....................       FORWARD(); 
063E:  CALL   5EF
063F:  GOTO   632
....................    STOP(); 
0640:  CALL   5F6
....................    while (count >= 0) 
0641:  BTFSC  39.7
0642:  GOTO   645
....................       STOP(); 
0643:  CALL   5F6
0644:  GOTO   641
....................    while (count >= -400) 
0645:  BTFSS  39.7
0646:  GOTO   652
0647:  MOVF   39,W
0648:  SUBLW  FD
0649:  BTFSC  03.0
064A:  GOTO   654
064B:  XORLW  FF
064C:  BTFSS  03.2
064D:  GOTO   652
064E:  MOVF   38,W
064F:  SUBLW  6F
0650:  BTFSC  03.0
0651:  GOTO   654
....................       REVERSE(); 
0652:  CALL   600
0653:  GOTO   645
....................    STOP(); 
0654:  CALL   5F6
....................    while (count <= 0) 
0655:  BTFSC  39.7
0656:  GOTO   65E
0657:  MOVF   39,F
0658:  BTFSS  03.2
0659:  GOTO   660
065A:  MOVF   38,W
065B:  SUBLW  00
065C:  BTFSS  03.0
065D:  GOTO   660
....................       STOP(); 
065E:  CALL   5F6
065F:  GOTO   655
....................  
....................    // 2 rotates 
....................    while (count <= 800) 
0660:  BTFSC  39.7
0661:  GOTO   66C
0662:  MOVF   39,W
0663:  SUBLW  03
0664:  BTFSS  03.0
0665:  GOTO   66E
0666:  BTFSS  03.2
0667:  GOTO   66C
0668:  MOVF   38,W
0669:  SUBLW  20
066A:  BTFSS  03.0
066B:  GOTO   66E
....................       FORWARD(); 
066C:  CALL   5EF
066D:  GOTO   660
....................    STOP(); 
066E:  CALL   5F6
....................    while (count >= 0) 
066F:  BTFSC  39.7
0670:  GOTO   673
....................       STOP(); 
0671:  CALL   5F6
0672:  GOTO   66F
....................    while (count >= -800) 
0673:  BTFSS  39.7
0674:  GOTO   680
0675:  MOVF   39,W
0676:  SUBLW  FB
0677:  BTFSC  03.0
0678:  GOTO   682
0679:  XORLW  FF
067A:  BTFSS  03.2
067B:  GOTO   680
067C:  MOVF   38,W
067D:  SUBLW  DF
067E:  BTFSC  03.0
067F:  GOTO   682
....................       REVERSE(); 
0680:  CALL   600
0681:  GOTO   673
....................    STOP(); 
0682:  CALL   5F6
....................    while (count <= 0) 
0683:  BTFSC  39.7
0684:  GOTO   68C
0685:  MOVF   39,F
0686:  BTFSS  03.2
0687:  GOTO   68E
0688:  MOVF   38,W
0689:  SUBLW  00
068A:  BTFSS  03.0
068B:  GOTO   68E
....................       STOP(); 
068C:  CALL   5F6
068D:  GOTO   683
....................  
....................    // 3 rotates 1 side 
....................    while (count <= 1200) 
068E:  BTFSC  39.7
068F:  GOTO   69A
0690:  MOVF   39,W
0691:  SUBLW  04
0692:  BTFSS  03.0
0693:  GOTO   69C
0694:  BTFSS  03.2
0695:  GOTO   69A
0696:  MOVF   38,W
0697:  SUBLW  B0
0698:  BTFSS  03.0
0699:  GOTO   69C
....................       FORWARD(); 
069A:  CALL   5EF
069B:  GOTO   68E
....................    STOP(); 
069C:  CALL   5F6
....................  
....................    flagStarter = false; 
069D:  BCF    3C.1
069E:  BSF    0A.3
069F:  BCF    0A.4
06A0:  GOTO   47C (RETURN)
.................... } 
....................  
.................... void RingTheBell() 
.................... { 
....................    while (count >= 400) 
06A1:  BTFSC  39.7
06A2:  GOTO   6B0
06A3:  MOVF   39,W
06A4:  SUBLW  00
06A5:  BTFSC  03.0
06A6:  GOTO   6B0
06A7:  XORLW  FF
06A8:  BTFSS  03.2
06A9:  GOTO   6AE
06AA:  MOVF   38,W
06AB:  SUBLW  8F
06AC:  BTFSC  03.0
06AD:  GOTO   6B0
....................       STOP(); 
06AE:  CALL   5F6
06AF:  GOTO   6A1
....................  
....................    while (count >= -800) 
06B0:  BTFSS  39.7
06B1:  GOTO   6BD
06B2:  MOVF   39,W
06B3:  SUBLW  FB
06B4:  BTFSC  03.0
06B5:  GOTO   6BF
06B6:  XORLW  FF
06B7:  BTFSS  03.2
06B8:  GOTO   6BD
06B9:  MOVF   38,W
06BA:  SUBLW  DF
06BB:  BTFSC  03.0
06BC:  GOTO   6BF
....................       REVERSE(); 
06BD:  CALL   600
06BE:  GOTO   6B0
....................    STOP(); 
06BF:  CALL   5F6
....................  
....................    while (count <= -400) 
06C0:  BTFSS  39.7
06C1:  GOTO   6CE
06C2:  MOVF   39,W
06C3:  SUBLW  FE
06C4:  BTFSS  03.0
06C5:  GOTO   6CE
06C6:  BTFSS  03.2
06C7:  GOTO   6CC
06C8:  MOVF   38,W
06C9:  SUBLW  70
06CA:  BTFSS  03.0
06CB:  GOTO   6CE
....................       STOP(); 
06CC:  CALL   5F6
06CD:  GOTO   6C0
....................  
....................    while (count <= 800) 
06CE:  BTFSC  39.7
06CF:  GOTO   6DA
06D0:  MOVF   39,W
06D1:  SUBLW  03
06D2:  BTFSS  03.0
06D3:  GOTO   6DC
06D4:  BTFSS  03.2
06D5:  GOTO   6DA
06D6:  MOVF   38,W
06D7:  SUBLW  20
06D8:  BTFSS  03.0
06D9:  GOTO   6DC
....................       FORWARD(); 
06DA:  CALL   5EF
06DB:  GOTO   6CE
....................    STOP(); 
06DC:  CALL   5F6
06DD:  BSF    0A.3
06DE:  BCF    0A.4
06DF:  GOTO   489 (RETURN)
.................... } 
....................  
.................... // pic 20mhz 5.10^6 = 1sec 
.................... // motor 2000rpm 
.................... // quay co tai: 0.5rps -> 200xung/s -> 1/200 s/xung 
.................... void checkSafetyFirst(int32 sec) 
.................... { 
....................    flagSTOP = true; 
*
059A:  BSF    3C.2
....................    output_low(relayOut); // safety switch 
059B:  BCF    3D.0
059C:  MOVF   3D,W
059D:  BSF    03.5
059E:  MOVWF  07
059F:  BCF    03.5
05A0:  BCF    07.0
....................  
....................    signed int16 lastCount = count; 
05A1:  MOVF   39,W
05A2:  MOVWF  43
05A3:  MOVF   38,W
05A4:  MOVWF  42
....................    for (int32 i = sec; --i;) // waitting steady 
05A5:  MOVF   41,W
05A6:  MOVWF  47
05A7:  MOVF   40,W
05A8:  MOVWF  46
05A9:  MOVF   3F,W
05AA:  MOVWF  45
05AB:  MOVF   3E,W
05AC:  MOVWF  44
05AD:  MOVLW  FF
05AE:  ADDWF  44,F
05AF:  BTFSS  03.0
05B0:  ADDWF  45,F
05B1:  BTFSS  03.0
05B2:  ADDWF  46,F
05B3:  BTFSS  03.0
05B4:  ADDWF  47,F
05B5:  MOVF   44,F
05B6:  BTFSS  03.2
05B7:  GOTO   5C1
05B8:  MOVF   45,F
05B9:  BTFSS  03.2
05BA:  GOTO   5C1
05BB:  MOVF   46,F
05BC:  BTFSS  03.2
05BD:  GOTO   5C1
05BE:  MOVF   47,F
05BF:  BTFSC  03.2
05C0:  GOTO   5D9
....................    { 
....................       if (count != lastCount) 
05C1:  MOVF   42,W
05C2:  SUBWF  38,W
05C3:  BTFSS  03.2
05C4:  GOTO   5C9
05C5:  MOVF   43,W
05C6:  SUBWF  39,W
05C7:  BTFSC  03.2
05C8:  GOTO   5D8
....................       { 
....................          i = sec; // reset 
05C9:  MOVF   41,W
05CA:  MOVWF  47
05CB:  MOVF   40,W
05CC:  MOVWF  46
05CD:  MOVF   3F,W
05CE:  MOVWF  45
05CF:  MOVF   3E,W
05D0:  MOVWF  44
....................          lastCount = count; 
05D1:  MOVF   39,W
05D2:  MOVWF  43
05D3:  MOVF   38,W
05D4:  MOVWF  42
....................          delay_ms(30); // pray for couting up 
05D5:  MOVLW  1E
05D6:  MOVWF  49
05D7:  CALL   586
....................       } 
05D8:  GOTO   5AD
....................    } 
....................  
....................    count = 0; // update 0 point 
05D9:  CLRF   39
05DA:  CLRF   38
....................    output_high(relayOut); 
05DB:  BCF    3D.0
05DC:  MOVF   3D,W
05DD:  BSF    03.5
05DE:  MOVWF  07
05DF:  BCF    03.5
05E0:  BSF    07.0
....................    delay_ms(3000); // ngăn hồ quang nếu cùng lúc đóng triac lập tức 
05E1:  MOVLW  0C
05E2:  MOVWF  48
05E3:  MOVLW  FA
05E4:  MOVWF  49
05E5:  CALL   586
05E6:  DECFSZ 48,F
05E7:  GOTO   5E3
....................    enable_interrupts(INT_TIMER2); 
05E8:  BSF    03.5
05E9:  BSF    0C.1
....................    flagSTOP = false; 
05EA:  BCF    03.5
05EB:  BCF    3C.2
05EC:  BSF    0A.3
05ED:  BCF    0A.4
05EE:  GOTO   471 (RETURN)
.................... } 
....................  
.................... //================================================== MAIN ================================================== 
....................  
.................... void main() 
*
0AD7:  MOVF   03,W
0AD8:  ANDLW  1F
0AD9:  MOVWF  03
0ADA:  CLRF   2B
0ADB:  CLRF   2A
0ADC:  CLRF   29
0ADD:  MOVLW  01
0ADE:  MOVWF  28
0ADF:  CLRF   2F
0AE0:  CLRF   2E
0AE1:  CLRF   2D
0AE2:  MOVLW  06
0AE3:  MOVWF  2C
0AE4:  CLRF   27
0AE5:  BTFSC  0B.7
0AE6:  BSF    27.7
0AE7:  BCF    0B.7
0AE8:  MOVF   2B,W
0AE9:  MOVWF  6A
0AEA:  MOVF   2A,W
0AEB:  MOVWF  69
0AEC:  MOVF   29,W
0AED:  MOVWF  68
0AEE:  MOVF   28,W
0AEF:  MOVWF  67
0AF0:  BCF    0A.3
0AF1:  CALL   074
0AF2:  BSF    0A.3
0AF3:  BTFSC  27.7
0AF4:  BSF    0B.7
0AF5:  BSF    03.1
0AF6:  CLRF   27
0AF7:  BTFSC  0B.7
0AF8:  BSF    27.7
0AF9:  BCF    0B.7
0AFA:  MOVLW  17
0AFB:  BSF    03.5
0AFC:  MOVWF  2E
0AFD:  MOVLW  B7
0AFE:  MOVWF  2D
0AFF:  MOVLW  51
0B00:  MOVWF  2C
0B01:  MOVLW  82
0B02:  MOVWF  2B
0B03:  MOVF   7A,W
0B04:  MOVWF  32
0B05:  MOVF   79,W
0B06:  MOVWF  31
0B07:  MOVF   78,W
0B08:  MOVWF  30
0B09:  MOVF   77,W
0B0A:  MOVWF  2F
0B0B:  BCF    0A.3
0B0C:  BCF    03.5
0B0D:  CALL   08F
0B0E:  BSF    0A.3
0B0F:  BTFSC  27.7
0B10:  BSF    0B.7
0B11:  MOVF   7A,W
0B12:  MOVWF  41
0B13:  MOVF   79,W
0B14:  MOVWF  40
0B15:  MOVF   78,W
0B16:  MOVWF  3F
0B17:  MOVF   77,W
0B18:  MOVWF  3E
0B19:  CLRF   27
0B1A:  BTFSC  0B.7
0B1B:  BSF    27.7
0B1C:  BCF    0B.7
0B1D:  MOVF   7A,W
0B1E:  MOVWF  6E
0B1F:  MOVF   79,W
0B20:  MOVWF  6D
0B21:  MOVF   78,W
0B22:  MOVWF  6C
0B23:  MOVF   77,W
0B24:  MOVWF  6B
0B25:  MOVLW  17
0B26:  MOVWF  72
0B27:  MOVLW  B7
0B28:  MOVWF  71
0B29:  MOVLW  51
0B2A:  MOVWF  70
0B2B:  MOVLW  7A
0B2C:  MOVWF  6F
0B2D:  BCF    0A.3
0B2E:  CALL   1D5
0B2F:  BSF    0A.3
0B30:  BTFSC  27.7
0B31:  BSF    0B.7
0B32:  MOVF   7A,W
0B33:  MOVWF  41
0B34:  MOVF   79,W
0B35:  MOVWF  40
0B36:  MOVF   78,W
0B37:  MOVWF  3F
0B38:  MOVF   77,W
0B39:  MOVWF  3E
0B3A:  CLRF   27
0B3B:  BTFSC  0B.7
0B3C:  BSF    27.7
0B3D:  BCF    0B.7
0B3E:  MOVF   7A,W
0B3F:  MOVWF  76
0B40:  MOVF   79,W
0B41:  MOVWF  75
0B42:  MOVF   78,W
0B43:  MOVWF  74
0B44:  MOVF   77,W
0B45:  MOVWF  73
0B46:  BCF    0A.3
0B47:  CALL   3AE
0B48:  BSF    0A.3
0B49:  BTFSC  27.7
0B4A:  BSF    0B.7
0B4B:  CLRF   27
0B4C:  BTFSC  0B.7
0B4D:  BSF    27.7
0B4E:  BCF    0B.7
0B4F:  MOVF   7A,W
0B50:  MOVWF  6A
0B51:  MOVF   79,W
0B52:  MOVWF  69
0B53:  MOVF   78,W
0B54:  MOVWF  68
0B55:  MOVF   77,W
0B56:  MOVWF  67
0B57:  BCF    0A.3
0B58:  CALL   559
0B59:  BSF    0A.3
0B5A:  BTFSC  27.7
0B5B:  BSF    0B.7
0B5C:  MOVF   7A,W
0B5D:  MOVWF  41
0B5E:  MOVF   79,W
0B5F:  MOVWF  40
0B60:  MOVF   78,W
0B61:  MOVWF  3F
0B62:  MOVF   77,W
0B63:  MOVWF  3E
0B64:  MOVLW  01
0B65:  SUBWF  77,W
0B66:  MOVWF  30
0B67:  MOVF   78,W
0B68:  MOVWF  31
0B69:  MOVLW  00
0B6A:  BTFSS  03.0
0B6B:  MOVLW  01
0B6C:  SUBWF  31,F
0B6D:  MOVF   79,W
0B6E:  MOVWF  32
0B6F:  MOVLW  00
0B70:  BTFSS  03.0
0B71:  MOVLW  01
0B72:  SUBWF  32,F
0B73:  MOVF   7A,W
0B74:  MOVWF  33
0B75:  MOVLW  00
0B76:  BTFSS  03.0
0B77:  MOVLW  01
0B78:  SUBWF  33,F
0B79:  CLRF   27
0B7A:  BTFSC  0B.7
0B7B:  BSF    27.7
0B7C:  BCF    0B.7
0B7D:  MOVF   2F,W
0B7E:  MOVWF  6A
0B7F:  MOVF   2E,W
0B80:  MOVWF  69
0B81:  MOVF   2D,W
0B82:  MOVWF  68
0B83:  MOVF   2C,W
0B84:  MOVWF  67
0B85:  BCF    0A.3
0B86:  CALL   074
0B87:  BSF    0A.3
0B88:  BTFSC  27.7
0B89:  BSF    0B.7
0B8A:  CLRF   3F
0B8B:  MOVF   04,W
0B8C:  MOVWF  3E
0B8D:  BCF    3F.0
0B8E:  BTFSC  03.7
0B8F:  BSF    3F.0
0B90:  BSF    03.1
0B91:  CLRF   27
0B92:  BTFSC  0B.7
0B93:  BSF    27.7
0B94:  BCF    0B.7
0B95:  MOVLW  17
0B96:  BSF    03.5
0B97:  MOVWF  2E
0B98:  MOVLW  B7
0B99:  MOVWF  2D
0B9A:  MOVLW  51
0B9B:  MOVWF  2C
0B9C:  MOVLW  82
0B9D:  MOVWF  2B
0B9E:  MOVF   7A,W
0B9F:  MOVWF  32
0BA0:  MOVF   79,W
0BA1:  MOVWF  31
0BA2:  MOVF   78,W
0BA3:  MOVWF  30
0BA4:  MOVF   77,W
0BA5:  MOVWF  2F
0BA6:  BCF    0A.3
0BA7:  BCF    03.5
0BA8:  CALL   08F
0BA9:  BSF    0A.3
0BAA:  BTFSC  27.7
0BAB:  BSF    0B.7
0BAC:  MOVF   3E,W
0BAD:  MOVWF  04
0BAE:  BCF    03.7
0BAF:  BTFSC  3F.0
0BB0:  BSF    03.7
0BB1:  MOVF   7A,W
0BB2:  MOVWF  43
0BB3:  MOVF   79,W
0BB4:  MOVWF  42
0BB5:  MOVF   78,W
0BB6:  MOVWF  41
0BB7:  MOVF   77,W
0BB8:  MOVWF  40
0BB9:  CLRF   27
0BBA:  BTFSC  0B.7
0BBB:  BSF    27.7
0BBC:  BCF    0B.7
0BBD:  MOVF   7A,W
0BBE:  MOVWF  6E
0BBF:  MOVF   79,W
0BC0:  MOVWF  6D
0BC1:  MOVF   78,W
0BC2:  MOVWF  6C
0BC3:  MOVF   77,W
0BC4:  MOVWF  6B
0BC5:  MOVLW  17
0BC6:  MOVWF  72
0BC7:  MOVLW  B7
0BC8:  MOVWF  71
0BC9:  MOVLW  51
0BCA:  MOVWF  70
0BCB:  MOVLW  7A
0BCC:  MOVWF  6F
0BCD:  BCF    0A.3
0BCE:  CALL   1D5
0BCF:  BSF    0A.3
0BD0:  BTFSC  27.7
0BD1:  BSF    0B.7
0BD2:  MOVF   7A,W
0BD3:  MOVWF  43
0BD4:  MOVF   79,W
0BD5:  MOVWF  42
0BD6:  MOVF   78,W
0BD7:  MOVWF  41
0BD8:  MOVF   77,W
0BD9:  MOVWF  40
0BDA:  CLRF   27
0BDB:  BTFSC  0B.7
0BDC:  BSF    27.7
0BDD:  BCF    0B.7
0BDE:  MOVF   7A,W
0BDF:  MOVWF  76
0BE0:  MOVF   79,W
0BE1:  MOVWF  75
0BE2:  MOVF   78,W
0BE3:  MOVWF  74
0BE4:  MOVF   77,W
0BE5:  MOVWF  73
0BE6:  BCF    0A.3
0BE7:  CALL   3AE
0BE8:  BSF    0A.3
0BE9:  BTFSC  27.7
0BEA:  BSF    0B.7
0BEB:  CLRF   27
0BEC:  BTFSC  0B.7
0BED:  BSF    27.7
0BEE:  BCF    0B.7
0BEF:  MOVF   7A,W
0BF0:  MOVWF  6A
0BF1:  MOVF   79,W
0BF2:  MOVWF  69
0BF3:  MOVF   78,W
0BF4:  MOVWF  68
0BF5:  MOVF   77,W
0BF6:  MOVWF  67
0BF7:  BCF    0A.3
0BF8:  CALL   559
0BF9:  BSF    0A.3
0BFA:  BTFSC  27.7
0BFB:  BSF    0B.7
0BFC:  MOVLW  01
0BFD:  SUBWF  77,W
0BFE:  MOVWF  34
0BFF:  MOVF   78,W
0C00:  MOVWF  35
0C01:  MOVLW  00
0C02:  BTFSS  03.0
0C03:  MOVLW  01
0C04:  SUBWF  35,F
0C05:  MOVF   79,W
0C06:  MOVWF  36
0C07:  MOVLW  00
0C08:  BTFSS  03.0
0C09:  MOVLW  01
0C0A:  SUBWF  36,F
0C0B:  MOVF   7A,W
0C0C:  MOVWF  37
0C0D:  MOVLW  00
0C0E:  BTFSS  03.0
0C0F:  MOVLW  01
0C10:  SUBWF  37,F
0C11:  CLRF   39
0C12:  CLRF   38
0C13:  BSF    3C.0
0C14:  BSF    3C.1
0C15:  BSF    3C.2
0C16:  MOVLW  FF
0C17:  MOVWF  3D
0C18:  BSF    03.5
0C19:  BSF    1F.0
0C1A:  BSF    1F.1
0C1B:  BSF    1F.2
0C1C:  BCF    1F.3
0C1D:  MOVLW  07
0C1E:  MOVWF  1C
0C1F:  BCF    03.7
.................... { 
....................    TRISB0 = TRISC1 = TRISC2 = TRISB1 = TRISB4 = 1;                            //input 
0C20:  BSF    06.4
0C21:  BSF    06.1
0C22:  BSF    07.2
0C23:  BSF    07.1
0C24:  BSF    06.0
....................    TRISD0 = TRISD1 = TRISC0 = TRISD2 = TRISD3 = TRISC5 = TRISD4 = TRISB5 = 0; //output 
0C25:  BCF    06.5
0C26:  BCF    08.4
0C27:  BCF    07.5
0C28:  BCF    08.3
0C29:  BCF    08.2
0C2A:  BCF    07.0
0C2B:  BCF    08.1
0C2C:  BCF    08.0
....................  
....................    output_low(PIN_RESET);   // CLEAR reset pin 
0C2D:  BCF    06.5
0C2E:  BCF    03.5
0C2F:  BCF    06.5
....................    output_low(ledSAFETY);   // CLEAR reset pin 
0C30:  BSF    03.5
0C31:  BCF    08.2
0C32:  BCF    03.5
0C33:  BCF    08.2
....................    output_low(ledSTARTING); // CLEAR reset pin 
0C34:  BSF    03.5
0C35:  BCF    08.3
0C36:  BCF    03.5
0C37:  BCF    08.3
....................    output_low(ledRINGING);  // CLEAR reset pin 
0C38:  BCF    3D.5
0C39:  MOVF   3D,W
0C3A:  BSF    03.5
0C3B:  MOVWF  07
0C3C:  BCF    03.5
0C3D:  BCF    07.5
....................  
....................    clear_interrupt(INT_EXT); 
0C3E:  BCF    0B.1
....................    enable_interrupts(INT_EXT); 
0C3F:  BSF    0B.4
....................    ext_int_edge(H_TO_L); 
0C40:  BSF    03.5
0C41:  BCF    01.6
....................  
....................    setup_timer_0(RTCC_INTERNAL | RTCC_DIV_256); // 51.2us 
0C42:  MOVF   01,W
0C43:  ANDLW  C0
0C44:  IORLW  07
0C45:  MOVWF  01
....................    enable_interrupts(INT_TIMER0); 
0C46:  BCF    03.5
0C47:  BSF    0B.5
....................  
....................    setup_ccp1(CCP_CAPTURE_FE); 
0C48:  BSF    3D.2
0C49:  MOVF   3D,W
0C4A:  BSF    03.5
0C4B:  MOVWF  07
0C4C:  BCF    03.5
0C4D:  CLRF   17
0C4E:  MOVLW  04
0C4F:  MOVWF  17
....................    setup_timer_1(T1_INTERNAL); 
0C50:  MOVLW  85
0C51:  MOVWF  10
....................    enable_interrupts(INT_CCP1); 
0C52:  BSF    03.5
0C53:  BSF    0C.2
....................  
....................    setup_timer_2(T2_DIV_BY_16, 255, 16); // Overflow every 13.056us 
0C54:  MOVLW  78
0C55:  MOVWF  78
0C56:  IORLW  06
0C57:  BCF    03.5
0C58:  MOVWF  12
0C59:  MOVLW  FF
0C5A:  BSF    03.5
0C5B:  MOVWF  12
....................    set_timer2(0); 
0C5C:  BCF    03.5
0C5D:  CLRF   11
....................    iTimer2OverFlow = 7660; // 100ms every command 
0C5E:  MOVLW  1D
0C5F:  MOVWF  3B
0C60:  MOVLW  EC
0C61:  MOVWF  3A
....................  
....................    // setup_comparator(A0_VR_A1_VR); 
....................    // setup_vref(VREF_HIGH | 5); 
....................    // enable_interrupts(INT_COMP); 
....................  
....................    enable_interrupts(GLOBAL); 
0C62:  MOVLW  C0
0C63:  IORWF  0B,F
....................  
....................    output_high(ledSAFETY); 
0C64:  BSF    03.5
0C65:  BCF    08.2
0C66:  BCF    03.5
0C67:  BSF    08.2
....................    checkSafetyFirst(1000000); // unknown seconds 
0C68:  CLRF   41
0C69:  MOVLW  0F
0C6A:  MOVWF  40
0C6B:  MOVLW  42
0C6C:  MOVWF  3F
0C6D:  MOVLW  40
0C6E:  MOVWF  3E
0C6F:  BCF    0A.3
0C70:  GOTO   59A
0C71:  BSF    0A.3
....................    output_low(ledSAFETY); 
0C72:  BSF    03.5
0C73:  BCF    08.2
0C74:  BCF    03.5
0C75:  BCF    08.2
....................  
....................    output_high(ledSTARTING); 
0C76:  BSF    03.5
0C77:  BCF    08.3
0C78:  BCF    03.5
0C79:  BSF    08.3
....................    starter(); 
0C7A:  BCF    0A.3
0C7B:  GOTO   607
0C7C:  BSF    0A.3
....................    output_low(ledSTARTING); 
0C7D:  BSF    03.5
0C7E:  BCF    08.3
0C7F:  BCF    03.5
0C80:  BCF    08.3
....................  
....................    output_high(ledRINGING); 
0C81:  BCF    3D.5
0C82:  MOVF   3D,W
0C83:  BSF    03.5
0C84:  MOVWF  07
0C85:  BCF    03.5
0C86:  BSF    07.5
....................    while (TRUE) 
....................    { 
....................       RingTheBell(); 
0C87:  BCF    0A.3
0C88:  GOTO   6A1
0C89:  BSF    0A.3
0C8A:  GOTO   487
....................    } 
.................... } 
0C8B:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
