CCS PCM C Compiler, Version 5.025, 47277               09-Apr-20 10:31

               Filename:   D:\Desktop\RingTheBell\PIC\encoder400\main.lst

               ROM used:   1942 words (24%)
                           Largest free fragment is 2048
               RAM used:   44 (12%) at main() level
                           85 (23%) worst case
               Stack used: 3 locations (2 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  06
0001:  MOVWF  0A
0002:  GOTO   670
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.4
0018:  GOTO   01B
0019:  BTFSC  0B.1
001A:  GOTO   036
001B:  MOVLW  8C
001C:  MOVWF  04
001D:  BTFSS  00.2
001E:  GOTO   021
001F:  BTFSC  0C.2
0020:  GOTO   039
0021:  BTFSS  0B.5
0022:  GOTO   025
0023:  BTFSC  0B.2
0024:  GOTO   03C
0025:  MOVF   22,W
0026:  MOVWF  04
0027:  MOVF   23,W
0028:  MOVWF  77
0029:  MOVF   24,W
002A:  MOVWF  78
002B:  MOVF   25,W
002C:  MOVWF  79
002D:  MOVF   26,W
002E:  MOVWF  7A
002F:  MOVF   20,W
0030:  MOVWF  0A
0031:  SWAPF  21,W
0032:  MOVWF  03
0033:  SWAPF  7F,F
0034:  SWAPF  7F,W
0035:  RETFIE
0036:  BCF    0A.3
0037:  BCF    0A.4
0038:  GOTO   03F
0039:  BCF    0A.3
003A:  BCF    0A.4
003B:  GOTO   073
003C:  BCF    0A.3
003D:  BCF    0A.4
003E:  GOTO   059
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
*
0081:  MOVLW  80
0082:  BTFSC  03.1
0083:  XORWF  65,F
0084:  CLRF   6A
0085:  CLRF   6B
0086:  MOVF   61,W
0087:  MOVWF  69
0088:  MOVF   65,W
0089:  XORWF  69,F
008A:  MOVF   60,W
008B:  BTFSC  03.2
008C:  GOTO   171
008D:  MOVWF  68
008E:  MOVWF  77
008F:  MOVF   64,W
0090:  BTFSC  03.2
0091:  GOTO   17A
0092:  SUBWF  68,F
0093:  BTFSC  03.2
0094:  GOTO   116
0095:  BTFSS  03.0
0096:  GOTO   0D4
0097:  MOVF   65,W
0098:  MOVWF  6E
0099:  BSF    6E.7
009A:  MOVF   66,W
009B:  MOVWF  6D
009C:  MOVF   67,W
009D:  MOVWF  6C
009E:  CLRF   6B
009F:  BCF    03.0
00A0:  RRF    6E,F
00A1:  RRF    6D,F
00A2:  RRF    6C,F
00A3:  RRF    6B,F
00A4:  DECFSZ 68,F
00A5:  GOTO   09E
00A6:  BTFSS  69.7
00A7:  GOTO   0AB
00A8:  BSF    6A.0
00A9:  GOTO   18E
00AA:  BCF    6A.0
00AB:  BCF    68.0
00AC:  BSF    6A.4
00AD:  MOVLW  63
00AE:  MOVWF  04
00AF:  BCF    03.7
00B0:  GOTO   1A3
00B1:  BCF    6A.4
00B2:  BTFSC  69.7
00B3:  GOTO   0BE
00B4:  BTFSS  68.0
00B5:  GOTO   0C9
00B6:  RRF    6E,F
00B7:  RRF    6D,F
00B8:  RRF    6C,F
00B9:  RRF    6B,F
00BA:  INCF   77,F
00BB:  BTFSC  03.2
00BC:  GOTO   189
00BD:  GOTO   0C9
00BE:  BTFSC  6E.7
00BF:  GOTO   0CC
00C0:  BCF    03.0
00C1:  RLF    6B,F
00C2:  RLF    6C,F
00C3:  RLF    6D,F
00C4:  RLF    6E,F
00C5:  DECF   77,F
00C6:  BTFSC  03.2
00C7:  GOTO   189
00C8:  GOTO   0BE
00C9:  BSF    6A.6
00CA:  GOTO   136
00CB:  BCF    6A.6
00CC:  MOVF   61,W
00CD:  MOVWF  69
00CE:  BTFSS  69.7
00CF:  GOTO   0D2
00D0:  BSF    6E.7
00D1:  GOTO   182
00D2:  BCF    6E.7
00D3:  GOTO   182
00D4:  MOVF   64,W
00D5:  MOVWF  68
00D6:  MOVWF  77
00D7:  MOVF   60,W
00D8:  SUBWF  68,F
00D9:  MOVF   61,W
00DA:  MOVWF  6E
00DB:  BSF    6E.7
00DC:  MOVF   62,W
00DD:  MOVWF  6D
00DE:  MOVF   63,W
00DF:  MOVWF  6C
00E0:  CLRF   6B
00E1:  BCF    03.0
00E2:  RRF    6E,F
00E3:  RRF    6D,F
00E4:  RRF    6C,F
00E5:  RRF    6B,F
00E6:  DECFSZ 68,F
00E7:  GOTO   0E0
00E8:  BTFSS  69.7
00E9:  GOTO   0ED
00EA:  BSF    6A.1
00EB:  GOTO   18E
00EC:  BCF    6A.1
00ED:  BCF    68.0
00EE:  BSF    6A.5
00EF:  MOVLW  67
00F0:  MOVWF  04
00F1:  BCF    03.7
00F2:  GOTO   1A3
00F3:  BCF    6A.5
00F4:  BTFSC  69.7
00F5:  GOTO   100
00F6:  BTFSS  68.0
00F7:  GOTO   10B
00F8:  RRF    6E,F
00F9:  RRF    6D,F
00FA:  RRF    6C,F
00FB:  RRF    6B,F
00FC:  INCF   77,F
00FD:  BTFSC  03.2
00FE:  GOTO   189
00FF:  GOTO   10B
0100:  BTFSC  6E.7
0101:  GOTO   10E
0102:  BCF    03.0
0103:  RLF    6B,F
0104:  RLF    6C,F
0105:  RLF    6D,F
0106:  RLF    6E,F
0107:  DECF   77,F
0108:  BTFSC  03.2
0109:  GOTO   189
010A:  GOTO   100
010B:  BSF    6A.7
010C:  GOTO   136
010D:  BCF    6A.7
010E:  MOVF   65,W
010F:  MOVWF  69
0110:  BTFSS  69.7
0111:  GOTO   114
0112:  BSF    6E.7
0113:  GOTO   182
0114:  BCF    6E.7
0115:  GOTO   182
0116:  MOVF   65,W
0117:  MOVWF  6E
0118:  BSF    6E.7
0119:  MOVF   66,W
011A:  MOVWF  6D
011B:  MOVF   67,W
011C:  MOVWF  6C
011D:  BTFSS  69.7
011E:  GOTO   123
011F:  BCF    6E.7
0120:  BSF    6A.2
0121:  GOTO   18E
0122:  BCF    6A.2
0123:  CLRF   6B
0124:  BCF    68.0
0125:  MOVLW  63
0126:  MOVWF  04
0127:  BCF    03.7
0128:  GOTO   1A3
0129:  BTFSC  69.7
012A:  GOTO   14C
012B:  MOVF   61,W
012C:  MOVWF  69
012D:  BTFSS  68.0
012E:  GOTO   136
012F:  RRF    6E,F
0130:  RRF    6D,F
0131:  RRF    6C,F
0132:  RRF    6B,F
0133:  INCF   77,F
0134:  BTFSC  03.2
0135:  GOTO   189
0136:  BTFSS  6B.7
0137:  GOTO   147
0138:  INCF   6C,F
0139:  BTFSS  03.2
013A:  GOTO   147
013B:  INCF   6D,F
013C:  BTFSS  03.2
013D:  GOTO   147
013E:  INCF   6E,F
013F:  BTFSS  03.2
0140:  GOTO   147
0141:  RRF    6E,F
0142:  RRF    6D,F
0143:  RRF    6C,F
0144:  INCF   77,F
0145:  BTFSC  03.2
0146:  GOTO   189
0147:  BTFSC  6A.6
0148:  GOTO   0CB
0149:  BTFSC  6A.7
014A:  GOTO   10D
014B:  GOTO   16B
014C:  MOVLW  80
014D:  XORWF  6E,F
014E:  BTFSS  6E.7
014F:  GOTO   154
0150:  GOTO   18E
0151:  MOVF   65,W
0152:  MOVWF  69
0153:  GOTO   161
0154:  MOVF   61,W
0155:  MOVWF  69
0156:  MOVF   6E,F
0157:  BTFSS  03.2
0158:  GOTO   161
0159:  MOVF   6D,F
015A:  BTFSS  03.2
015B:  GOTO   161
015C:  MOVF   6C,F
015D:  BTFSS  03.2
015E:  GOTO   161
015F:  CLRF   77
0160:  GOTO   182
0161:  BTFSC  6E.7
0162:  GOTO   16B
0163:  BCF    03.0
0164:  RLF    6B,F
0165:  RLF    6C,F
0166:  RLF    6D,F
0167:  RLF    6E,F
0168:  DECFSZ 77,F
0169:  GOTO   161
016A:  GOTO   189
016B:  BTFSS  69.7
016C:  GOTO   16F
016D:  BSF    6E.7
016E:  GOTO   182
016F:  BCF    6E.7
0170:  GOTO   182
0171:  MOVF   64,W
0172:  MOVWF  77
0173:  MOVF   65,W
0174:  MOVWF  6E
0175:  MOVF   66,W
0176:  MOVWF  6D
0177:  MOVF   67,W
0178:  MOVWF  6C
0179:  GOTO   182
017A:  MOVF   60,W
017B:  MOVWF  77
017C:  MOVF   61,W
017D:  MOVWF  6E
017E:  MOVF   62,W
017F:  MOVWF  6D
0180:  MOVF   63,W
0181:  MOVWF  6C
0182:  MOVF   6E,W
0183:  MOVWF  78
0184:  MOVF   6D,W
0185:  MOVWF  79
0186:  MOVF   6C,W
0187:  MOVWF  7A
0188:  GOTO   1C1
0189:  CLRF   77
018A:  CLRF   78
018B:  CLRF   79
018C:  CLRF   7A
018D:  GOTO   1C1
018E:  CLRF   6B
018F:  COMF   6C,F
0190:  COMF   6D,F
0191:  COMF   6E,F
0192:  COMF   6B,F
0193:  INCF   6B,F
0194:  BTFSS  03.2
0195:  GOTO   19C
0196:  INCF   6C,F
0197:  BTFSS  03.2
0198:  GOTO   19C
0199:  INCF   6D,F
019A:  BTFSC  03.2
019B:  INCF   6E,F
019C:  BTFSC  6A.0
019D:  GOTO   0AA
019E:  BTFSC  6A.1
019F:  GOTO   0EC
01A0:  BTFSC  6A.2
01A1:  GOTO   122
01A2:  GOTO   151
01A3:  MOVF   00,W
01A4:  ADDWF  6C,F
01A5:  BTFSS  03.0
01A6:  GOTO   1AD
01A7:  INCF   6D,F
01A8:  BTFSS  03.2
01A9:  GOTO   1AD
01AA:  INCF   6E,F
01AB:  BTFSC  03.2
01AC:  BSF    68.0
01AD:  DECF   04,F
01AE:  MOVF   00,W
01AF:  ADDWF  6D,F
01B0:  BTFSS  03.0
01B1:  GOTO   1B5
01B2:  INCF   6E,F
01B3:  BTFSC  03.2
01B4:  BSF    68.0
01B5:  DECF   04,F
01B6:  MOVF   00,W
01B7:  BTFSS  00.7
01B8:  XORLW  80
01B9:  ADDWF  6E,F
01BA:  BTFSC  03.0
01BB:  BSF    68.0
01BC:  BTFSC  6A.4
01BD:  GOTO   0B1
01BE:  BTFSC  6A.5
01BF:  GOTO   0F3
01C0:  GOTO   129
01C1:  RETURN
01C2:  MOVF   4D,W
01C3:  BTFSC  03.2
01C4:  GOTO   287
01C5:  MOVWF  59
01C6:  MOVF   51,W
01C7:  BTFSC  03.2
01C8:  GOTO   287
01C9:  SUBWF  59,F
01CA:  BTFSS  03.0
01CB:  GOTO   1D1
01CC:  MOVLW  7F
01CD:  ADDWF  59,F
01CE:  BTFSC  03.0
01CF:  GOTO   287
01D0:  GOTO   1D7
01D1:  MOVLW  81
01D2:  SUBWF  59,F
01D3:  BTFSS  03.0
01D4:  GOTO   287
01D5:  BTFSC  03.2
01D6:  GOTO   287
01D7:  MOVF   59,W
01D8:  MOVWF  77
01D9:  CLRF   78
01DA:  CLRF   79
01DB:  CLRF   7A
01DC:  CLRF   58
01DD:  MOVF   4E,W
01DE:  MOVWF  57
01DF:  BSF    57.7
01E0:  MOVF   4F,W
01E1:  MOVWF  56
01E2:  MOVF   50,W
01E3:  MOVWF  55
01E4:  MOVLW  19
01E5:  MOVWF  59
01E6:  MOVF   54,W
01E7:  SUBWF  55,F
01E8:  BTFSC  03.0
01E9:  GOTO   1FA
01EA:  MOVLW  01
01EB:  SUBWF  56,F
01EC:  BTFSC  03.0
01ED:  GOTO   1FA
01EE:  SUBWF  57,F
01EF:  BTFSC  03.0
01F0:  GOTO   1FA
01F1:  SUBWF  58,F
01F2:  BTFSC  03.0
01F3:  GOTO   1FA
01F4:  INCF   58,F
01F5:  INCF   57,F
01F6:  INCF   56,F
01F7:  MOVF   54,W
01F8:  ADDWF  55,F
01F9:  GOTO   22C
01FA:  MOVF   53,W
01FB:  SUBWF  56,F
01FC:  BTFSC  03.0
01FD:  GOTO   215
01FE:  MOVLW  01
01FF:  SUBWF  57,F
0200:  BTFSC  03.0
0201:  GOTO   215
0202:  SUBWF  58,F
0203:  BTFSC  03.0
0204:  GOTO   215
0205:  INCF   58,F
0206:  INCF   57,F
0207:  MOVF   53,W
0208:  ADDWF  56,F
0209:  MOVF   54,W
020A:  ADDWF  55,F
020B:  BTFSS  03.0
020C:  GOTO   22C
020D:  INCF   56,F
020E:  BTFSS  03.2
020F:  GOTO   22C
0210:  INCF   57,F
0211:  BTFSS  03.2
0212:  GOTO   22C
0213:  INCF   58,F
0214:  GOTO   22C
0215:  MOVF   52,W
0216:  IORLW  80
0217:  SUBWF  57,F
0218:  BTFSC  03.0
0219:  GOTO   22B
021A:  MOVLW  01
021B:  SUBWF  58,F
021C:  BTFSC  03.0
021D:  GOTO   22B
021E:  INCF   58,F
021F:  MOVF   52,W
0220:  IORLW  80
0221:  ADDWF  57,F
0222:  MOVF   53,W
0223:  ADDWF  56,F
0224:  BTFSS  03.0
0225:  GOTO   209
0226:  INCF   57,F
0227:  BTFSS  03.2
0228:  GOTO   209
0229:  INCF   58,F
022A:  GOTO   209
022B:  BSF    7A.0
022C:  DECFSZ 59,F
022D:  GOTO   22F
022E:  GOTO   23A
022F:  BCF    03.0
0230:  RLF    55,F
0231:  RLF    56,F
0232:  RLF    57,F
0233:  RLF    58,F
0234:  BCF    03.0
0235:  RLF    7A,F
0236:  RLF    79,F
0237:  RLF    78,F
0238:  RLF    5A,F
0239:  GOTO   1E6
023A:  BTFSS  5A.0
023B:  GOTO   242
023C:  BCF    03.0
023D:  RRF    78,F
023E:  RRF    79,F
023F:  RRF    7A,F
0240:  RRF    5A,F
0241:  GOTO   245
0242:  DECF   77,F
0243:  BTFSC  03.2
0244:  GOTO   287
0245:  BTFSC  5A.7
0246:  GOTO   26E
0247:  BCF    03.0
0248:  RLF    55,F
0249:  RLF    56,F
024A:  RLF    57,F
024B:  RLF    58,F
024C:  MOVF   54,W
024D:  SUBWF  55,F
024E:  BTFSC  03.0
024F:  GOTO   25A
0250:  MOVLW  01
0251:  SUBWF  56,F
0252:  BTFSC  03.0
0253:  GOTO   25A
0254:  SUBWF  57,F
0255:  BTFSC  03.0
0256:  GOTO   25A
0257:  SUBWF  58,F
0258:  BTFSS  03.0
0259:  GOTO   27D
025A:  MOVF   53,W
025B:  SUBWF  56,F
025C:  BTFSC  03.0
025D:  GOTO   265
025E:  MOVLW  01
025F:  SUBWF  57,F
0260:  BTFSC  03.0
0261:  GOTO   265
0262:  SUBWF  58,F
0263:  BTFSS  03.0
0264:  GOTO   27D
0265:  MOVF   52,W
0266:  IORLW  80
0267:  SUBWF  57,F
0268:  BTFSC  03.0
0269:  GOTO   26E
026A:  MOVLW  01
026B:  SUBWF  58,F
026C:  BTFSS  03.0
026D:  GOTO   27D
026E:  INCF   7A,F
026F:  BTFSS  03.2
0270:  GOTO   27D
0271:  INCF   79,F
0272:  BTFSS  03.2
0273:  GOTO   27D
0274:  INCF   78,F
0275:  BTFSS  03.2
0276:  GOTO   27D
0277:  INCF   77,F
0278:  BTFSC  03.2
0279:  GOTO   287
027A:  RRF    78,F
027B:  RRF    79,F
027C:  RRF    7A,F
027D:  MOVF   4E,W
027E:  MOVWF  59
027F:  MOVF   52,W
0280:  XORWF  59,F
0281:  BTFSS  59.7
0282:  GOTO   285
0283:  BSF    78.7
0284:  GOTO   28B
0285:  BCF    78.7
0286:  GOTO   28B
0287:  CLRF   77
0288:  CLRF   78
0289:  CLRF   79
028A:  CLRF   7A
028B:  RETURN
028C:  MOVF   5D,W
028D:  MOVWF  64
028E:  MOVF   61,W
028F:  XORWF  64,F
0290:  BTFSS  64.7
0291:  GOTO   297
0292:  BCF    03.2
0293:  BCF    03.0
0294:  BTFSC  5D.7
0295:  BSF    03.0
0296:  GOTO   2CA
0297:  MOVF   5D,W
0298:  MOVWF  64
0299:  MOVF   60,W
029A:  MOVWF  65
029B:  MOVF   5C,W
029C:  SUBWF  65,F
029D:  BTFSC  03.2
029E:  GOTO   2A5
029F:  BTFSS  64.7
02A0:  GOTO   2CA
02A1:  MOVF   03,W
02A2:  XORLW  01
02A3:  MOVWF  03
02A4:  GOTO   2CA
02A5:  MOVF   61,W
02A6:  MOVWF  65
02A7:  MOVF   5D,W
02A8:  SUBWF  65,F
02A9:  BTFSC  03.2
02AA:  GOTO   2B1
02AB:  BTFSS  64.7
02AC:  GOTO   2CA
02AD:  MOVF   03,W
02AE:  XORLW  01
02AF:  MOVWF  03
02B0:  GOTO   2CA
02B1:  MOVF   62,W
02B2:  MOVWF  65
02B3:  MOVF   5E,W
02B4:  SUBWF  65,F
02B5:  BTFSC  03.2
02B6:  GOTO   2BD
02B7:  BTFSS  64.7
02B8:  GOTO   2CA
02B9:  MOVF   03,W
02BA:  XORLW  01
02BB:  MOVWF  03
02BC:  GOTO   2CA
02BD:  MOVF   63,W
02BE:  MOVWF  65
02BF:  MOVF   5F,W
02C0:  SUBWF  65,F
02C1:  BTFSC  03.2
02C2:  GOTO   2C9
02C3:  BTFSS  64.7
02C4:  GOTO   2CA
02C5:  MOVF   03,W
02C6:  XORLW  01
02C7:  MOVWF  03
02C8:  GOTO   2CA
02C9:  BCF    03.0
02CA:  RETURN
02CB:  MOVLW  8E
02CC:  MOVWF  77
02CD:  MOVF   5C,W
02CE:  SUBWF  77,F
02CF:  MOVF   5D,W
02D0:  MOVWF  79
02D1:  MOVF   5E,W
02D2:  MOVWF  78
02D3:  BSF    79.7
02D4:  MOVF   77,F
02D5:  BTFSC  03.2
02D6:  GOTO   2E2
02D7:  BCF    03.0
02D8:  MOVF   79,F
02D9:  BTFSS  03.2
02DA:  GOTO   2DE
02DB:  MOVF   78,F
02DC:  BTFSC  03.2
02DD:  GOTO   2E2
02DE:  RRF    79,F
02DF:  RRF    78,F
02E0:  DECFSZ 77,F
02E1:  GOTO   2D7
02E2:  BTFSS  5D.7
02E3:  GOTO   2E9
02E4:  COMF   78,F
02E5:  COMF   79,F
02E6:  INCF   78,F
02E7:  BTFSC  03.2
02E8:  INCF   79,F
02E9:  RETURN
02EA:  MOVLW  8E
02EB:  MOVWF  77
02EC:  MOVF   61,W
02ED:  MOVWF  78
02EE:  MOVF   60,W
02EF:  MOVWF  79
02F0:  CLRF   7A
02F1:  MOVF   78,F
02F2:  BTFSS  03.2
02F3:  GOTO   2FE
02F4:  MOVF   79,W
02F5:  MOVWF  78
02F6:  CLRF   79
02F7:  MOVLW  08
02F8:  SUBWF  77,F
02F9:  MOVF   78,F
02FA:  BTFSS  03.2
02FB:  GOTO   2FE
02FC:  CLRF   77
02FD:  GOTO   306
02FE:  BCF    03.0
02FF:  BTFSC  78.7
0300:  GOTO   305
0301:  RLF    79,F
0302:  RLF    78,F
0303:  DECF   77,F
0304:  GOTO   2FE
0305:  BCF    78.7
0306:  RETURN
0307:  MOVF   5C,W
0308:  BTFSC  03.2
0309:  GOTO   377
030A:  MOVWF  64
030B:  MOVF   60,W
030C:  BTFSC  03.2
030D:  GOTO   377
030E:  ADDWF  64,F
030F:  BTFSC  03.0
0310:  GOTO   318
0311:  MOVLW  7F
0312:  SUBWF  64,F
0313:  BTFSS  03.0
0314:  GOTO   377
0315:  BTFSC  03.2
0316:  GOTO   377
0317:  GOTO   31C
0318:  MOVLW  81
0319:  ADDWF  64,F
031A:  BTFSC  03.0
031B:  GOTO   377
031C:  MOVF   64,W
031D:  MOVWF  77
031E:  CLRF   78
031F:  CLRF   79
0320:  CLRF   7A
0321:  MOVF   5D,W
0322:  MOVWF  68
0323:  BSF    68.7
0324:  MOVF   5E,W
0325:  MOVWF  67
0326:  MOVF   5F,W
0327:  MOVWF  66
0328:  MOVLW  18
0329:  MOVWF  64
032A:  CLRF   65
032B:  BTFSS  66.0
032C:  GOTO   345
032D:  MOVF   63,W
032E:  ADDWF  7A,F
032F:  BTFSS  03.0
0330:  GOTO   337
0331:  INCF   79,F
0332:  BTFSS  03.2
0333:  GOTO   337
0334:  INCF   78,F
0335:  BTFSC  03.2
0336:  BSF    65.7
0337:  MOVF   62,W
0338:  ADDWF  79,F
0339:  BTFSS  03.0
033A:  GOTO   33E
033B:  INCF   78,F
033C:  BTFSC  03.2
033D:  BSF    65.7
033E:  MOVF   61,W
033F:  MOVWF  5E
0340:  BSF    5E.7
0341:  MOVF   5E,W
0342:  ADDWF  78,F
0343:  BTFSC  03.0
0344:  BSF    65.7
0345:  RLF    65,F
0346:  RRF    78,F
0347:  RRF    79,F
0348:  RRF    7A,F
0349:  RRF    68,F
034A:  RRF    67,F
034B:  RRF    66,F
034C:  BCF    03.0
034D:  DECFSZ 64,F
034E:  GOTO   32A
034F:  MOVLW  01
0350:  ADDWF  77,F
0351:  BTFSC  03.0
0352:  GOTO   377
0353:  BTFSC  78.7
0354:  GOTO   35C
0355:  RLF    68,F
0356:  RLF    7A,F
0357:  RLF    79,F
0358:  RLF    78,F
0359:  DECF   77,F
035A:  BTFSC  03.2
035B:  GOTO   377
035C:  BTFSS  68.7
035D:  GOTO   36D
035E:  INCF   7A,F
035F:  BTFSS  03.2
0360:  GOTO   36D
0361:  INCF   79,F
0362:  BTFSS  03.2
0363:  GOTO   36D
0364:  INCF   78,F
0365:  BTFSS  03.2
0366:  GOTO   36D
0367:  RRF    78,F
0368:  RRF    79,F
0369:  RRF    7A,F
036A:  INCF   77,F
036B:  BTFSC  03.2
036C:  GOTO   377
036D:  MOVF   5D,W
036E:  MOVWF  65
036F:  MOVF   61,W
0370:  XORWF  65,F
0371:  BTFSS  65.7
0372:  GOTO   375
0373:  BSF    78.7
0374:  GOTO   37B
0375:  BCF    78.7
0376:  GOTO   37B
0377:  CLRF   77
0378:  CLRF   78
0379:  CLRF   79
037A:  CLRF   7A
037B:  RETURN
*
04EF:  MOVF   49,W
04F0:  SUBLW  B6
04F1:  MOVWF  49
04F2:  CLRF   7A
04F3:  MOVF   4A,W
04F4:  MOVWF  4D
04F5:  BSF    4A.7
04F6:  BCF    03.0
04F7:  RRF    4A,F
04F8:  RRF    4B,F
04F9:  RRF    4C,F
04FA:  RRF    7A,F
04FB:  RRF    79,F
04FC:  RRF    78,F
04FD:  RRF    77,F
04FE:  DECFSZ 49,F
04FF:  GOTO   4F6
0500:  BTFSS  4D.7
0501:  GOTO   50D
0502:  COMF   77,F
0503:  COMF   78,F
0504:  COMF   79,F
0505:  COMF   7A,F
0506:  INCF   77,F
0507:  BTFSC  03.2
0508:  INCF   78,F
0509:  BTFSC  03.2
050A:  INCF   79,F
050B:  BTFSC  03.2
050C:  INCF   7A,F
050D:  RETURN
....................  
.................... #list 
....................  
.................... #include <def_16f877a.h> 
.................... //========================= Register Definitions ========================== 
.................... //-----Register Files------------------------------------------------------ 
.................... #byte INDF         =0x00 
.................... #byte TMR0         =0x01 
.................... #byte PCL          =0x02 
.................... #byte STATUS       =0x03 
.................... #byte FSR          =0x04 
.................... #byte PORTA    = 0x05 
.................... #byte PORTB    = 0x06 
.................... #byte PORTC    = 0x07 
.................... #byte PORTD    = 0x08 
.................... #byte PORTE    = 0x09 
.................... #byte PCLATH       =0x0A 
.................... #byte INTCON       =0x0B 
.................... #byte PIR1	   =0x0C 
.................... #byte PIR2	   =0x0D 
.................... #byte TMR1L	   =0x0E 
.................... #byte TMR1H        =0x0F 
.................... #byte T1CON        =0x10 
.................... #byte TMR2	   =0x11 
.................... #byte T2CON	   =0x12 
.................... #byte SSPBUF       =0x13 
.................... #byte SSPCON       =0x14 
.................... #byte CCPR1L       =0x15 
.................... #byte CCPR1H       =0x16 
.................... #byte CCP1CON      =0x17 
.................... #byte RCSTA        =0x18 
.................... #byte TXREG        =0x19 
.................... #byte RCREG        =0x1A 
.................... #byte CCPR2L       =0x1B 
.................... #byte CCPR2H       =0x1C 
.................... #byte CCP2CON      =0x1D 
.................... #byte ADRESH       =0x1E 
.................... #byte ADCON0	   =0x1F 
.................... #byte OPTION_REG   =0x81 
.................... //-------------- TRIS PORT ----------------------------- 
.................... #byte TRISA        =0x85 
.................... #byte TRISB	   =0x86 
.................... #byte TRISC	   =0x87 
.................... #byte TRISD        =0x88 
.................... #byte TRISE	   =0x89 
.................... #byte PIE1	   =0x8C 
.................... #byte PIE2	   =0x8D 
.................... #byte PCON	   =0x8E 
....................  
.................... #byte SSPCON2      =0x91 
.................... #byte PR2          =0x92 
.................... #byte SSPADD       =0x93 
.................... #byte SSPSTAT      =0x94 
....................  
.................... #byte TXSTA        =0x98 
.................... #byte SPBRG        =0x99 
....................  
.................... #byte ADRESL       =0x9E 
.................... #byte ADCON1       =0x9F 
....................  
.................... /*	bank 2 registers */ 
....................  
.................... #byte EEDATA	   =0x010C 
.................... #byte EEADR	   =0x010D 
.................... #byte EEDATH       =0x010E 
.................... #byte EEADRH       =0x010F 
....................  
.................... /*	bank 3 registers */ 
....................  
.................... #byte EECON1	   =0x018C 
.................... #byte EECON2	   =0x018D 
....................  
.................... //----- STATUS Bits -------------------------------------------------------- 
....................  
.................... // For Assembly Language - Note upper case 
.................... #define IRP 	7 
.................... #define RP1 	6 
.................... #define RP0 	5 
.................... #define NOT_TO 	4 
.................... #define NOT_PD 	3 
.................... #define Z 	2 
.................... #define DC 	1 
.................... #define C  	0 
....................  
.................... //---------------- TRIS BIT PORT-------------------------------------- 
.................... //------------------TRISA bits--------------------------- 
....................  
.................... #bit TRISA5     =0x85.5 
.................... #bit TRISA4     =0x85.4 
.................... #bit TRISA3     =0x85.3 
.................... #bit TRISA2     =0x85.2 
.................... #bit TRISA1     =0x85.1 
.................... #bit TRISA0     =0x85.0 
....................  
.................... //-----------------TRISB bits----------------------------- 
....................  
.................... #bit TRISB7     =0x86.7 
.................... #bit TRISB6     =0x86.6 
.................... #bit TRISB5     =0x86.5 
.................... #bit TRISB4     =0x86.4 
.................... #bit TRISB3     =0x86.3 
.................... #bit TRISB2     =0x86.2 
.................... #bit TRISB1     =0x86.1 
.................... #bit TRISB0     =0x86.0 
....................  
.................... //----------------TRISC bits------------------- 
....................  
.................... #bit TRISC7     =0x87.7 
.................... #bit TRISC6     =0x87.6 
.................... #bit TRISC5     =0x87.5 
.................... #bit TRISC4     =0x87.4 
.................... #bit TRISC3     =0x87.3 
.................... #bit TRISC2     =0x87.2 
.................... #bit TRISC1     =0x87.1 
.................... #bit TRISC0     =0x87.0 
.................... //------------------TRISD bit------------------ 
.................... #bit TRISD7     =0x88.7 
.................... #bit TRISD6     =0x88.6 
.................... #bit TRISD5     =0x88.5 
.................... #bit TRISD4     =0x88.4 
.................... #bit TRISD3     =0x88.3 
.................... #bit TRISD2     =0x88.2 
.................... #bit TRISD1     =0x88.1 
.................... #bit TRISD0     =0x88.0 
.................... //-------------TRISE bit---------------------- 
.................... #bit TRISE2     =0x89.2 
.................... #bit TRISE1     =0x89.1 
.................... #bit TRISE0     =0x89.0 
.................... //--------------------------------------------------------------------------- 
.................... //---------PORTA bits------------------ 
.................... #bit RA4			= 0x05.4 
.................... #bit RA3			= 0x05.3 
.................... #bit RA2			= 0x05.2 
.................... #bit RA1			= 0x05.1 
.................... #bit RA0			= 0x05.0 
.................... //---------PORTB bits------------------ 
.................... #bit RB7			= 0x06.7 
.................... #bit RB6			= 0x06.6 
.................... #bit RB5			= 0x06.5 
.................... #bit RB4			= 0x06.4 
.................... #bit RB3			= 0x06.3 
.................... #bit RB2			= 0x06.2 
.................... #bit RB1			= 0x06.1 
.................... #bit RB0			= 0x06.0 
.................... //---------PORTC bits------------------ 
.................... #bit RC7			= 0x07.7 
.................... #bit RC6			= 0x07.6 
.................... #bit RC5			= 0x07.5 
.................... #bit RC4			= 0x07.4 
.................... #bit RC3			= 0x07.3 
.................... #bit RC2			= 0x07.2 
.................... #bit RC1			= 0x07.1 
.................... #bit RC0			= 0x07.0 
.................... //---------PORTD bits------------------ 
.................... #bit RD7			= 0x08.7 
.................... #bit RD6			= 0x08.6 
.................... #bit RD5			= 0x08.5 
.................... #bit RD4			= 0x08.4 
.................... #bit RD3			= 0x08.3 
.................... #bit RD2			= 0x08.2 
.................... #bit RD1			= 0x08.1 
.................... #bit RD0			= 0x08.0 
.................... //---------PORTE bits------------------ 
.................... #bit RE2			= 0x09.2 
.................... #bit RE1			= 0x09.1 
.................... #bit RE0			= 0x09.0 
....................  
.................... //----- INTCON ------------------------------------------------------------- 
....................  
.................... #bit	GIE      = 0x0b.7 
.................... #bit	PEIE     = 0x0b.6 
.................... #bit	TMR0IE   = 0x0b.5 
.................... #bit	INTE     = 0x0b.4 
.................... #bit	RBIE     = 0x0b.3 
.................... #bit	TMR0IF   = 0x0b.2 
.................... #bit	INTF     = 0x0b.1 
.................... #bit	RBIF     = 0x0b.0 
....................  
.................... //----- PIR1 --------------------------------------------------------------- 
....................  
.................... #bit pspif     = 0x0c.7 
.................... #bit adif      = 0x0c.6 
.................... #bit rcif      = 0x0c.5 
.................... #bit txif      = 0x0c.4 
.................... #bit sspif     = 0x0c.3 
.................... #bit ccp1if    = 0x0c.2 
.................... #bit tmr2if    = 0x0c.1 
.................... #bit tmr1if    = 0x0c.0 
....................  
.................... //----- PIR2 --------------------------------------------------------------- 
....................  
.................... #bit cmif      = 0x0d.6 
.................... #bit eeif      = 0x0d.4 
.................... #bit bclif     = 0x0d.3 
.................... #bit ccp2if    = 0x0d.0 
....................  
.................... //----- PIE1 --------------------------------------------------------------- 
....................  
.................... #bit pspie     = 0x8c.7 
.................... #bit adie      = 0x8c.6 
.................... #bit rcie      = 0x8c.5 
.................... #bit txie      = 0x8c.4 
.................... #bit sspie     = 0x8c.3 
.................... #bit ccp1ie    = 0x8c.2 
.................... #bit tmr2ie    = 0x8c.1 
.................... #bit tmr1ie    = 0x8c.0 
....................  
.................... //----- PIE2 --------------------------------------------------------------- 
....................  
.................... #bit cmie      = 0x8d.6 
.................... #bit eeie      = 0x8d.4 
.................... #bit bclie     = 0x8d.3 
.................... #bit ccp2ie    = 0x8d.0 
.................... //----- T1CON Bits --------------------------------------------------------- 
.................... #bit T1CKPS1    =0x10.5 
.................... #bit T1CKPS0    =0x10.4 
.................... #bit T1OSCEN    =0x10.3 
.................... #bit T1SYNC     =0x10.2 
.................... #bit TMR1CS     =0x10.1 
.................... #bit TMR1ON     =0x10.0 
....................  
.................... //----- T2CON Bits --------------------------------------------------------- 
.................... #bit TOUTPS3    =0x12.6 
.................... #bit TOUTPS2    =0x12.5 
.................... #bit TOUTPS1    =0x12.4 
.................... #bit TOUTPS0    =0x12.3 
.................... #bit TMR2ON     =0x12.2 
.................... #bit T2CKPS1    =0x12.1 
.................... #bit T2CKPS0    =0x12.0 
....................  
.................... //-------------SSPCON bits-------------------------- 
.................... #bit WCOL       =0x14.7 
.................... #bit SSPOV      =0x14.6 
.................... #bit SSPEN      =0x14.5 
.................... #bit CKP        =0x14.4 
.................... #bit SSPM3      =0x14.3 
.................... #bit SSPM2      =0x14.2 
.................... #bit SSPM1      =0x14.1 
.................... #bit SSPM0      =0x14.0 
....................  
.................... //---------------CCP1CON bits-------- 
.................... #bit CCP1X      =0x17.5 
.................... #bit CCP1Y      =0x17.4 
.................... #bit CCP1M3     =0x17.3 
.................... #bit CCP1M2     =0x17.2 
.................... #bit CCP1M1     =0x17.1 
.................... #bit CCP1M0     =0x17.0 
....................  
.................... //---------------RCSTA bits------------------- 
....................  
.................... #bit SPEN       =0x18.7 
.................... #bit RX9        =0x18.6 
.................... #bit SREN       =0x18.5 
.................... #bit CREN       =0x18.4 
.................... #bit ADDEN      =0x18.3 
.................... #bit FERR       =0x18.2 
.................... #bit OERR       =0x18.1 
.................... #bit RX9D       =0x18.0 
....................  
.................... //-----------------------CCP2CON bits---------- 
....................  
.................... #bit CCP2X      =0x1D.5 
.................... #bit CCP2Y      =0x1D.4 
.................... #bit CCP2M3     =0x1D.3 
.................... #bit CCP2M2     =0x1D.2 
.................... #bit CCP2M1     =0x1D.1 
.................... #bit CCP2M0     =0x1D.0 
....................  
.................... //----- ADCON0 Bits -------------------------------------------------------- 
.................... #bit ADCS1      =0x1F.7 
.................... #bit ADCS0      =0x1F.6 
.................... #bit CHS2       =0x1F.5 
.................... #bit CHS1       =0x1F.4 
.................... #bit CHS0       =0x1F.3 
.................... #bit ADGO       =0x1F.2 
.................... #bit ADON       =0x1F.0 
....................  
.................... //----- OPTION_reg Bits -------------------------------------------------------- 
....................  
.................... #bit RBPU       =0x81.7 
.................... #bit INTEDG     =0x81.6 
.................... #bit T0CS       =0x81.5 
.................... #bit T0SE       =0x81.4 
.................... #bit PSA        =0x81.3 
.................... #bit PS2        =0x81.2 
.................... #bit PS1        =0x81.1 
.................... #bit PS0        =0x81.0 
.................... //----- PCON Bits ---------------------------------------------------------- 
....................  
.................... #bit POR        =0x8E.1 
.................... #bit BOD        =0x8E.0 
....................  
.................... //-----------SSPCON2 bits--------------------------------------------- 
....................  
.................... #bit GCEN       =0x91.7 
.................... #bit ACKSTAT    =0x91.6 
.................... #bit ACKDT      =0x91.5 
.................... #bit ACKEN      =0x91.4 
.................... #bit RCEN       =0x91.3 
.................... #bit PEN        =0x91.2 
.................... #bit RSEN       =0x91.1 
.................... #bit SEN        =0x91.0 
....................  
.................... //---------------------SSPSTAT bits------------------------ 
....................  
.................... #bit STAT_SMP   =0x94.7 
.................... #bit STAT_CKE   =0x94.6 
.................... #bit STAT_DA    =0x94.5 
.................... #bit STAT_P     =0x94.4 
.................... #bit STAT_S     =0x94.3 
.................... #bit STAT_RW    =0x94.2 
.................... #bit STAT_UA    =0x94.1 
.................... #bit STAT_BF    =0x94.0 
....................  
.................... //----------------TXSTA bits----------------- 
....................  
.................... #bit CSRC       =0x98.7 
.................... #bit TX9        =0x98.6 
.................... #bit TXEN       =0x98.5 
.................... #bit SYNC       =0x98.4 
.................... #bit BRGH       =0x98.2 
.................... #bit TRMT       =0x98.1 
.................... #bit TX9D       =0x98.0 
....................  
.................... //--------------ADCON1 bits--------------- 
....................  
.................... #bit ADFM       =0x9F.7 
.................... #bit ADCS2      =0x9F.6 
.................... #bit PCFG3      =0x9F.3 
.................... #bit PCFG2      =0x9F.2 
.................... #bit PCFG1      =0x9F.1 
.................... #bit PCFG0      =0x9F.0 
....................  
.................... //-----------EECON1 bits---------- 
....................  
.................... #bit EEPGD      =0x018C.7 
.................... #bit WRERR      =0x018C.3 
.................... #bit WREN       =0x018C.2 
.................... #bit WR         =0x018C.1 
.................... #bit RD         =0x018C.0 
....................  
....................  
.................... #device ADC = 16 
....................  
.................... #FUSES NOWDT      //No Watch Dog Timer 
.................... #FUSES NOBROWNOUT //No brownout reset 
.................... #FUSES NOLVP      //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal = 20000000) 
*
055E:  MOVLW  52
055F:  MOVWF  04
0560:  BCF    03.7
0561:  MOVF   00,W
0562:  BTFSC  03.2
0563:  GOTO   571
0564:  MOVLW  06
0565:  MOVWF  78
0566:  CLRF   77
0567:  DECFSZ 77,F
0568:  GOTO   567
0569:  DECFSZ 78,F
056A:  GOTO   566
056B:  MOVLW  7B
056C:  MOVWF  77
056D:  DECFSZ 77,F
056E:  GOTO   56D
056F:  DECFSZ 00,F
0570:  GOTO   564
....................  
.................... #include "def_lcd.c" 
.................... #define RS RC3 
.................... #define RW RC4 
.................... #define E RC5 
.................... #define LCD PORTD 
....................  
.................... // CONST Char gd[4][21] = {"    Thap Chuong     ", 
.................... //                         "                    ", 
.................... //                         "Sensor 1:           ", 
.................... //                         "Sensor 2:           "}; 
.................... char arrNumber[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'}; 
*
0754:  MOVLW  30
0755:  BCF    03.5
0756:  MOVWF  27
0757:  MOVLW  31
0758:  MOVWF  28
0759:  MOVLW  32
075A:  MOVWF  29
075B:  MOVLW  33
075C:  MOVWF  2A
075D:  MOVLW  34
075E:  MOVWF  2B
075F:  MOVLW  35
0760:  MOVWF  2C
0761:  MOVLW  36
0762:  MOVWF  2D
0763:  MOVLW  37
0764:  MOVWF  2E
0765:  MOVLW  38
0766:  MOVWF  2F
0767:  MOVLW  39
0768:  MOVWF  30
....................  
.................... void ghima(int8 data) 
.................... { 
....................   LCD = data; 
....................   RS = 0; 
....................   RW = 0; 
....................   E = 1; 
....................   E = 0; 
....................   delay_us(1500); 
.................... } 
.................... void hienthi(int8 data) 
.................... { 
....................   LCD = data; 
....................   RS = 1; 
....................   RW = 0; 
....................   E = 1; 
....................   E = 0; 
....................   delay_us(1500); 
.................... } 
....................  
.................... void initLCD() 
.................... { 
....................   TRISD = 0; 
....................   TRISC3 = TRISC4 = TRISC5 = 0; 
....................  
....................   ghima(0x38); //giao tiep 8bit, hien thi 2 dong, kich thuoc 5x7 
....................   ghima(0x0C); //bat man hinh 
....................   ghima(0x01); //xoa man hinh 
....................   ghima(0x80); // dua con tro ve du dong 1 
....................  
....................   // int8 i, j; 
....................   // for (i = 0; i < 4; i++) 
....................   //   for (j = 0; j < 20; j++) 
....................   //   { 
....................   //     hienthi(gd[i][j]); 
....................   //     if ((j == 19) && (i == 0)) 
....................   //       ghima(0xc0); 
....................   //     if ((j == 19) && (i == 1)) 
....................   //       ghima(0x94); 
....................   //     if ((j == 19) && (i == 2)) 
....................   //       ghima(0xd4); 
....................   //   } 
.................... } 
....................  
.................... #include "floor.c" 
.................... float32 FLOOR(float32 x) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
*
037C:  BCF    5B.0
....................    y = x; 
037D:  MOVF   50,W
037E:  MOVWF  54
037F:  MOVF   4F,W
0380:  MOVWF  53
0381:  MOVF   4E,W
0382:  MOVWF  52
0383:  MOVF   4D,W
0384:  MOVWF  51
....................  
....................    if (x < 0) 
0385:  MOVF   50,W
0386:  MOVWF  5F
0387:  MOVF   4F,W
0388:  MOVWF  5E
0389:  MOVF   4E,W
038A:  MOVWF  5D
038B:  MOVF   4D,W
038C:  MOVWF  5C
038D:  CLRF   63
038E:  CLRF   62
038F:  CLRF   61
0390:  CLRF   60
0391:  CALL   28C
0392:  BTFSS  03.0
0393:  GOTO   398
....................    { 
....................       s = 1; 
0394:  BSF    5B.0
....................       y = -y; 
0395:  MOVF   52,W
0396:  XORLW  80
0397:  MOVWF  52
....................    } 
....................  
....................    if (y <= 32768.0) 
0398:  MOVF   54,W
0399:  MOVWF  5F
039A:  MOVF   53,W
039B:  MOVWF  5E
039C:  MOVF   52,W
039D:  MOVWF  5D
039E:  MOVF   51,W
039F:  MOVWF  5C
03A0:  CLRF   63
03A1:  CLRF   62
03A2:  CLRF   61
03A3:  MOVLW  8E
03A4:  MOVWF  60
03A5:  CALL   28C
03A6:  BTFSC  03.0
03A7:  GOTO   3AA
03A8:  BTFSS  03.2
03A9:  GOTO   3C1
....................       res = (float32)(unsigned int16)y; 
03AA:  MOVF   54,W
03AB:  MOVWF  5F
03AC:  MOVF   53,W
03AD:  MOVWF  5E
03AE:  MOVF   52,W
03AF:  MOVWF  5D
03B0:  MOVF   51,W
03B1:  MOVWF  5C
03B2:  CALL   2CB
03B3:  MOVF   79,W
03B4:  MOVWF  61
03B5:  MOVF   78,W
03B6:  MOVWF  60
03B7:  CALL   2EA
03B8:  MOVF   7A,W
03B9:  MOVWF  58
03BA:  MOVF   79,W
03BB:  MOVWF  57
03BC:  MOVF   78,W
03BD:  MOVWF  56
03BE:  MOVF   77,W
03BF:  MOVWF  55
03C0:  GOTO   47E
....................  
....................    else if (y < 10000000.0) 
03C1:  MOVF   54,W
03C2:  MOVWF  5F
03C3:  MOVF   53,W
03C4:  MOVWF  5E
03C5:  MOVF   52,W
03C6:  MOVWF  5D
03C7:  MOVF   51,W
03C8:  MOVWF  5C
03C9:  MOVLW  80
03CA:  MOVWF  63
03CB:  MOVLW  96
03CC:  MOVWF  62
03CD:  MOVLW  18
03CE:  MOVWF  61
03CF:  MOVLW  96
03D0:  MOVWF  60
03D1:  CALL   28C
03D2:  BTFSS  03.0
03D3:  GOTO   476
....................    { 
....................       l = (unsigned int16)(y * 0.000030517578125); 
03D4:  MOVF   54,W
03D5:  MOVWF  5F
03D6:  MOVF   53,W
03D7:  MOVWF  5E
03D8:  MOVF   52,W
03D9:  MOVWF  5D
03DA:  MOVF   51,W
03DB:  MOVWF  5C
03DC:  CLRF   63
03DD:  CLRF   62
03DE:  CLRF   61
03DF:  MOVLW  70
03E0:  MOVWF  60
03E1:  CALL   307
03E2:  MOVF   7A,W
03E3:  MOVWF  5F
03E4:  MOVF   79,W
03E5:  MOVWF  5E
03E6:  MOVF   78,W
03E7:  MOVWF  5D
03E8:  MOVF   77,W
03E9:  MOVWF  5C
03EA:  CALL   2CB
03EB:  MOVF   79,W
03EC:  MOVWF  5A
03ED:  MOVF   78,W
03EE:  MOVWF  59
....................       y = 32768.0 * (y * 0.000030517578125 - (float32)l); 
03EF:  MOVF   54,W
03F0:  MOVWF  5F
03F1:  MOVF   53,W
03F2:  MOVWF  5E
03F3:  MOVF   52,W
03F4:  MOVWF  5D
03F5:  MOVF   51,W
03F6:  MOVWF  5C
03F7:  CLRF   63
03F8:  CLRF   62
03F9:  CLRF   61
03FA:  MOVLW  70
03FB:  MOVWF  60
03FC:  CALL   307
03FD:  MOVF   7A,W
03FE:  MOVWF  5F
03FF:  MOVF   79,W
0400:  MOVWF  5E
0401:  MOVF   78,W
0402:  MOVWF  5D
0403:  MOVF   77,W
0404:  MOVWF  5C
0405:  MOVF   5A,W
0406:  MOVWF  61
0407:  MOVF   59,W
0408:  MOVWF  60
0409:  CALL   2EA
040A:  BSF    03.1
040B:  MOVF   5F,W
040C:  MOVWF  63
040D:  MOVF   5E,W
040E:  MOVWF  62
040F:  MOVF   5D,W
0410:  MOVWF  61
0411:  MOVF   5C,W
0412:  MOVWF  60
0413:  MOVF   7A,W
0414:  MOVWF  67
0415:  MOVF   79,W
0416:  MOVWF  66
0417:  MOVF   78,W
0418:  MOVWF  65
0419:  MOVF   77,W
041A:  MOVWF  64
041B:  CALL   081
041C:  CLRF   5F
041D:  CLRF   5E
041E:  CLRF   5D
041F:  MOVLW  8E
0420:  MOVWF  5C
0421:  MOVF   7A,W
0422:  MOVWF  63
0423:  MOVF   79,W
0424:  MOVWF  62
0425:  MOVF   78,W
0426:  MOVWF  61
0427:  MOVF   77,W
0428:  MOVWF  60
0429:  CALL   307
042A:  MOVF   7A,W
042B:  MOVWF  54
042C:  MOVF   79,W
042D:  MOVWF  53
042E:  MOVF   78,W
042F:  MOVWF  52
0430:  MOVF   77,W
0431:  MOVWF  51
....................       res = 32768.0 * (float32)l; 
0432:  MOVF   5A,W
0433:  MOVWF  61
0434:  MOVF   59,W
0435:  MOVWF  60
0436:  CALL   2EA
0437:  CLRF   5F
0438:  CLRF   5E
0439:  CLRF   5D
043A:  MOVLW  8E
043B:  MOVWF  5C
043C:  MOVF   7A,W
043D:  MOVWF  63
043E:  MOVF   79,W
043F:  MOVWF  62
0440:  MOVF   78,W
0441:  MOVWF  61
0442:  MOVF   77,W
0443:  MOVWF  60
0444:  CALL   307
0445:  MOVF   7A,W
0446:  MOVWF  58
0447:  MOVF   79,W
0448:  MOVWF  57
0449:  MOVF   78,W
044A:  MOVWF  56
044B:  MOVF   77,W
044C:  MOVWF  55
....................       res += (float32)(unsigned int16)y; 
044D:  MOVF   54,W
044E:  MOVWF  5F
044F:  MOVF   53,W
0450:  MOVWF  5E
0451:  MOVF   52,W
0452:  MOVWF  5D
0453:  MOVF   51,W
0454:  MOVWF  5C
0455:  CALL   2CB
0456:  MOVF   79,W
0457:  MOVWF  61
0458:  MOVF   78,W
0459:  MOVWF  60
045A:  CALL   2EA
045B:  BCF    03.1
045C:  MOVF   58,W
045D:  MOVWF  63
045E:  MOVF   57,W
045F:  MOVWF  62
0460:  MOVF   56,W
0461:  MOVWF  61
0462:  MOVF   55,W
0463:  MOVWF  60
0464:  MOVF   7A,W
0465:  MOVWF  67
0466:  MOVF   79,W
0467:  MOVWF  66
0468:  MOVF   78,W
0469:  MOVWF  65
046A:  MOVF   77,W
046B:  MOVWF  64
046C:  CALL   081
046D:  MOVF   7A,W
046E:  MOVWF  58
046F:  MOVF   79,W
0470:  MOVWF  57
0471:  MOVF   78,W
0472:  MOVWF  56
0473:  MOVF   77,W
0474:  MOVWF  55
....................    } 
0475:  GOTO   47E
....................  
....................    else 
....................       res = y; 
0476:  MOVF   54,W
0477:  MOVWF  58
0478:  MOVF   53,W
0479:  MOVWF  57
047A:  MOVF   52,W
047B:  MOVWF  56
047C:  MOVF   51,W
047D:  MOVWF  55
....................  
....................    y = y - (float32)(unsigned int16)y; 
047E:  MOVF   54,W
047F:  MOVWF  5F
0480:  MOVF   53,W
0481:  MOVWF  5E
0482:  MOVF   52,W
0483:  MOVWF  5D
0484:  MOVF   51,W
0485:  MOVWF  5C
0486:  CALL   2CB
0487:  MOVF   79,W
0488:  MOVWF  61
0489:  MOVF   78,W
048A:  MOVWF  60
048B:  CALL   2EA
048C:  BSF    03.1
048D:  MOVF   54,W
048E:  MOVWF  63
048F:  MOVF   53,W
0490:  MOVWF  62
0491:  MOVF   52,W
0492:  MOVWF  61
0493:  MOVF   51,W
0494:  MOVWF  60
0495:  MOVF   7A,W
0496:  MOVWF  67
0497:  MOVF   79,W
0498:  MOVWF  66
0499:  MOVF   78,W
049A:  MOVWF  65
049B:  MOVF   77,W
049C:  MOVWF  64
049D:  CALL   081
049E:  MOVF   7A,W
049F:  MOVWF  54
04A0:  MOVF   79,W
04A1:  MOVWF  53
04A2:  MOVF   78,W
04A3:  MOVWF  52
04A4:  MOVF   77,W
04A5:  MOVWF  51
....................  
....................    if (s) 
04A6:  BTFSS  5B.0
04A7:  GOTO   4AB
....................       res = -res; 
04A8:  MOVF   56,W
04A9:  XORLW  80
04AA:  MOVWF  56
....................  
....................    if (y != 0) 
04AB:  MOVF   54,W
04AC:  MOVWF  5F
04AD:  MOVF   53,W
04AE:  MOVWF  5E
04AF:  MOVF   52,W
04B0:  MOVWF  5D
04B1:  MOVF   51,W
04B2:  MOVWF  5C
04B3:  CLRF   63
04B4:  CLRF   62
04B5:  CLRF   61
04B6:  CLRF   60
04B7:  CALL   28C
04B8:  BTFSC  03.2
04B9:  GOTO   4D3
....................    { 
....................       if (s == 1) 
04BA:  BTFSS  5B.0
04BB:  GOTO   4D3
....................          res -= 1.0; 
04BC:  BSF    03.1
04BD:  MOVF   58,W
04BE:  MOVWF  63
04BF:  MOVF   57,W
04C0:  MOVWF  62
04C1:  MOVF   56,W
04C2:  MOVWF  61
04C3:  MOVF   55,W
04C4:  MOVWF  60
04C5:  CLRF   67
04C6:  CLRF   66
04C7:  CLRF   65
04C8:  MOVLW  7F
04C9:  MOVWF  64
04CA:  CALL   081
04CB:  MOVF   7A,W
04CC:  MOVWF  58
04CD:  MOVF   79,W
04CE:  MOVWF  57
04CF:  MOVF   78,W
04D0:  MOVWF  56
04D1:  MOVF   77,W
04D2:  MOVWF  55
....................    } 
....................    if (x == 0) 
04D3:  MOVF   50,W
04D4:  MOVWF  5F
04D5:  MOVF   4F,W
04D6:  MOVWF  5E
04D7:  MOVF   4E,W
04D8:  MOVWF  5D
04D9:  MOVF   4D,W
04DA:  MOVWF  5C
04DB:  CLRF   63
04DC:  CLRF   62
04DD:  CLRF   61
04DE:  CLRF   60
04DF:  CALL   28C
04E0:  BTFSS  03.2
04E1:  GOTO   4E6
....................       res = 0; 
04E2:  CLRF   58
04E3:  CLRF   57
04E4:  CLRF   56
04E5:  CLRF   55
....................  
....................    return (res); 
04E6:  MOVF   55,W
04E7:  MOVWF  77
04E8:  MOVF   56,W
04E9:  MOVWF  78
04EA:  MOVF   57,W
04EB:  MOVWF  79
04EC:  MOVF   58,W
04ED:  MOVWF  7A
04EE:  RETURN
.................... } 
....................  
....................  
.................... #define triac1 RC6 
.................... // new 
.................... #define triac1Out PIN_C6 
....................  
.................... #define triac2 RC7 
.................... // new 
.................... #define triac2Out PIN_C7 
....................  
.................... #define relay RC1 
.................... // new 
.................... #define relayOut PIN_C1 
....................  
.................... // set angle (10 levels). more angle, weaker motor 
.................... float32 angleStarter = 1; 
.................... float32 angleRingTheBell = 6; 
....................  
.................... int32 valTimer0SetStarter = (int32)FLOOR((13.1072 - angleStarter) / 0.0512) - 1; 
.................... int32 valTimer0SetRingTheBell = (int32)FLOOR((13.1072 - angleRingTheBell) / 0.0512) - 1; 
....................  
.................... volatile signed int16 count = 0; 
.................... int8 countTime = 0, anglePercent = 0; 
.................... int1 flagForward = true, flagStarter = true, flagSTOP = true; 
....................  
.................... #INT_EXT 
.................... void ext_isr() 
.................... { 
....................    // cross zero point detector 50Hz >> 1/50/2 sec per half pulse after diode brighet 
....................  
....................    output_low(triac1Out); 
*
003F:  BCF    46.6
0040:  MOVF   46,W
0041:  BSF    03.5
0042:  MOVWF  07
0043:  BCF    03.5
0044:  BCF    07.6
....................    output_low(triac2Out); 
0045:  BCF    46.7
0046:  MOVF   46,W
0047:  BSF    03.5
0048:  MOVWF  07
0049:  BCF    03.5
004A:  BCF    07.7
....................  
....................    if (flagStarter) 
004B:  BTFSS  45.1
004C:  GOTO   050
....................       set_timer0(valTimer0SetStarter); 
004D:  MOVF   39,W
004E:  MOVWF  01
004F:  GOTO   052
....................    else 
....................       set_timer0(valTimer0SetRingTheBell); 
0050:  MOVF   3D,W
0051:  MOVWF  01
....................  
....................    clear_interrupt(INT_TIMER0); 
0052:  BCF    0B.2
....................    enable_interrupts(INT_TIMER0); 
0053:  BSF    0B.5
....................    clear_interrupt(INT_EXT); // waiting for next EXT 
0054:  BCF    0B.1
.................... } 
....................  
0055:  BCF    0B.1
0056:  BCF    0A.3
0057:  BCF    0A.4
0058:  GOTO   025
.................... #INT_TIMER0 
.................... void timer0_isr() 
.................... { 
....................    if (flagForward && !flagSTOP) 
0059:  BTFSS  45.0
005A:  GOTO   064
005B:  BTFSC  45.2
005C:  GOTO   064
....................       output_high(triac1Out); 
005D:  BCF    46.6
005E:  MOVF   46,W
005F:  BSF    03.5
0060:  MOVWF  07
0061:  BCF    03.5
0062:  BSF    07.6
0063:  GOTO   06E
....................    else if (!flagForward && !flagSTOP) 
0064:  BTFSC  45.0
0065:  GOTO   06E
0066:  BTFSC  45.2
0067:  GOTO   06E
....................       output_high(triac2Out); 
0068:  BCF    46.7
0069:  MOVF   46,W
006A:  BSF    03.5
006B:  MOVWF  07
006C:  BCF    03.5
006D:  BSF    07.7
....................  
....................    // set_timer0(200.00); 
....................    disable_interrupts(INT_TIMER0); 
006E:  BCF    0B.5
.................... } 
....................  
006F:  BCF    0B.2
0070:  BCF    0A.3
0071:  BCF    0A.4
0072:  GOTO   025
.................... #INT_CCP1 
.................... void ccp1_isr() 
.................... { 
....................    if (RC0) 
0073:  BTFSS  07.0
0074:  GOTO   079
....................       ++count; 
0075:  INCF   41,F
0076:  BTFSC  03.2
0077:  INCF   42,F
0078:  GOTO   07D
....................    else 
....................       --count; 
0079:  MOVF   41,W
007A:  BTFSC  03.2
007B:  DECF   42,F
007C:  DECF   41,F
....................    // clear_interrupt(INT_CCP1); 
007D:  BCF    0C.2
007E:  BCF    0A.3
007F:  BCF    0A.4
0080:  GOTO   025
.................... } 
....................  
.................... void FORWARD() 
.................... { 
....................    output_low(triac2Out); 
*
0577:  BCF    46.7
0578:  MOVF   46,W
0579:  BSF    03.5
057A:  MOVWF  07
057B:  BCF    03.5
057C:  BCF    07.7
....................  
....................    flagForward = true; 
057D:  BSF    45.0
....................    flagSTOP = false; 
057E:  BCF    45.2
057F:  RETURN
.................... } 
.................... void REVERSE() 
.................... { 
....................    output_low(triac1Out); 
*
058E:  BCF    46.6
058F:  MOVF   46,W
0590:  BSF    03.5
0591:  MOVWF  07
0592:  BCF    03.5
0593:  BCF    07.6
....................    flagForward = flagSTOP = false; 
0594:  BCF    45.2
0595:  BCF    45.0
0596:  RETURN
.................... } 
.................... void STOP() 
.................... { 
....................    flagSTOP = true; 
*
0580:  BSF    45.2
....................    output_low(triac1Out); 
0581:  BCF    46.6
0582:  MOVF   46,W
0583:  BSF    03.5
0584:  MOVWF  07
0585:  BCF    03.5
0586:  BCF    07.6
....................    output_low(triac2Out); 
0587:  BCF    46.7
0588:  MOVF   46,W
0589:  BSF    03.5
058A:  MOVWF  07
058B:  BCF    03.5
058C:  BCF    07.7
058D:  RETURN
.................... } 
....................  
.................... void starter() 
.................... { 
....................    // half rotate 
....................    while (count <= 200) 
*
0597:  BTFSC  42.7
0598:  GOTO   5A0
0599:  MOVF   42,F
059A:  BTFSS  03.2
059B:  GOTO   5A2
059C:  MOVF   41,W
059D:  SUBLW  C8
059E:  BTFSS  03.0
059F:  GOTO   5A2
....................       FORWARD(); 
05A0:  CALL   577
05A1:  GOTO   597
....................    STOP(); 
05A2:  CALL   580
....................    while (count >= 0) 
05A3:  BTFSC  42.7
05A4:  GOTO   5A7
....................       STOP(); 
05A5:  CALL   580
05A6:  GOTO   5A3
....................    while (count >= -200) 
05A7:  BTFSS  42.7
05A8:  GOTO   5B4
05A9:  MOVF   42,W
05AA:  SUBLW  FE
05AB:  BTFSC  03.0
05AC:  GOTO   5B6
05AD:  XORLW  FF
05AE:  BTFSS  03.2
05AF:  GOTO   5B4
05B0:  MOVF   41,W
05B1:  SUBLW  37
05B2:  BTFSC  03.0
05B3:  GOTO   5B6
....................       REVERSE(); 
05B4:  CALL   58E
05B5:  GOTO   5A7
....................    STOP(); 
05B6:  CALL   580
....................    while (count <= 0) 
05B7:  BTFSC  42.7
05B8:  GOTO   5C0
05B9:  MOVF   42,F
05BA:  BTFSS  03.2
05BB:  GOTO   5C2
05BC:  MOVF   41,W
05BD:  SUBLW  00
05BE:  BTFSS  03.0
05BF:  GOTO   5C2
....................       STOP(); 
05C0:  CALL   580
05C1:  GOTO   5B7
....................  
....................    // 1 rotate 
....................    while (count <= 400) 
05C2:  BTFSC  42.7
05C3:  GOTO   5CE
05C4:  MOVF   42,W
05C5:  SUBLW  01
05C6:  BTFSS  03.0
05C7:  GOTO   5D0
05C8:  BTFSS  03.2
05C9:  GOTO   5CE
05CA:  MOVF   41,W
05CB:  SUBLW  90
05CC:  BTFSS  03.0
05CD:  GOTO   5D0
....................       FORWARD(); 
05CE:  CALL   577
05CF:  GOTO   5C2
....................    STOP(); 
05D0:  CALL   580
....................    while (count >= 0) 
05D1:  BTFSC  42.7
05D2:  GOTO   5D5
....................       STOP(); 
05D3:  CALL   580
05D4:  GOTO   5D1
....................    while (count >= -400) 
05D5:  BTFSS  42.7
05D6:  GOTO   5E2
05D7:  MOVF   42,W
05D8:  SUBLW  FD
05D9:  BTFSC  03.0
05DA:  GOTO   5E4
05DB:  XORLW  FF
05DC:  BTFSS  03.2
05DD:  GOTO   5E2
05DE:  MOVF   41,W
05DF:  SUBLW  6F
05E0:  BTFSC  03.0
05E1:  GOTO   5E4
....................       REVERSE(); 
05E2:  CALL   58E
05E3:  GOTO   5D5
....................    STOP(); 
05E4:  CALL   580
....................    while (count <= 0) 
05E5:  BTFSC  42.7
05E6:  GOTO   5EE
05E7:  MOVF   42,F
05E8:  BTFSS  03.2
05E9:  GOTO   5F0
05EA:  MOVF   41,W
05EB:  SUBLW  00
05EC:  BTFSS  03.0
05ED:  GOTO   5F0
....................       STOP(); 
05EE:  CALL   580
05EF:  GOTO   5E5
....................  
....................    // 2 rotates 
....................    while (count <= 800) 
05F0:  BTFSC  42.7
05F1:  GOTO   5FC
05F2:  MOVF   42,W
05F3:  SUBLW  03
05F4:  BTFSS  03.0
05F5:  GOTO   5FE
05F6:  BTFSS  03.2
05F7:  GOTO   5FC
05F8:  MOVF   41,W
05F9:  SUBLW  20
05FA:  BTFSS  03.0
05FB:  GOTO   5FE
....................       FORWARD(); 
05FC:  CALL   577
05FD:  GOTO   5F0
....................    STOP(); 
05FE:  CALL   580
....................    while (count >= 0) 
05FF:  BTFSC  42.7
0600:  GOTO   603
....................       STOP(); 
0601:  CALL   580
0602:  GOTO   5FF
....................    while (count >= -800) 
0603:  BTFSS  42.7
0604:  GOTO   610
0605:  MOVF   42,W
0606:  SUBLW  FB
0607:  BTFSC  03.0
0608:  GOTO   612
0609:  XORLW  FF
060A:  BTFSS  03.2
060B:  GOTO   610
060C:  MOVF   41,W
060D:  SUBLW  DF
060E:  BTFSC  03.0
060F:  GOTO   612
....................       REVERSE(); 
0610:  CALL   58E
0611:  GOTO   603
....................    STOP(); 
0612:  CALL   580
....................    while (count <= 0) 
0613:  BTFSC  42.7
0614:  GOTO   61C
0615:  MOVF   42,F
0616:  BTFSS  03.2
0617:  GOTO   61E
0618:  MOVF   41,W
0619:  SUBLW  00
061A:  BTFSS  03.0
061B:  GOTO   61E
....................       STOP(); 
061C:  CALL   580
061D:  GOTO   613
....................  
....................    // 3 rotates 1 side 
....................    while (count <= 1200) 
061E:  BTFSC  42.7
061F:  GOTO   62A
0620:  MOVF   42,W
0621:  SUBLW  04
0622:  BTFSS  03.0
0623:  GOTO   62C
0624:  BTFSS  03.2
0625:  GOTO   62A
0626:  MOVF   41,W
0627:  SUBLW  B0
0628:  BTFSS  03.0
0629:  GOTO   62C
....................       FORWARD(); 
062A:  CALL   577
062B:  GOTO   61E
....................    STOP(); 
062C:  CALL   580
....................  
....................    flagStarter = false; 
062D:  BCF    45.1
062E:  BCF    0A.3
062F:  BCF    0A.4
0630:  GOTO   793 (RETURN)
.................... } 
....................  
.................... void RingTheBell() 
.................... { 
....................    while (count >= 400) 
0631:  BTFSC  42.7
0632:  GOTO   640
0633:  MOVF   42,W
0634:  SUBLW  00
0635:  BTFSC  03.0
0636:  GOTO   640
0637:  XORLW  FF
0638:  BTFSS  03.2
0639:  GOTO   63E
063A:  MOVF   41,W
063B:  SUBLW  8F
063C:  BTFSC  03.0
063D:  GOTO   640
....................       STOP(); 
063E:  CALL   580
063F:  GOTO   631
....................  
....................    while (count >= -800) 
0640:  BTFSS  42.7
0641:  GOTO   64D
0642:  MOVF   42,W
0643:  SUBLW  FB
0644:  BTFSC  03.0
0645:  GOTO   64F
0646:  XORLW  FF
0647:  BTFSS  03.2
0648:  GOTO   64D
0649:  MOVF   41,W
064A:  SUBLW  DF
064B:  BTFSC  03.0
064C:  GOTO   64F
....................       REVERSE(); 
064D:  CALL   58E
064E:  GOTO   640
....................    STOP(); 
064F:  CALL   580
....................  
....................    while (count <= -400) 
0650:  BTFSS  42.7
0651:  GOTO   65E
0652:  MOVF   42,W
0653:  SUBLW  FE
0654:  BTFSS  03.0
0655:  GOTO   65E
0656:  BTFSS  03.2
0657:  GOTO   65C
0658:  MOVF   41,W
0659:  SUBLW  70
065A:  BTFSS  03.0
065B:  GOTO   65E
....................       STOP(); 
065C:  CALL   580
065D:  GOTO   650
....................  
....................    while (count <= 800) 
065E:  BTFSC  42.7
065F:  GOTO   66A
0660:  MOVF   42,W
0661:  SUBLW  03
0662:  BTFSS  03.0
0663:  GOTO   66C
0664:  BTFSS  03.2
0665:  GOTO   66A
0666:  MOVF   41,W
0667:  SUBLW  20
0668:  BTFSS  03.0
0669:  GOTO   66C
....................       FORWARD(); 
066A:  CALL   577
066B:  GOTO   65E
....................    STOP(); 
066C:  CALL   580
066D:  BCF    0A.3
066E:  BCF    0A.4
066F:  GOTO   794 (RETURN)
.................... } 
....................  
.................... // 5.10^6 = 1sec 
.................... void checkSafetyFirst(int32 sec) 
.................... { 
....................    flagSTOP = true; 
*
050E:  BSF    45.2
....................    output_low(relayOut); 
050F:  BCF    46.1
0510:  MOVF   46,W
0511:  BSF    03.5
0512:  MOVWF  07
0513:  BCF    03.5
0514:  BCF    07.1
....................  
....................    signed int16 lastCount = count; 
0515:  MOVF   42,W
0516:  MOVWF  4C
0517:  MOVF   41,W
0518:  MOVWF  4B
....................    for (int32 i = sec; --i;) // waitting steady 
0519:  MOVF   4A,W
051A:  MOVWF  50
051B:  MOVF   49,W
051C:  MOVWF  4F
051D:  MOVF   48,W
051E:  MOVWF  4E
051F:  MOVF   47,W
0520:  MOVWF  4D
0521:  MOVLW  FF
0522:  ADDWF  4D,F
0523:  BTFSS  03.0
0524:  ADDWF  4E,F
0525:  BTFSS  03.0
0526:  ADDWF  4F,F
0527:  BTFSS  03.0
0528:  ADDWF  50,F
0529:  MOVF   4D,F
052A:  BTFSS  03.2
052B:  GOTO   535
052C:  MOVF   4E,F
052D:  BTFSS  03.2
052E:  GOTO   535
052F:  MOVF   4F,F
0530:  BTFSS  03.2
0531:  GOTO   535
0532:  MOVF   50,F
0533:  BTFSC  03.2
0534:  GOTO   550
....................    { 
....................       if (count != lastCount) 
0535:  MOVF   4B,W
0536:  SUBWF  41,W
0537:  BTFSS  03.2
0538:  GOTO   53D
0539:  MOVF   4C,W
053A:  SUBWF  42,W
053B:  BTFSC  03.2
053C:  GOTO   54F
....................       { 
....................          i = sec; // reset 
053D:  MOVF   4A,W
053E:  MOVWF  50
053F:  MOVF   49,W
0540:  MOVWF  4F
0541:  MOVF   48,W
0542:  MOVWF  4E
0543:  MOVF   47,W
0544:  MOVWF  4D
....................          lastCount = count; 
0545:  MOVF   42,W
0546:  MOVWF  4C
0547:  MOVF   41,W
0548:  MOVWF  4B
....................          delay_us(20); 
0549:  MOVLW  20
054A:  MOVWF  77
054B:  DECFSZ 77,F
054C:  GOTO   54B
054D:  GOTO   54E
054E:  NOP
....................       } 
054F:  GOTO   521
....................    } 
....................  
....................    count = lastCount; // update 0 point 
0550:  MOVF   4C,W
0551:  MOVWF  42
0552:  MOVF   4B,W
0553:  MOVWF  41
....................    output_high(relayOut); 
0554:  BCF    46.1
0555:  MOVF   46,W
0556:  BSF    03.5
0557:  MOVWF  07
0558:  BCF    03.5
0559:  BSF    07.1
....................    delay_ms(1000); // ngăn hồ quang nếu cùng lúc đóng triac lập tức 
055A:  MOVLW  04
055B:  MOVWF  51
055C:  MOVLW  FA
055D:  MOVWF  52
*
0571:  DECFSZ 51,F
0572:  GOTO   55C
....................    flagSTOP = false; 
0573:  BCF    45.2
0574:  BCF    0A.3
0575:  BCF    0A.4
0576:  GOTO   792 (RETURN)
.................... } 
....................  
.................... void main() 
*
0670:  MOVF   03,W
0671:  ANDLW  1F
0672:  MOVWF  03
0673:  CLRF   34
0674:  CLRF   33
0675:  CLRF   32
0676:  MOVLW  7F
0677:  MOVWF  31
0678:  CLRF   38
0679:  CLRF   37
067A:  MOVLW  40
067B:  MOVWF  36
067C:  MOVLW  81
067D:  MOVWF  35
067E:  BSF    03.1
067F:  MOVLW  17
0680:  MOVWF  63
0681:  MOVLW  B7
0682:  MOVWF  62
0683:  MOVLW  51
0684:  MOVWF  61
0685:  MOVLW  82
0686:  MOVWF  60
0687:  MOVF   34,W
0688:  MOVWF  67
0689:  MOVF   33,W
068A:  MOVWF  66
068B:  MOVF   32,W
068C:  MOVWF  65
068D:  MOVF   31,W
068E:  MOVWF  64
068F:  CALL   081
0690:  MOVF   7A,W
0691:  MOVWF  4A
0692:  MOVF   79,W
0693:  MOVWF  49
0694:  MOVF   78,W
0695:  MOVWF  48
0696:  MOVF   77,W
0697:  MOVWF  47
0698:  MOVF   7A,W
0699:  MOVWF  50
069A:  MOVF   79,W
069B:  MOVWF  4F
069C:  MOVF   78,W
069D:  MOVWF  4E
069E:  MOVF   77,W
069F:  MOVWF  4D
06A0:  MOVLW  17
06A1:  MOVWF  54
06A2:  MOVLW  B7
06A3:  MOVWF  53
06A4:  MOVLW  51
06A5:  MOVWF  52
06A6:  MOVLW  7A
06A7:  MOVWF  51
06A8:  CALL   1C2
06A9:  MOVF   7A,W
06AA:  MOVWF  4A
06AB:  MOVF   79,W
06AC:  MOVWF  49
06AD:  MOVF   78,W
06AE:  MOVWF  48
06AF:  MOVF   77,W
06B0:  MOVWF  47
06B1:  MOVF   7A,W
06B2:  MOVWF  50
06B3:  MOVF   79,W
06B4:  MOVWF  4F
06B5:  MOVF   78,W
06B6:  MOVWF  4E
06B7:  MOVF   77,W
06B8:  MOVWF  4D
06B9:  CALL   37C
06BA:  MOVF   7A,W
06BB:  MOVWF  4C
06BC:  MOVF   79,W
06BD:  MOVWF  4B
06BE:  MOVF   78,W
06BF:  MOVWF  4A
06C0:  MOVF   77,W
06C1:  MOVWF  49
06C2:  CALL   4EF
06C3:  MOVF   7A,W
06C4:  MOVWF  4A
06C5:  MOVF   79,W
06C6:  MOVWF  49
06C7:  MOVF   78,W
06C8:  MOVWF  48
06C9:  MOVLW  01
06CA:  SUBWF  77,W
06CB:  MOVWF  39
06CC:  MOVF   78,W
06CD:  MOVWF  3A
06CE:  MOVLW  00
06CF:  BTFSS  03.0
06D0:  MOVLW  01
06D1:  SUBWF  3A,F
06D2:  MOVF   79,W
06D3:  MOVWF  3B
06D4:  MOVLW  00
06D5:  BTFSS  03.0
06D6:  MOVLW  01
06D7:  SUBWF  3B,F
06D8:  MOVF   7A,W
06D9:  MOVWF  3C
06DA:  MOVLW  00
06DB:  BTFSS  03.0
06DC:  MOVLW  01
06DD:  SUBWF  3C,F
06DE:  CLRF   48
06DF:  MOVF   04,W
06E0:  MOVWF  47
06E1:  BCF    48.0
06E2:  BTFSC  03.7
06E3:  BSF    48.0
06E4:  BSF    03.1
06E5:  MOVLW  17
06E6:  MOVWF  63
06E7:  MOVLW  B7
06E8:  MOVWF  62
06E9:  MOVLW  51
06EA:  MOVWF  61
06EB:  MOVLW  82
06EC:  MOVWF  60
06ED:  MOVF   38,W
06EE:  MOVWF  67
06EF:  MOVF   37,W
06F0:  MOVWF  66
06F1:  MOVF   36,W
06F2:  MOVWF  65
06F3:  MOVF   35,W
06F4:  MOVWF  64
06F5:  CALL   081
06F6:  MOVF   47,W
06F7:  MOVWF  04
06F8:  BCF    03.7
06F9:  BTFSC  48.0
06FA:  BSF    03.7
06FB:  MOVF   7A,W
06FC:  MOVWF  4C
06FD:  MOVF   79,W
06FE:  MOVWF  4B
06FF:  MOVF   78,W
0700:  MOVWF  4A
0701:  MOVF   77,W
0702:  MOVWF  49
0703:  MOVF   7A,W
0704:  MOVWF  50
0705:  MOVF   79,W
0706:  MOVWF  4F
0707:  MOVF   78,W
0708:  MOVWF  4E
0709:  MOVF   77,W
070A:  MOVWF  4D
070B:  MOVLW  17
070C:  MOVWF  54
070D:  MOVLW  B7
070E:  MOVWF  53
070F:  MOVLW  51
0710:  MOVWF  52
0711:  MOVLW  7A
0712:  MOVWF  51
0713:  CALL   1C2
0714:  MOVF   7A,W
0715:  MOVWF  4C
0716:  MOVF   79,W
0717:  MOVWF  4B
0718:  MOVF   78,W
0719:  MOVWF  4A
071A:  MOVF   77,W
071B:  MOVWF  49
071C:  MOVF   7A,W
071D:  MOVWF  50
071E:  MOVF   79,W
071F:  MOVWF  4F
0720:  MOVF   78,W
0721:  MOVWF  4E
0722:  MOVF   77,W
0723:  MOVWF  4D
0724:  CALL   37C
0725:  MOVF   7A,W
0726:  MOVWF  4C
0727:  MOVF   79,W
0728:  MOVWF  4B
0729:  MOVF   78,W
072A:  MOVWF  4A
072B:  MOVF   77,W
072C:  MOVWF  49
072D:  CALL   4EF
072E:  MOVLW  01
072F:  SUBWF  77,W
0730:  MOVWF  3D
0731:  MOVF   78,W
0732:  MOVWF  3E
0733:  MOVLW  00
0734:  BTFSS  03.0
0735:  MOVLW  01
0736:  SUBWF  3E,F
0737:  MOVF   79,W
0738:  MOVWF  3F
0739:  MOVLW  00
073A:  BTFSS  03.0
073B:  MOVLW  01
073C:  SUBWF  3F,F
073D:  MOVF   7A,W
073E:  MOVWF  40
073F:  MOVLW  00
0740:  BTFSS  03.0
0741:  MOVLW  01
0742:  SUBWF  40,F
0743:  CLRF   42
0744:  CLRF   41
0745:  CLRF   43
0746:  CLRF   44
0747:  BSF    45.0
0748:  BSF    45.1
0749:  BSF    45.2
074A:  MOVLW  FF
074B:  MOVWF  46
074C:  BSF    03.5
074D:  BSF    1F.0
074E:  BSF    1F.1
074F:  BSF    1F.2
0750:  BCF    1F.3
0751:  MOVLW  07
0752:  MOVWF  1C
0753:  BCF    03.7
.................... { 
....................    // initLCD(); 
....................  
....................    // ghima(0x01); // clear 
....................    // ghima(0x80); // set 0,0 
....................    // hienthi(arrNumber[count / 10]); 
....................    // hienthi(arrNumber[count % 10]); 
....................  
....................    TRISB0 = TRISC0 = TRISC2 = 1; //input 
*
0769:  BSF    03.5
076A:  BSF    07.2
076B:  BSF    07.0
076C:  BSF    06.0
....................    TRISC6 = TRISC7 = TRISC1 = 0; //output 
076D:  BCF    07.1
076E:  BCF    07.7
076F:  BCF    07.6
....................  
....................    clear_interrupt(INT_EXT); 
0770:  BCF    03.5
0771:  BCF    0B.1
....................    enable_interrupts(INT_EXT); 
0772:  BSF    0B.4
....................    ext_int_edge(H_TO_L); 
0773:  BSF    03.5
0774:  BCF    01.6
....................  
....................    setup_ccp1(CCP_CAPTURE_FE); 
0775:  BCF    03.5
0776:  BSF    46.2
0777:  MOVF   46,W
0778:  BSF    03.5
0779:  MOVWF  07
077A:  BCF    03.5
077B:  CLRF   17
077C:  MOVLW  04
077D:  MOVWF  17
....................    setup_timer_1(T1_INTERNAL); 
077E:  MOVLW  85
077F:  MOVWF  10
....................    enable_interrupts(INT_CCP1); 
0780:  BSF    03.5
0781:  BSF    0C.2
....................  
....................    setup_timer_0(RTCC_INTERNAL | RTCC_DIV_256); //51.2us 
0782:  MOVF   01,W
0783:  ANDLW  C0
0784:  IORLW  07
0785:  MOVWF  01
....................    // set_timer0(59);                             //10.086ms 
....................    enable_interrupts(INT_TIMER0); 
0786:  BCF    03.5
0787:  BSF    0B.5
....................  
....................    enable_interrupts(GLOBAL); 
0788:  MOVLW  C0
0789:  IORWF  0B,F
....................  
....................    checkSafetyFirst(10000000); 
078A:  CLRF   4A
078B:  MOVLW  98
078C:  MOVWF  49
078D:  MOVLW  96
078E:  MOVWF  48
078F:  MOVLW  80
0790:  MOVWF  47
0791:  GOTO   50E
....................  
....................    starter(); 
0792:  GOTO   597
....................  
....................    while (TRUE) 
....................    { 
....................       RingTheBell(); 
0793:  GOTO   631
0794:  GOTO   793
....................    } 
.................... } 
0795:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
