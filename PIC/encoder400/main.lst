CCS PCM C Compiler, Version 5.025, 31658               23-Apr-20 06:47

               Filename:   D:\Desktop\RingTheBell\PIC\encoder400\main.lst

               ROM used:   2401 words (29%)
                           Largest free fragment is 2048
               RAM used:   38 (10%) at main() level
                           79 (21%) worst case
               Stack used: 3 locations (2 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  08
0001:  MOVWF  0A
0002:  GOTO   000
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.4
0018:  GOTO   01B
0019:  BTFSC  0B.1
001A:  GOTO   03C
001B:  MOVLW  8C
001C:  MOVWF  04
001D:  BTFSS  00.1
001E:  GOTO   021
001F:  BTFSC  0C.1
0020:  GOTO   03F
0021:  MOVLW  8C
0022:  MOVWF  04
0023:  BTFSS  00.2
0024:  GOTO   027
0025:  BTFSC  0C.2
0026:  GOTO   042
0027:  BTFSS  0B.5
0028:  GOTO   02B
0029:  BTFSC  0B.2
002A:  GOTO   045
002B:  MOVF   22,W
002C:  MOVWF  04
002D:  MOVF   23,W
002E:  MOVWF  77
002F:  MOVF   24,W
0030:  MOVWF  78
0031:  MOVF   25,W
0032:  MOVWF  79
0033:  MOVF   26,W
0034:  MOVWF  7A
0035:  MOVF   20,W
0036:  MOVWF  0A
0037:  SWAPF  21,W
0038:  MOVWF  03
0039:  SWAPF  7F,F
003A:  SWAPF  7F,W
003B:  RETFIE
003C:  BCF    0A.3
003D:  BCF    0A.4
003E:  GOTO   048
003F:  BCF    0A.3
0040:  BCF    0A.4
0041:  GOTO   07C
0042:  BCF    0A.3
0043:  BCF    0A.4
0044:  GOTO   0E9
0045:  BCF    0A.3
0046:  BCF    0A.4
0047:  GOTO   062
.................... #include <main.h> 
.................... // #include <16F877A.h> 
.................... #include <16F887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
*
009C:  MOVF   65,W
009D:  XORWF  67,W
009E:  ANDLW  80
009F:  MOVWF  69
00A0:  BTFSS  65.7
00A1:  GOTO   0A7
00A2:  COMF   64,F
00A3:  COMF   65,F
00A4:  INCF   64,F
00A5:  BTFSC  03.2
00A6:  INCF   65,F
00A7:  BTFSS  67.7
00A8:  GOTO   0AE
00A9:  COMF   66,F
00AA:  COMF   67,F
00AB:  INCF   66,F
00AC:  BTFSC  03.2
00AD:  INCF   67,F
00AE:  MOVLW  10
00AF:  MOVWF  68
00B0:  CLRF   77
00B1:  CLRF   7A
00B2:  RRF    65,F
00B3:  RRF    64,F
00B4:  BTFSS  03.0
00B5:  GOTO   0BC
00B6:  MOVF   66,W
00B7:  ADDWF  77,F
00B8:  BTFSC  03.0
00B9:  INCF   7A,F
00BA:  MOVF   67,W
00BB:  ADDWF  7A,F
00BC:  RRF    7A,F
00BD:  RRF    77,F
00BE:  RRF    79,F
00BF:  RRF    78,F
00C0:  DECFSZ 68,F
00C1:  GOTO   0B2
00C2:  BTFSS  69.7
00C3:  GOTO   0C9
00C4:  COMF   78,F
00C5:  COMF   79,F
00C6:  INCF   78,F
00C7:  BTFSC  03.2
00C8:  INCF   79,F
*
017F:  BSF    0A.0
0180:  BCF    0A.1
0181:  BCF    0A.2
0182:  ADDWF  02,F
0183:  GOTO   12C
0184:  GOTO   15B
0185:  GOTO   132
0186:  GOTO   15B
0187:  GOTO   138
0188:  GOTO   15B
0189:  GOTO   13E
018A:  GOTO   15B
018B:  GOTO   144
018C:  GOTO   15B
018D:  GOTO   14A
018E:  GOTO   15B
018F:  GOTO   150
0190:  GOTO   15B
0191:  GOTO   156
*
01A6:  MOVLW  B6
01A7:  MOVWF  77
01A8:  CLRF   7A
01A9:  CLRF   79
01AA:  CLRF   78
01AB:  MOVF   3D,W
01AC:  IORWF  3E,W
01AD:  IORWF  3F,W
01AE:  IORWF  40,W
01AF:  BTFSS  03.2
01B0:  GOTO   1B3
01B1:  CLRF   77
01B2:  GOTO   1C0
01B3:  BCF    03.0
01B4:  BTFSC  78.7
01B5:  GOTO   1BF
01B6:  RLF    3D,F
01B7:  RLF    3E,F
01B8:  RLF    3F,F
01B9:  RLF    40,F
01BA:  RLF    7A,F
01BB:  RLF    79,F
01BC:  RLF    78,F
01BD:  DECFSZ 77,F
01BE:  GOTO   1B3
01BF:  BCF    78.7
01C0:  RETURN
01C1:  MOVLW  80
01C2:  BTFSC  03.1
01C3:  XORWF  59,F
01C4:  CLRF   5E
01C5:  CLRF   5F
01C6:  MOVF   55,W
01C7:  MOVWF  5D
01C8:  MOVF   59,W
01C9:  XORWF  5D,F
01CA:  MOVF   54,W
01CB:  BTFSC  03.2
01CC:  GOTO   2B1
01CD:  MOVWF  5C
01CE:  MOVWF  77
01CF:  MOVF   58,W
01D0:  BTFSC  03.2
01D1:  GOTO   2BA
01D2:  SUBWF  5C,F
01D3:  BTFSC  03.2
01D4:  GOTO   256
01D5:  BTFSS  03.0
01D6:  GOTO   214
01D7:  MOVF   59,W
01D8:  MOVWF  62
01D9:  BSF    62.7
01DA:  MOVF   5A,W
01DB:  MOVWF  61
01DC:  MOVF   5B,W
01DD:  MOVWF  60
01DE:  CLRF   5F
01DF:  BCF    03.0
01E0:  RRF    62,F
01E1:  RRF    61,F
01E2:  RRF    60,F
01E3:  RRF    5F,F
01E4:  DECFSZ 5C,F
01E5:  GOTO   1DE
01E6:  BTFSS  5D.7
01E7:  GOTO   1EB
01E8:  BSF    5E.0
01E9:  GOTO   2CE
01EA:  BCF    5E.0
01EB:  BCF    5C.0
01EC:  BSF    5E.4
01ED:  MOVLW  57
01EE:  MOVWF  04
01EF:  BCF    03.7
01F0:  GOTO   2E3
01F1:  BCF    5E.4
01F2:  BTFSC  5D.7
01F3:  GOTO   1FE
01F4:  BTFSS  5C.0
01F5:  GOTO   209
01F6:  RRF    62,F
01F7:  RRF    61,F
01F8:  RRF    60,F
01F9:  RRF    5F,F
01FA:  INCF   77,F
01FB:  BTFSC  03.2
01FC:  GOTO   2C9
01FD:  GOTO   209
01FE:  BTFSC  62.7
01FF:  GOTO   20C
0200:  BCF    03.0
0201:  RLF    5F,F
0202:  RLF    60,F
0203:  RLF    61,F
0204:  RLF    62,F
0205:  DECF   77,F
0206:  BTFSC  03.2
0207:  GOTO   2C9
0208:  GOTO   1FE
0209:  BSF    5E.6
020A:  GOTO   276
020B:  BCF    5E.6
020C:  MOVF   55,W
020D:  MOVWF  5D
020E:  BTFSS  5D.7
020F:  GOTO   212
0210:  BSF    62.7
0211:  GOTO   2C2
0212:  BCF    62.7
0213:  GOTO   2C2
0214:  MOVF   58,W
0215:  MOVWF  5C
0216:  MOVWF  77
0217:  MOVF   54,W
0218:  SUBWF  5C,F
0219:  MOVF   55,W
021A:  MOVWF  62
021B:  BSF    62.7
021C:  MOVF   56,W
021D:  MOVWF  61
021E:  MOVF   57,W
021F:  MOVWF  60
0220:  CLRF   5F
0221:  BCF    03.0
0222:  RRF    62,F
0223:  RRF    61,F
0224:  RRF    60,F
0225:  RRF    5F,F
0226:  DECFSZ 5C,F
0227:  GOTO   220
0228:  BTFSS  5D.7
0229:  GOTO   22D
022A:  BSF    5E.1
022B:  GOTO   2CE
022C:  BCF    5E.1
022D:  BCF    5C.0
022E:  BSF    5E.5
022F:  MOVLW  5B
0230:  MOVWF  04
0231:  BCF    03.7
0232:  GOTO   2E3
0233:  BCF    5E.5
0234:  BTFSC  5D.7
0235:  GOTO   240
0236:  BTFSS  5C.0
0237:  GOTO   24B
0238:  RRF    62,F
0239:  RRF    61,F
023A:  RRF    60,F
023B:  RRF    5F,F
023C:  INCF   77,F
023D:  BTFSC  03.2
023E:  GOTO   2C9
023F:  GOTO   24B
0240:  BTFSC  62.7
0241:  GOTO   24E
0242:  BCF    03.0
0243:  RLF    5F,F
0244:  RLF    60,F
0245:  RLF    61,F
0246:  RLF    62,F
0247:  DECF   77,F
0248:  BTFSC  03.2
0249:  GOTO   2C9
024A:  GOTO   240
024B:  BSF    5E.7
024C:  GOTO   276
024D:  BCF    5E.7
024E:  MOVF   59,W
024F:  MOVWF  5D
0250:  BTFSS  5D.7
0251:  GOTO   254
0252:  BSF    62.7
0253:  GOTO   2C2
0254:  BCF    62.7
0255:  GOTO   2C2
0256:  MOVF   59,W
0257:  MOVWF  62
0258:  BSF    62.7
0259:  MOVF   5A,W
025A:  MOVWF  61
025B:  MOVF   5B,W
025C:  MOVWF  60
025D:  BTFSS  5D.7
025E:  GOTO   263
025F:  BCF    62.7
0260:  BSF    5E.2
0261:  GOTO   2CE
0262:  BCF    5E.2
0263:  CLRF   5F
0264:  BCF    5C.0
0265:  MOVLW  57
0266:  MOVWF  04
0267:  BCF    03.7
0268:  GOTO   2E3
0269:  BTFSC  5D.7
026A:  GOTO   28C
026B:  MOVF   55,W
026C:  MOVWF  5D
026D:  BTFSS  5C.0
026E:  GOTO   276
026F:  RRF    62,F
0270:  RRF    61,F
0271:  RRF    60,F
0272:  RRF    5F,F
0273:  INCF   77,F
0274:  BTFSC  03.2
0275:  GOTO   2C9
0276:  BTFSS  5F.7
0277:  GOTO   287
0278:  INCF   60,F
0279:  BTFSS  03.2
027A:  GOTO   287
027B:  INCF   61,F
027C:  BTFSS  03.2
027D:  GOTO   287
027E:  INCF   62,F
027F:  BTFSS  03.2
0280:  GOTO   287
0281:  RRF    62,F
0282:  RRF    61,F
0283:  RRF    60,F
0284:  INCF   77,F
0285:  BTFSC  03.2
0286:  GOTO   2C9
0287:  BTFSC  5E.6
0288:  GOTO   20B
0289:  BTFSC  5E.7
028A:  GOTO   24D
028B:  GOTO   2AB
028C:  MOVLW  80
028D:  XORWF  62,F
028E:  BTFSS  62.7
028F:  GOTO   294
0290:  GOTO   2CE
0291:  MOVF   59,W
0292:  MOVWF  5D
0293:  GOTO   2A1
0294:  MOVF   55,W
0295:  MOVWF  5D
0296:  MOVF   62,F
0297:  BTFSS  03.2
0298:  GOTO   2A1
0299:  MOVF   61,F
029A:  BTFSS  03.2
029B:  GOTO   2A1
029C:  MOVF   60,F
029D:  BTFSS  03.2
029E:  GOTO   2A1
029F:  CLRF   77
02A0:  GOTO   2C2
02A1:  BTFSC  62.7
02A2:  GOTO   2AB
02A3:  BCF    03.0
02A4:  RLF    5F,F
02A5:  RLF    60,F
02A6:  RLF    61,F
02A7:  RLF    62,F
02A8:  DECFSZ 77,F
02A9:  GOTO   2A1
02AA:  GOTO   2C9
02AB:  BTFSS  5D.7
02AC:  GOTO   2AF
02AD:  BSF    62.7
02AE:  GOTO   2C2
02AF:  BCF    62.7
02B0:  GOTO   2C2
02B1:  MOVF   58,W
02B2:  MOVWF  77
02B3:  MOVF   59,W
02B4:  MOVWF  62
02B5:  MOVF   5A,W
02B6:  MOVWF  61
02B7:  MOVF   5B,W
02B8:  MOVWF  60
02B9:  GOTO   2C2
02BA:  MOVF   54,W
02BB:  MOVWF  77
02BC:  MOVF   55,W
02BD:  MOVWF  62
02BE:  MOVF   56,W
02BF:  MOVWF  61
02C0:  MOVF   57,W
02C1:  MOVWF  60
02C2:  MOVF   62,W
02C3:  MOVWF  78
02C4:  MOVF   61,W
02C5:  MOVWF  79
02C6:  MOVF   60,W
02C7:  MOVWF  7A
02C8:  GOTO   301
02C9:  CLRF   77
02CA:  CLRF   78
02CB:  CLRF   79
02CC:  CLRF   7A
02CD:  GOTO   301
02CE:  CLRF   5F
02CF:  COMF   60,F
02D0:  COMF   61,F
02D1:  COMF   62,F
02D2:  COMF   5F,F
02D3:  INCF   5F,F
02D4:  BTFSS  03.2
02D5:  GOTO   2DC
02D6:  INCF   60,F
02D7:  BTFSS  03.2
02D8:  GOTO   2DC
02D9:  INCF   61,F
02DA:  BTFSC  03.2
02DB:  INCF   62,F
02DC:  BTFSC  5E.0
02DD:  GOTO   1EA
02DE:  BTFSC  5E.1
02DF:  GOTO   22C
02E0:  BTFSC  5E.2
02E1:  GOTO   262
02E2:  GOTO   291
02E3:  MOVF   00,W
02E4:  ADDWF  60,F
02E5:  BTFSS  03.0
02E6:  GOTO   2ED
02E7:  INCF   61,F
02E8:  BTFSS  03.2
02E9:  GOTO   2ED
02EA:  INCF   62,F
02EB:  BTFSC  03.2
02EC:  BSF    5C.0
02ED:  DECF   04,F
02EE:  MOVF   00,W
02EF:  ADDWF  61,F
02F0:  BTFSS  03.0
02F1:  GOTO   2F5
02F2:  INCF   62,F
02F3:  BTFSC  03.2
02F4:  BSF    5C.0
02F5:  DECF   04,F
02F6:  MOVF   00,W
02F7:  BTFSS  00.7
02F8:  XORLW  80
02F9:  ADDWF  62,F
02FA:  BTFSC  03.0
02FB:  BSF    5C.0
02FC:  BTFSC  5E.4
02FD:  GOTO   1F1
02FE:  BTFSC  5E.5
02FF:  GOTO   233
0300:  GOTO   269
0301:  RETURN
0302:  MOVF   41,W
0303:  BTFSC  03.2
0304:  GOTO   3C7
0305:  MOVWF  4D
0306:  MOVF   45,W
0307:  BTFSC  03.2
0308:  GOTO   3C7
0309:  SUBWF  4D,F
030A:  BTFSS  03.0
030B:  GOTO   311
030C:  MOVLW  7F
030D:  ADDWF  4D,F
030E:  BTFSC  03.0
030F:  GOTO   3C7
0310:  GOTO   317
0311:  MOVLW  81
0312:  SUBWF  4D,F
0313:  BTFSS  03.0
0314:  GOTO   3C7
0315:  BTFSC  03.2
0316:  GOTO   3C7
0317:  MOVF   4D,W
0318:  MOVWF  77
0319:  CLRF   78
031A:  CLRF   79
031B:  CLRF   7A
031C:  CLRF   4C
031D:  MOVF   42,W
031E:  MOVWF  4B
031F:  BSF    4B.7
0320:  MOVF   43,W
0321:  MOVWF  4A
0322:  MOVF   44,W
0323:  MOVWF  49
0324:  MOVLW  19
0325:  MOVWF  4D
0326:  MOVF   48,W
0327:  SUBWF  49,F
0328:  BTFSC  03.0
0329:  GOTO   33A
032A:  MOVLW  01
032B:  SUBWF  4A,F
032C:  BTFSC  03.0
032D:  GOTO   33A
032E:  SUBWF  4B,F
032F:  BTFSC  03.0
0330:  GOTO   33A
0331:  SUBWF  4C,F
0332:  BTFSC  03.0
0333:  GOTO   33A
0334:  INCF   4C,F
0335:  INCF   4B,F
0336:  INCF   4A,F
0337:  MOVF   48,W
0338:  ADDWF  49,F
0339:  GOTO   36C
033A:  MOVF   47,W
033B:  SUBWF  4A,F
033C:  BTFSC  03.0
033D:  GOTO   355
033E:  MOVLW  01
033F:  SUBWF  4B,F
0340:  BTFSC  03.0
0341:  GOTO   355
0342:  SUBWF  4C,F
0343:  BTFSC  03.0
0344:  GOTO   355
0345:  INCF   4C,F
0346:  INCF   4B,F
0347:  MOVF   47,W
0348:  ADDWF  4A,F
0349:  MOVF   48,W
034A:  ADDWF  49,F
034B:  BTFSS  03.0
034C:  GOTO   36C
034D:  INCF   4A,F
034E:  BTFSS  03.2
034F:  GOTO   36C
0350:  INCF   4B,F
0351:  BTFSS  03.2
0352:  GOTO   36C
0353:  INCF   4C,F
0354:  GOTO   36C
0355:  MOVF   46,W
0356:  IORLW  80
0357:  SUBWF  4B,F
0358:  BTFSC  03.0
0359:  GOTO   36B
035A:  MOVLW  01
035B:  SUBWF  4C,F
035C:  BTFSC  03.0
035D:  GOTO   36B
035E:  INCF   4C,F
035F:  MOVF   46,W
0360:  IORLW  80
0361:  ADDWF  4B,F
0362:  MOVF   47,W
0363:  ADDWF  4A,F
0364:  BTFSS  03.0
0365:  GOTO   349
0366:  INCF   4B,F
0367:  BTFSS  03.2
0368:  GOTO   349
0369:  INCF   4C,F
036A:  GOTO   349
036B:  BSF    7A.0
036C:  DECFSZ 4D,F
036D:  GOTO   36F
036E:  GOTO   37A
036F:  BCF    03.0
0370:  RLF    49,F
0371:  RLF    4A,F
0372:  RLF    4B,F
0373:  RLF    4C,F
0374:  BCF    03.0
0375:  RLF    7A,F
0376:  RLF    79,F
0377:  RLF    78,F
0378:  RLF    4E,F
0379:  GOTO   326
037A:  BTFSS  4E.0
037B:  GOTO   382
037C:  BCF    03.0
037D:  RRF    78,F
037E:  RRF    79,F
037F:  RRF    7A,F
0380:  RRF    4E,F
0381:  GOTO   385
0382:  DECF   77,F
0383:  BTFSC  03.2
0384:  GOTO   3C7
0385:  BTFSC  4E.7
0386:  GOTO   3AE
0387:  BCF    03.0
0388:  RLF    49,F
0389:  RLF    4A,F
038A:  RLF    4B,F
038B:  RLF    4C,F
038C:  MOVF   48,W
038D:  SUBWF  49,F
038E:  BTFSC  03.0
038F:  GOTO   39A
0390:  MOVLW  01
0391:  SUBWF  4A,F
0392:  BTFSC  03.0
0393:  GOTO   39A
0394:  SUBWF  4B,F
0395:  BTFSC  03.0
0396:  GOTO   39A
0397:  SUBWF  4C,F
0398:  BTFSS  03.0
0399:  GOTO   3BD
039A:  MOVF   47,W
039B:  SUBWF  4A,F
039C:  BTFSC  03.0
039D:  GOTO   3A5
039E:  MOVLW  01
039F:  SUBWF  4B,F
03A0:  BTFSC  03.0
03A1:  GOTO   3A5
03A2:  SUBWF  4C,F
03A3:  BTFSS  03.0
03A4:  GOTO   3BD
03A5:  MOVF   46,W
03A6:  IORLW  80
03A7:  SUBWF  4B,F
03A8:  BTFSC  03.0
03A9:  GOTO   3AE
03AA:  MOVLW  01
03AB:  SUBWF  4C,F
03AC:  BTFSS  03.0
03AD:  GOTO   3BD
03AE:  INCF   7A,F
03AF:  BTFSS  03.2
03B0:  GOTO   3BD
03B1:  INCF   79,F
03B2:  BTFSS  03.2
03B3:  GOTO   3BD
03B4:  INCF   78,F
03B5:  BTFSS  03.2
03B6:  GOTO   3BD
03B7:  INCF   77,F
03B8:  BTFSC  03.2
03B9:  GOTO   3C7
03BA:  RRF    78,F
03BB:  RRF    79,F
03BC:  RRF    7A,F
03BD:  MOVF   42,W
03BE:  MOVWF  4D
03BF:  MOVF   46,W
03C0:  XORWF  4D,F
03C1:  BTFSS  4D.7
03C2:  GOTO   3C5
03C3:  BSF    78.7
03C4:  GOTO   3CB
03C5:  BCF    78.7
03C6:  GOTO   3CB
03C7:  CLRF   77
03C8:  CLRF   78
03C9:  CLRF   79
03CA:  CLRF   7A
03CB:  RETURN
03CC:  MOVF   51,W
03CD:  MOVWF  58
03CE:  MOVF   55,W
03CF:  XORWF  58,F
03D0:  BTFSS  58.7
03D1:  GOTO   3D7
03D2:  BCF    03.2
03D3:  BCF    03.0
03D4:  BTFSC  51.7
03D5:  BSF    03.0
03D6:  GOTO   40A
03D7:  MOVF   51,W
03D8:  MOVWF  58
03D9:  MOVF   54,W
03DA:  MOVWF  59
03DB:  MOVF   50,W
03DC:  SUBWF  59,F
03DD:  BTFSC  03.2
03DE:  GOTO   3E5
03DF:  BTFSS  58.7
03E0:  GOTO   40A
03E1:  MOVF   03,W
03E2:  XORLW  01
03E3:  MOVWF  03
03E4:  GOTO   40A
03E5:  MOVF   55,W
03E6:  MOVWF  59
03E7:  MOVF   51,W
03E8:  SUBWF  59,F
03E9:  BTFSC  03.2
03EA:  GOTO   3F1
03EB:  BTFSS  58.7
03EC:  GOTO   40A
03ED:  MOVF   03,W
03EE:  XORLW  01
03EF:  MOVWF  03
03F0:  GOTO   40A
03F1:  MOVF   56,W
03F2:  MOVWF  59
03F3:  MOVF   52,W
03F4:  SUBWF  59,F
03F5:  BTFSC  03.2
03F6:  GOTO   3FD
03F7:  BTFSS  58.7
03F8:  GOTO   40A
03F9:  MOVF   03,W
03FA:  XORLW  01
03FB:  MOVWF  03
03FC:  GOTO   40A
03FD:  MOVF   57,W
03FE:  MOVWF  59
03FF:  MOVF   53,W
0400:  SUBWF  59,F
0401:  BTFSC  03.2
0402:  GOTO   409
0403:  BTFSS  58.7
0404:  GOTO   40A
0405:  MOVF   03,W
0406:  XORLW  01
0407:  MOVWF  03
0408:  GOTO   40A
0409:  BCF    03.0
040A:  RETURN
040B:  MOVLW  8E
040C:  MOVWF  77
040D:  MOVF   50,W
040E:  SUBWF  77,F
040F:  MOVF   51,W
0410:  MOVWF  79
0411:  MOVF   52,W
0412:  MOVWF  78
0413:  BSF    79.7
0414:  MOVF   77,F
0415:  BTFSC  03.2
0416:  GOTO   422
0417:  BCF    03.0
0418:  MOVF   79,F
0419:  BTFSS  03.2
041A:  GOTO   41E
041B:  MOVF   78,F
041C:  BTFSC  03.2
041D:  GOTO   422
041E:  RRF    79,F
041F:  RRF    78,F
0420:  DECFSZ 77,F
0421:  GOTO   417
0422:  BTFSS  51.7
0423:  GOTO   429
0424:  COMF   78,F
0425:  COMF   79,F
0426:  INCF   78,F
0427:  BTFSC  03.2
0428:  INCF   79,F
0429:  RETURN
042A:  MOVLW  8E
042B:  MOVWF  77
042C:  MOVF   55,W
042D:  MOVWF  78
042E:  MOVF   54,W
042F:  MOVWF  79
0430:  CLRF   7A
0431:  MOVF   78,F
0432:  BTFSS  03.2
0433:  GOTO   43E
0434:  MOVF   79,W
0435:  MOVWF  78
0436:  CLRF   79
0437:  MOVLW  08
0438:  SUBWF  77,F
0439:  MOVF   78,F
043A:  BTFSS  03.2
043B:  GOTO   43E
043C:  CLRF   77
043D:  GOTO   446
043E:  BCF    03.0
043F:  BTFSC  78.7
0440:  GOTO   445
0441:  RLF    79,F
0442:  RLF    78,F
0443:  DECF   77,F
0444:  GOTO   43E
0445:  BCF    78.7
0446:  RETURN
0447:  MOVF   50,W
0448:  BTFSC  03.2
0449:  GOTO   4B7
044A:  MOVWF  58
044B:  MOVF   54,W
044C:  BTFSC  03.2
044D:  GOTO   4B7
044E:  ADDWF  58,F
044F:  BTFSC  03.0
0450:  GOTO   458
0451:  MOVLW  7F
0452:  SUBWF  58,F
0453:  BTFSS  03.0
0454:  GOTO   4B7
0455:  BTFSC  03.2
0456:  GOTO   4B7
0457:  GOTO   45C
0458:  MOVLW  81
0459:  ADDWF  58,F
045A:  BTFSC  03.0
045B:  GOTO   4B7
045C:  MOVF   58,W
045D:  MOVWF  77
045E:  CLRF   78
045F:  CLRF   79
0460:  CLRF   7A
0461:  MOVF   51,W
0462:  MOVWF  5C
0463:  BSF    5C.7
0464:  MOVF   52,W
0465:  MOVWF  5B
0466:  MOVF   53,W
0467:  MOVWF  5A
0468:  MOVLW  18
0469:  MOVWF  58
046A:  CLRF   59
046B:  BTFSS  5A.0
046C:  GOTO   485
046D:  MOVF   57,W
046E:  ADDWF  7A,F
046F:  BTFSS  03.0
0470:  GOTO   477
0471:  INCF   79,F
0472:  BTFSS  03.2
0473:  GOTO   477
0474:  INCF   78,F
0475:  BTFSC  03.2
0476:  BSF    59.7
0477:  MOVF   56,W
0478:  ADDWF  79,F
0479:  BTFSS  03.0
047A:  GOTO   47E
047B:  INCF   78,F
047C:  BTFSC  03.2
047D:  BSF    59.7
047E:  MOVF   55,W
047F:  MOVWF  52
0480:  BSF    52.7
0481:  MOVF   52,W
0482:  ADDWF  78,F
0483:  BTFSC  03.0
0484:  BSF    59.7
0485:  RLF    59,F
0486:  RRF    78,F
0487:  RRF    79,F
0488:  RRF    7A,F
0489:  RRF    5C,F
048A:  RRF    5B,F
048B:  RRF    5A,F
048C:  BCF    03.0
048D:  DECFSZ 58,F
048E:  GOTO   46A
048F:  MOVLW  01
0490:  ADDWF  77,F
0491:  BTFSC  03.0
0492:  GOTO   4B7
0493:  BTFSC  78.7
0494:  GOTO   49C
0495:  RLF    5C,F
0496:  RLF    7A,F
0497:  RLF    79,F
0498:  RLF    78,F
0499:  DECF   77,F
049A:  BTFSC  03.2
049B:  GOTO   4B7
049C:  BTFSS  5C.7
049D:  GOTO   4AD
049E:  INCF   7A,F
049F:  BTFSS  03.2
04A0:  GOTO   4AD
04A1:  INCF   79,F
04A2:  BTFSS  03.2
04A3:  GOTO   4AD
04A4:  INCF   78,F
04A5:  BTFSS  03.2
04A6:  GOTO   4AD
04A7:  RRF    78,F
04A8:  RRF    79,F
04A9:  RRF    7A,F
04AA:  INCF   77,F
04AB:  BTFSC  03.2
04AC:  GOTO   4B7
04AD:  MOVF   51,W
04AE:  MOVWF  59
04AF:  MOVF   55,W
04B0:  XORWF  59,F
04B1:  BTFSS  59.7
04B2:  GOTO   4B5
04B3:  BSF    78.7
04B4:  GOTO   4BB
04B5:  BCF    78.7
04B6:  GOTO   4BB
04B7:  CLRF   77
04B8:  CLRF   78
04B9:  CLRF   79
04BA:  CLRF   7A
04BB:  RETURN
*
062F:  MOVF   3D,W
0630:  SUBLW  B6
0631:  MOVWF  3D
0632:  CLRF   7A
0633:  MOVF   3E,W
0634:  MOVWF  41
0635:  BSF    3E.7
0636:  BCF    03.0
0637:  RRF    3E,F
0638:  RRF    3F,F
0639:  RRF    40,F
063A:  RRF    7A,F
063B:  RRF    79,F
063C:  RRF    78,F
063D:  RRF    77,F
063E:  DECFSZ 3D,F
063F:  GOTO   636
0640:  BTFSS  41.7
0641:  GOTO   64D
0642:  COMF   77,F
0643:  COMF   78,F
0644:  COMF   79,F
0645:  COMF   7A,F
0646:  INCF   77,F
0647:  BTFSC  03.2
0648:  INCF   78,F
0649:  BTFSC  03.2
064A:  INCF   79,F
064B:  BTFSC  03.2
064C:  INCF   7A,F
064D:  RETURN
....................  
.................... #list 
....................  
.................... #include <def_16f877a.h> 
.................... //========================= Register Definitions ========================== 
.................... //-----Register Files------------------------------------------------------ 
.................... #byte INDF         =0x00 
.................... #byte TMR0         =0x01 
.................... #byte PCL          =0x02 
.................... #byte STATUS       =0x03 
.................... #byte FSR          =0x04 
.................... #byte PORTA    = 0x05 
.................... #byte PORTB    = 0x06 
.................... #byte PORTC    = 0x07 
.................... #byte PORTD    = 0x08 
.................... #byte PORTE    = 0x09 
.................... #byte PCLATH       =0x0A 
.................... #byte INTCON       =0x0B 
.................... #byte PIR1	   =0x0C 
.................... #byte PIR2	   =0x0D 
.................... #byte TMR1L	   =0x0E 
.................... #byte TMR1H        =0x0F 
.................... #byte T1CON        =0x10 
.................... #byte TMR2	   =0x11 
.................... #byte T2CON	   =0x12 
.................... #byte SSPBUF       =0x13 
.................... #byte SSPCON       =0x14 
.................... #byte CCPR1L       =0x15 
.................... #byte CCPR1H       =0x16 
.................... #byte CCP1CON      =0x17 
.................... #byte RCSTA        =0x18 
.................... #byte TXREG        =0x19 
.................... #byte RCREG        =0x1A 
.................... #byte CCPR2L       =0x1B 
.................... #byte CCPR2H       =0x1C 
.................... #byte CCP2CON      =0x1D 
.................... #byte ADRESH       =0x1E 
.................... #byte ADCON0	   =0x1F 
.................... #byte OPTION_REG   =0x81 
.................... //-------------- TRIS PORT ----------------------------- 
.................... #byte TRISA        =0x85 
.................... #byte TRISB	   =0x86 
.................... #byte TRISC	   =0x87 
.................... #byte TRISD        =0x88 
.................... #byte TRISE	   =0x89 
.................... #byte PIE1	   =0x8C 
.................... #byte PIE2	   =0x8D 
.................... #byte PCON	   =0x8E 
....................  
.................... #byte SSPCON2      =0x91 
.................... #byte PR2          =0x92 
.................... #byte SSPADD       =0x93 
.................... #byte SSPSTAT      =0x94 
....................  
.................... #byte TXSTA        =0x98 
.................... #byte SPBRG        =0x99 
....................  
.................... #byte ADRESL       =0x9E 
.................... #byte ADCON1       =0x9F 
....................  
.................... /*	bank 2 registers */ 
....................  
.................... #byte EEDATA	   =0x010C 
.................... #byte EEADR	   =0x010D 
.................... #byte EEDATH       =0x010E 
.................... #byte EEADRH       =0x010F 
....................  
.................... /*	bank 3 registers */ 
....................  
.................... #byte EECON1	   =0x018C 
.................... #byte EECON2	   =0x018D 
....................  
.................... //----- STATUS Bits -------------------------------------------------------- 
....................  
.................... // For Assembly Language - Note upper case 
.................... #define IRP 	7 
.................... #define RP1 	6 
.................... #define RP0 	5 
.................... #define NOT_TO 	4 
.................... #define NOT_PD 	3 
.................... #define Z 	2 
.................... #define DC 	1 
.................... #define C  	0 
....................  
.................... //---------------- TRIS BIT PORT-------------------------------------- 
.................... //------------------TRISA bits--------------------------- 
....................  
.................... #bit TRISA5     =0x85.5 
.................... #bit TRISA4     =0x85.4 
.................... #bit TRISA3     =0x85.3 
.................... #bit TRISA2     =0x85.2 
.................... #bit TRISA1     =0x85.1 
.................... #bit TRISA0     =0x85.0 
....................  
.................... //-----------------TRISB bits----------------------------- 
....................  
.................... #bit TRISB7     =0x86.7 
.................... #bit TRISB6     =0x86.6 
.................... #bit TRISB5     =0x86.5 
.................... #bit TRISB4     =0x86.4 
.................... #bit TRISB3     =0x86.3 
.................... #bit TRISB2     =0x86.2 
.................... #bit TRISB1     =0x86.1 
.................... #bit TRISB0     =0x86.0 
....................  
.................... //----------------TRISC bits------------------- 
....................  
.................... #bit TRISC7     =0x87.7 
.................... #bit TRISC6     =0x87.6 
.................... #bit TRISC5     =0x87.5 
.................... #bit TRISC4     =0x87.4 
.................... #bit TRISC3     =0x87.3 
.................... #bit TRISC2     =0x87.2 
.................... #bit TRISC1     =0x87.1 
.................... #bit TRISC0     =0x87.0 
.................... //------------------TRISD bit------------------ 
.................... #bit TRISD7     =0x88.7 
.................... #bit TRISD6     =0x88.6 
.................... #bit TRISD5     =0x88.5 
.................... #bit TRISD4     =0x88.4 
.................... #bit TRISD3     =0x88.3 
.................... #bit TRISD2     =0x88.2 
.................... #bit TRISD1     =0x88.1 
.................... #bit TRISD0     =0x88.0 
.................... //-------------TRISE bit---------------------- 
.................... #bit TRISE2     =0x89.2 
.................... #bit TRISE1     =0x89.1 
.................... #bit TRISE0     =0x89.0 
.................... //--------------------------------------------------------------------------- 
.................... //---------PORTA bits------------------ 
.................... #bit RA4			= 0x05.4 
.................... #bit RA3			= 0x05.3 
.................... #bit RA2			= 0x05.2 
.................... #bit RA1			= 0x05.1 
.................... #bit RA0			= 0x05.0 
.................... //---------PORTB bits------------------ 
.................... #bit RB7			= 0x06.7 
.................... #bit RB6			= 0x06.6 
.................... #bit RB5			= 0x06.5 
.................... #bit RB4			= 0x06.4 
.................... #bit RB3			= 0x06.3 
.................... #bit RB2			= 0x06.2 
.................... #bit RB1			= 0x06.1 
.................... #bit RB0			= 0x06.0 
.................... //---------PORTC bits------------------ 
.................... #bit RC7			= 0x07.7 
.................... #bit RC6			= 0x07.6 
.................... #bit RC5			= 0x07.5 
.................... #bit RC4			= 0x07.4 
.................... #bit RC3			= 0x07.3 
.................... #bit RC2			= 0x07.2 
.................... #bit RC1			= 0x07.1 
.................... #bit RC0			= 0x07.0 
.................... //---------PORTD bits------------------ 
.................... #bit RD7			= 0x08.7 
.................... #bit RD6			= 0x08.6 
.................... #bit RD5			= 0x08.5 
.................... #bit RD4			= 0x08.4 
.................... #bit RD3			= 0x08.3 
.................... #bit RD2			= 0x08.2 
.................... #bit RD1			= 0x08.1 
.................... #bit RD0			= 0x08.0 
.................... //---------PORTE bits------------------ 
.................... #bit RE2			= 0x09.2 
.................... #bit RE1			= 0x09.1 
.................... #bit RE0			= 0x09.0 
....................  
.................... //----- INTCON ------------------------------------------------------------- 
....................  
.................... #bit	GIE      = 0x0b.7 
.................... #bit	PEIE     = 0x0b.6 
.................... #bit	TMR0IE   = 0x0b.5 
.................... #bit	INTE     = 0x0b.4 
.................... #bit	RBIE     = 0x0b.3 
.................... #bit	TMR0IF   = 0x0b.2 
.................... #bit	INTF     = 0x0b.1 
.................... #bit	RBIF     = 0x0b.0 
....................  
.................... //----- PIR1 --------------------------------------------------------------- 
....................  
.................... #bit pspif     = 0x0c.7 
.................... #bit adif      = 0x0c.6 
.................... #bit rcif      = 0x0c.5 
.................... #bit txif      = 0x0c.4 
.................... #bit sspif     = 0x0c.3 
.................... #bit ccp1if    = 0x0c.2 
.................... #bit tmr2if    = 0x0c.1 
.................... #bit tmr1if    = 0x0c.0 
....................  
.................... //----- PIR2 --------------------------------------------------------------- 
....................  
.................... #bit cmif      = 0x0d.6 
.................... #bit eeif      = 0x0d.4 
.................... #bit bclif     = 0x0d.3 
.................... #bit ccp2if    = 0x0d.0 
....................  
.................... //----- PIE1 --------------------------------------------------------------- 
....................  
.................... #bit pspie     = 0x8c.7 
.................... #bit adie      = 0x8c.6 
.................... #bit rcie      = 0x8c.5 
.................... #bit txie      = 0x8c.4 
.................... #bit sspie     = 0x8c.3 
.................... #bit ccp1ie    = 0x8c.2 
.................... #bit tmr2ie    = 0x8c.1 
.................... #bit tmr1ie    = 0x8c.0 
....................  
.................... //----- PIE2 --------------------------------------------------------------- 
....................  
.................... #bit cmie      = 0x8d.6 
.................... #bit eeie      = 0x8d.4 
.................... #bit bclie     = 0x8d.3 
.................... #bit ccp2ie    = 0x8d.0 
.................... //----- T1CON Bits --------------------------------------------------------- 
.................... #bit T1CKPS1    =0x10.5 
.................... #bit T1CKPS0    =0x10.4 
.................... #bit T1OSCEN    =0x10.3 
.................... #bit T1SYNC     =0x10.2 
.................... #bit TMR1CS     =0x10.1 
.................... #bit TMR1ON     =0x10.0 
....................  
.................... //----- T2CON Bits --------------------------------------------------------- 
.................... #bit TOUTPS3    =0x12.6 
.................... #bit TOUTPS2    =0x12.5 
.................... #bit TOUTPS1    =0x12.4 
.................... #bit TOUTPS0    =0x12.3 
.................... #bit TMR2ON     =0x12.2 
.................... #bit T2CKPS1    =0x12.1 
.................... #bit T2CKPS0    =0x12.0 
....................  
.................... //-------------SSPCON bits-------------------------- 
.................... #bit WCOL       =0x14.7 
.................... #bit SSPOV      =0x14.6 
.................... #bit SSPEN      =0x14.5 
.................... #bit CKP        =0x14.4 
.................... #bit SSPM3      =0x14.3 
.................... #bit SSPM2      =0x14.2 
.................... #bit SSPM1      =0x14.1 
.................... #bit SSPM0      =0x14.0 
....................  
.................... //---------------CCP1CON bits-------- 
.................... #bit CCP1X      =0x17.5 
.................... #bit CCP1Y      =0x17.4 
.................... #bit CCP1M3     =0x17.3 
.................... #bit CCP1M2     =0x17.2 
.................... #bit CCP1M1     =0x17.1 
.................... #bit CCP1M0     =0x17.0 
....................  
.................... //---------------RCSTA bits------------------- 
....................  
.................... #bit SPEN       =0x18.7 
.................... #bit RX9        =0x18.6 
.................... #bit SREN       =0x18.5 
.................... #bit CREN       =0x18.4 
.................... #bit ADDEN      =0x18.3 
.................... #bit FERR       =0x18.2 
.................... #bit OERR       =0x18.1 
.................... #bit RX9D       =0x18.0 
....................  
.................... //-----------------------CCP2CON bits---------- 
....................  
.................... #bit CCP2X      =0x1D.5 
.................... #bit CCP2Y      =0x1D.4 
.................... #bit CCP2M3     =0x1D.3 
.................... #bit CCP2M2     =0x1D.2 
.................... #bit CCP2M1     =0x1D.1 
.................... #bit CCP2M0     =0x1D.0 
....................  
.................... //----- ADCON0 Bits -------------------------------------------------------- 
.................... #bit ADCS1      =0x1F.7 
.................... #bit ADCS0      =0x1F.6 
.................... #bit CHS2       =0x1F.5 
.................... #bit CHS1       =0x1F.4 
.................... #bit CHS0       =0x1F.3 
.................... #bit ADGO       =0x1F.2 
.................... #bit ADON       =0x1F.0 
....................  
.................... //----- OPTION_reg Bits -------------------------------------------------------- 
....................  
.................... #bit RBPU       =0x81.7 
.................... #bit INTEDG     =0x81.6 
.................... #bit T0CS       =0x81.5 
.................... #bit T0SE       =0x81.4 
.................... #bit PSA        =0x81.3 
.................... #bit PS2        =0x81.2 
.................... #bit PS1        =0x81.1 
.................... #bit PS0        =0x81.0 
.................... //----- PCON Bits ---------------------------------------------------------- 
....................  
.................... #bit POR        =0x8E.1 
.................... #bit BOD        =0x8E.0 
....................  
.................... //-----------SSPCON2 bits--------------------------------------------- 
....................  
.................... #bit GCEN       =0x91.7 
.................... #bit ACKSTAT    =0x91.6 
.................... #bit ACKDT      =0x91.5 
.................... #bit ACKEN      =0x91.4 
.................... #bit RCEN       =0x91.3 
.................... #bit PEN        =0x91.2 
.................... #bit RSEN       =0x91.1 
.................... #bit SEN        =0x91.0 
....................  
.................... //---------------------SSPSTAT bits------------------------ 
....................  
.................... #bit STAT_SMP   =0x94.7 
.................... #bit STAT_CKE   =0x94.6 
.................... #bit STAT_DA    =0x94.5 
.................... #bit STAT_P     =0x94.4 
.................... #bit STAT_S     =0x94.3 
.................... #bit STAT_RW    =0x94.2 
.................... #bit STAT_UA    =0x94.1 
.................... #bit STAT_BF    =0x94.0 
....................  
.................... //----------------TXSTA bits----------------- 
....................  
.................... #bit CSRC       =0x98.7 
.................... #bit TX9        =0x98.6 
.................... #bit TXEN       =0x98.5 
.................... #bit SYNC       =0x98.4 
.................... #bit BRGH       =0x98.2 
.................... #bit TRMT       =0x98.1 
.................... #bit TX9D       =0x98.0 
....................  
.................... //--------------ADCON1 bits--------------- 
....................  
.................... #bit ADFM       =0x9F.7 
.................... #bit ADCS2      =0x9F.6 
.................... #bit PCFG3      =0x9F.3 
.................... #bit PCFG2      =0x9F.2 
.................... #bit PCFG1      =0x9F.1 
.................... #bit PCFG0      =0x9F.0 
....................  
.................... //-----------EECON1 bits---------- 
....................  
.................... #bit EEPGD      =0x018C.7 
.................... #bit WRERR      =0x018C.3 
.................... #bit WREN       =0x018C.2 
.................... #bit WR         =0x018C.1 
.................... #bit RD         =0x018C.0 
....................  
....................  
.................... #device ADC = 16, WRITE_EEPROM = ASYNC 
....................  
.................... #FUSES NOWDT      //No Watch Dog Timer 
.................... #FUSES NOBROWNOUT //No brownout reset 
.................... #FUSES NOLVP      //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal = 20000000) 
*
0192:  MOVLW  48
0193:  MOVWF  04
0194:  BCF    03.7
0195:  MOVF   00,W
0196:  BTFSC  03.2
0197:  GOTO   1A5
0198:  MOVLW  06
0199:  MOVWF  78
019A:  CLRF   77
019B:  DECFSZ 77,F
019C:  GOTO   19B
019D:  DECFSZ 78,F
019E:  GOTO   19A
019F:  MOVLW  7B
01A0:  MOVWF  77
01A1:  DECFSZ 77,F
01A2:  GOTO   1A1
01A3:  DECFSZ 00,F
01A4:  GOTO   198
01A5:  RETURN
....................  
.................... //================================================== PREPROSECSOR ================================================== 
....................  
.................... // 1 >> on 
.................... #define triac1Out PIN_C6 
.................... #define triac2Out PIN_C7 
.................... // #define triac1Out PIN_D0 
.................... // #define triac2Out PIN_D1 
....................  
.................... #define relayOut PIN_C0 
.................... // 0 >> pressed 
.................... // #define btnINCREASE PIN_B4 
.................... // #define btnDECREASE PIN_B1 
....................  
.................... // dip switch 2-bit starter 
.................... #define dipStart1 PIN_B5 
.................... #define dipStart0 PIN_B4 
.................... // dip switch 3-bit ringthebell 
.................... #define dipRing2 PIN_B3 
.................... #define dipRing1 PIN_B2 
.................... #define dipRing0 PIN_B1 
.................... // dip switch rotate protecter 
.................... #define dipRotate1 PIN_D6 
.................... #define dipRotate0 PIN_D5 
....................  
.................... // 1 >> led on 
.................... #define ledSAFETY PIN_D2 
.................... #define ledSTARTING PIN_D3 
.................... #define ledRINGING PIN_C5 
.................... // #define ledBUTTON PIN_D4 
....................  
.................... #byte CMCON = 0x9C 
....................  
.................... #include "floor.c" 
.................... float32 FLOOR(float32 x) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
*
04BC:  BCF    4F.0
....................    y = x; 
04BD:  MOVF   44,W
04BE:  MOVWF  48
04BF:  MOVF   43,W
04C0:  MOVWF  47
04C1:  MOVF   42,W
04C2:  MOVWF  46
04C3:  MOVF   41,W
04C4:  MOVWF  45
....................  
....................    if (x < 0) 
04C5:  MOVF   44,W
04C6:  MOVWF  53
04C7:  MOVF   43,W
04C8:  MOVWF  52
04C9:  MOVF   42,W
04CA:  MOVWF  51
04CB:  MOVF   41,W
04CC:  MOVWF  50
04CD:  CLRF   57
04CE:  CLRF   56
04CF:  CLRF   55
04D0:  CLRF   54
04D1:  CALL   3CC
04D2:  BTFSS  03.0
04D3:  GOTO   4D8
....................    { 
....................       s = 1; 
04D4:  BSF    4F.0
....................       y = -y; 
04D5:  MOVF   46,W
04D6:  XORLW  80
04D7:  MOVWF  46
....................    } 
....................  
....................    if (y <= 32768.0) 
04D8:  MOVF   48,W
04D9:  MOVWF  53
04DA:  MOVF   47,W
04DB:  MOVWF  52
04DC:  MOVF   46,W
04DD:  MOVWF  51
04DE:  MOVF   45,W
04DF:  MOVWF  50
04E0:  CLRF   57
04E1:  CLRF   56
04E2:  CLRF   55
04E3:  MOVLW  8E
04E4:  MOVWF  54
04E5:  CALL   3CC
04E6:  BTFSC  03.0
04E7:  GOTO   4EA
04E8:  BTFSS  03.2
04E9:  GOTO   501
....................       res = (float32)(unsigned int16)y; 
04EA:  MOVF   48,W
04EB:  MOVWF  53
04EC:  MOVF   47,W
04ED:  MOVWF  52
04EE:  MOVF   46,W
04EF:  MOVWF  51
04F0:  MOVF   45,W
04F1:  MOVWF  50
04F2:  CALL   40B
04F3:  MOVF   79,W
04F4:  MOVWF  55
04F5:  MOVF   78,W
04F6:  MOVWF  54
04F7:  CALL   42A
04F8:  MOVF   7A,W
04F9:  MOVWF  4C
04FA:  MOVF   79,W
04FB:  MOVWF  4B
04FC:  MOVF   78,W
04FD:  MOVWF  4A
04FE:  MOVF   77,W
04FF:  MOVWF  49
0500:  GOTO   5BE
....................  
....................    else if (y < 10000000.0) 
0501:  MOVF   48,W
0502:  MOVWF  53
0503:  MOVF   47,W
0504:  MOVWF  52
0505:  MOVF   46,W
0506:  MOVWF  51
0507:  MOVF   45,W
0508:  MOVWF  50
0509:  MOVLW  80
050A:  MOVWF  57
050B:  MOVLW  96
050C:  MOVWF  56
050D:  MOVLW  18
050E:  MOVWF  55
050F:  MOVLW  96
0510:  MOVWF  54
0511:  CALL   3CC
0512:  BTFSS  03.0
0513:  GOTO   5B6
....................    { 
....................       l = (unsigned int16)(y * 0.000030517578125); 
0514:  MOVF   48,W
0515:  MOVWF  53
0516:  MOVF   47,W
0517:  MOVWF  52
0518:  MOVF   46,W
0519:  MOVWF  51
051A:  MOVF   45,W
051B:  MOVWF  50
051C:  CLRF   57
051D:  CLRF   56
051E:  CLRF   55
051F:  MOVLW  70
0520:  MOVWF  54
0521:  CALL   447
0522:  MOVF   7A,W
0523:  MOVWF  53
0524:  MOVF   79,W
0525:  MOVWF  52
0526:  MOVF   78,W
0527:  MOVWF  51
0528:  MOVF   77,W
0529:  MOVWF  50
052A:  CALL   40B
052B:  MOVF   79,W
052C:  MOVWF  4E
052D:  MOVF   78,W
052E:  MOVWF  4D
....................       y = 32768.0 * (y * 0.000030517578125 - (float32)l); 
052F:  MOVF   48,W
0530:  MOVWF  53
0531:  MOVF   47,W
0532:  MOVWF  52
0533:  MOVF   46,W
0534:  MOVWF  51
0535:  MOVF   45,W
0536:  MOVWF  50
0537:  CLRF   57
0538:  CLRF   56
0539:  CLRF   55
053A:  MOVLW  70
053B:  MOVWF  54
053C:  CALL   447
053D:  MOVF   7A,W
053E:  MOVWF  53
053F:  MOVF   79,W
0540:  MOVWF  52
0541:  MOVF   78,W
0542:  MOVWF  51
0543:  MOVF   77,W
0544:  MOVWF  50
0545:  MOVF   4E,W
0546:  MOVWF  55
0547:  MOVF   4D,W
0548:  MOVWF  54
0549:  CALL   42A
054A:  BSF    03.1
054B:  MOVF   53,W
054C:  MOVWF  57
054D:  MOVF   52,W
054E:  MOVWF  56
054F:  MOVF   51,W
0550:  MOVWF  55
0551:  MOVF   50,W
0552:  MOVWF  54
0553:  MOVF   7A,W
0554:  MOVWF  5B
0555:  MOVF   79,W
0556:  MOVWF  5A
0557:  MOVF   78,W
0558:  MOVWF  59
0559:  MOVF   77,W
055A:  MOVWF  58
055B:  CALL   1C1
055C:  CLRF   53
055D:  CLRF   52
055E:  CLRF   51
055F:  MOVLW  8E
0560:  MOVWF  50
0561:  MOVF   7A,W
0562:  MOVWF  57
0563:  MOVF   79,W
0564:  MOVWF  56
0565:  MOVF   78,W
0566:  MOVWF  55
0567:  MOVF   77,W
0568:  MOVWF  54
0569:  CALL   447
056A:  MOVF   7A,W
056B:  MOVWF  48
056C:  MOVF   79,W
056D:  MOVWF  47
056E:  MOVF   78,W
056F:  MOVWF  46
0570:  MOVF   77,W
0571:  MOVWF  45
....................       res = 32768.0 * (float32)l; 
0572:  MOVF   4E,W
0573:  MOVWF  55
0574:  MOVF   4D,W
0575:  MOVWF  54
0576:  CALL   42A
0577:  CLRF   53
0578:  CLRF   52
0579:  CLRF   51
057A:  MOVLW  8E
057B:  MOVWF  50
057C:  MOVF   7A,W
057D:  MOVWF  57
057E:  MOVF   79,W
057F:  MOVWF  56
0580:  MOVF   78,W
0581:  MOVWF  55
0582:  MOVF   77,W
0583:  MOVWF  54
0584:  CALL   447
0585:  MOVF   7A,W
0586:  MOVWF  4C
0587:  MOVF   79,W
0588:  MOVWF  4B
0589:  MOVF   78,W
058A:  MOVWF  4A
058B:  MOVF   77,W
058C:  MOVWF  49
....................       res += (float32)(unsigned int16)y; 
058D:  MOVF   48,W
058E:  MOVWF  53
058F:  MOVF   47,W
0590:  MOVWF  52
0591:  MOVF   46,W
0592:  MOVWF  51
0593:  MOVF   45,W
0594:  MOVWF  50
0595:  CALL   40B
0596:  MOVF   79,W
0597:  MOVWF  55
0598:  MOVF   78,W
0599:  MOVWF  54
059A:  CALL   42A
059B:  BCF    03.1
059C:  MOVF   4C,W
059D:  MOVWF  57
059E:  MOVF   4B,W
059F:  MOVWF  56
05A0:  MOVF   4A,W
05A1:  MOVWF  55
05A2:  MOVF   49,W
05A3:  MOVWF  54
05A4:  MOVF   7A,W
05A5:  MOVWF  5B
05A6:  MOVF   79,W
05A7:  MOVWF  5A
05A8:  MOVF   78,W
05A9:  MOVWF  59
05AA:  MOVF   77,W
05AB:  MOVWF  58
05AC:  CALL   1C1
05AD:  MOVF   7A,W
05AE:  MOVWF  4C
05AF:  MOVF   79,W
05B0:  MOVWF  4B
05B1:  MOVF   78,W
05B2:  MOVWF  4A
05B3:  MOVF   77,W
05B4:  MOVWF  49
....................    } 
05B5:  GOTO   5BE
....................  
....................    else 
....................       res = y; 
05B6:  MOVF   48,W
05B7:  MOVWF  4C
05B8:  MOVF   47,W
05B9:  MOVWF  4B
05BA:  MOVF   46,W
05BB:  MOVWF  4A
05BC:  MOVF   45,W
05BD:  MOVWF  49
....................  
....................    y = y - (float32)(unsigned int16)y; 
05BE:  MOVF   48,W
05BF:  MOVWF  53
05C0:  MOVF   47,W
05C1:  MOVWF  52
05C2:  MOVF   46,W
05C3:  MOVWF  51
05C4:  MOVF   45,W
05C5:  MOVWF  50
05C6:  CALL   40B
05C7:  MOVF   79,W
05C8:  MOVWF  55
05C9:  MOVF   78,W
05CA:  MOVWF  54
05CB:  CALL   42A
05CC:  BSF    03.1
05CD:  MOVF   48,W
05CE:  MOVWF  57
05CF:  MOVF   47,W
05D0:  MOVWF  56
05D1:  MOVF   46,W
05D2:  MOVWF  55
05D3:  MOVF   45,W
05D4:  MOVWF  54
05D5:  MOVF   7A,W
05D6:  MOVWF  5B
05D7:  MOVF   79,W
05D8:  MOVWF  5A
05D9:  MOVF   78,W
05DA:  MOVWF  59
05DB:  MOVF   77,W
05DC:  MOVWF  58
05DD:  CALL   1C1
05DE:  MOVF   7A,W
05DF:  MOVWF  48
05E0:  MOVF   79,W
05E1:  MOVWF  47
05E2:  MOVF   78,W
05E3:  MOVWF  46
05E4:  MOVF   77,W
05E5:  MOVWF  45
....................  
....................    if (s) 
05E6:  BTFSS  4F.0
05E7:  GOTO   5EB
....................       res = -res; 
05E8:  MOVF   4A,W
05E9:  XORLW  80
05EA:  MOVWF  4A
....................  
....................    if (y != 0) 
05EB:  MOVF   48,W
05EC:  MOVWF  53
05ED:  MOVF   47,W
05EE:  MOVWF  52
05EF:  MOVF   46,W
05F0:  MOVWF  51
05F1:  MOVF   45,W
05F2:  MOVWF  50
05F3:  CLRF   57
05F4:  CLRF   56
05F5:  CLRF   55
05F6:  CLRF   54
05F7:  CALL   3CC
05F8:  BTFSC  03.2
05F9:  GOTO   613
....................    { 
....................       if (s == 1) 
05FA:  BTFSS  4F.0
05FB:  GOTO   613
....................          res -= 1.0; 
05FC:  BSF    03.1
05FD:  MOVF   4C,W
05FE:  MOVWF  57
05FF:  MOVF   4B,W
0600:  MOVWF  56
0601:  MOVF   4A,W
0602:  MOVWF  55
0603:  MOVF   49,W
0604:  MOVWF  54
0605:  CLRF   5B
0606:  CLRF   5A
0607:  CLRF   59
0608:  MOVLW  7F
0609:  MOVWF  58
060A:  CALL   1C1
060B:  MOVF   7A,W
060C:  MOVWF  4C
060D:  MOVF   79,W
060E:  MOVWF  4B
060F:  MOVF   78,W
0610:  MOVWF  4A
0611:  MOVF   77,W
0612:  MOVWF  49
....................    } 
....................    if (x == 0) 
0613:  MOVF   44,W
0614:  MOVWF  53
0615:  MOVF   43,W
0616:  MOVWF  52
0617:  MOVF   42,W
0618:  MOVWF  51
0619:  MOVF   41,W
061A:  MOVWF  50
061B:  CLRF   57
061C:  CLRF   56
061D:  CLRF   55
061E:  CLRF   54
061F:  CALL   3CC
0620:  BTFSS  03.2
0621:  GOTO   626
....................       res = 0; 
0622:  CLRF   4C
0623:  CLRF   4B
0624:  CLRF   4A
0625:  CLRF   49
....................  
....................    return (res); 
0626:  MOVF   49,W
0627:  MOVWF  77
0628:  MOVF   4A,W
0629:  MOVWF  78
062A:  MOVF   4B,W
062B:  MOVWF  79
062C:  MOVF   4C,W
062D:  MOVWF  7A
062E:  RETURN
.................... } 
....................  
....................  
.................... //================================================== VARIABLES ================================================== 
....................  
.................... // set angle (10 levels). more angle, weaker motor 
.................... int32 angleStarter = 0; 
.................... int32 angleRingTheBell = 0; 
.................... // volatile int32 angleStarter = read_eeprom(0x00); 
.................... // volatile int32 angleRingTheBell = read_eeprom(0x01); 
....................  
.................... // int32 valTimer0SetStarter = (int32)FLOOR((13.1072 - angleStarter) / 0.0512) - 1; 
.................... // int32 valTimer0SetRingTheBell = (int32)FLOOR((13.1072 - angleRingTheBell) / 0.0512) - 1; 
....................  
.................... int32 valTimer0SetStarter = 0;     // init in DipSwitchState() 
.................... int32 valTimer0SetRingTheBell = 0; // init in DipSwitchState() 
....................  
.................... volatile signed int16 count = 0; 
.................... // volatile int16 iTimer2OverFlow; 
.................... int1 flagForward = true, flagStarter = true, flagSTOP = true; 
....................  
.................... signed int16 ProtectRotate = 0; // init in DipSwitchState() 
....................  
.................... //================================================== ISR Func() ================================================== 
....................  
.................... // #INT_COMP 
.................... // void isrComparator() 
.................... // { // A mismatch condition will continue to set flag bit CMIF. Reading CMCON will end the mismatch condition and allow flag bit CMIF to be cleared 
.................... //    char charas = CMCON; 
.................... //    output_low(relayOut);   // safety switch 
.................... //    output_high(PIN_RESET); // reset mcu 
.................... // } 
....................  
.................... #INT_EXT 
.................... void ext_isr() 
.................... { 
....................    // cross zero point detector 50Hz >> 1/50/2 sec per half pulse after diode brighet 
....................  
....................    output_low(triac1Out); 
*
0048:  BCF    3C.6
0049:  MOVF   3C,W
004A:  BSF    03.5
004B:  MOVWF  07
004C:  BCF    03.5
004D:  BCF    07.6
....................    output_low(triac2Out); 
004E:  BCF    3C.7
004F:  MOVF   3C,W
0050:  BSF    03.5
0051:  MOVWF  07
0052:  BCF    03.5
0053:  BCF    07.7
....................  
....................    if (flagStarter) 
0054:  BTFSS  39.1
0055:  GOTO   059
....................       set_timer0(valTimer0SetStarter); 
0056:  MOVF   2F,W
0057:  MOVWF  01
0058:  GOTO   05B
....................    else 
....................       set_timer0(valTimer0SetRingTheBell); 
0059:  MOVF   33,W
005A:  MOVWF  01
....................  
....................    clear_interrupt(INT_TIMER0); 
005B:  BCF    0B.2
....................    enable_interrupts(INT_TIMER0); 
005C:  BSF    0B.5
....................    clear_interrupt(INT_EXT); // waiting for next EXT 
005D:  BCF    0B.1
.................... } 
....................  
005E:  BCF    0B.1
005F:  BCF    0A.3
0060:  BCF    0A.4
0061:  GOTO   02B
.................... #INT_TIMER0 
.................... void timer0_isr() 
.................... { 
....................    if (flagForward && !flagSTOP) 
0062:  BTFSS  39.0
0063:  GOTO   06D
0064:  BTFSC  39.2
0065:  GOTO   06D
....................       output_high(triac1Out); 
0066:  BCF    3C.6
0067:  MOVF   3C,W
0068:  BSF    03.5
0069:  MOVWF  07
006A:  BCF    03.5
006B:  BSF    07.6
006C:  GOTO   077
....................    else if (!flagForward && !flagSTOP) 
006D:  BTFSC  39.0
006E:  GOTO   077
006F:  BTFSC  39.2
0070:  GOTO   077
....................       output_high(triac2Out); 
0071:  BCF    3C.7
0072:  MOVF   3C,W
0073:  BSF    03.5
0074:  MOVWF  07
0075:  BCF    03.5
0076:  BSF    07.7
....................  
....................    // set_timer0(200.00); 
....................    disable_interrupts(INT_TIMER0); 
0077:  BCF    0B.5
.................... } 
....................  
0078:  BCF    0B.2
0079:  BCF    0A.3
007A:  BCF    0A.4
007B:  GOTO   02B
.................... #INT_TIMER2 
.................... void timer2_isr() 
.................... { 
....................    // --iTimer2OverFlow; 
....................    // if (!(--iTimer2OverFlow)) 
....................    // if (!iTimer2OverFlow) 
....................    { 
....................       // reset neu quay qua 4 vong 
....................       // if (flagForward) 
....................       // { 
....................       if (count >= ProtectRotate) // (+)ProtectRotate rotate 
007C:  BTFSS  3B.7
007D:  GOTO   081
007E:  BTFSS  38.7
007F:  GOTO   08D
0080:  GOTO   083
0081:  BTFSC  38.7
0082:  GOTO   095
0083:  MOVF   3B,W
0084:  SUBWF  38,W
0085:  BTFSS  03.0
0086:  GOTO   095
0087:  BTFSS  03.2
0088:  GOTO   08D
0089:  MOVF   3A,W
008A:  SUBWF  37,W
008B:  BTFSS  03.0
008C:  GOTO   095
....................       { 
....................          output_low(relayOut); // safety switch 
008D:  BCF    3C.0
008E:  MOVF   3C,W
008F:  BSF    03.5
0090:  MOVWF  07
0091:  BCF    03.5
0092:  BCF    07.0
....................          reset_cpu(); 
0093:  CLRF   0A
0094:  GOTO   000
....................       } 
....................       // } 
....................       //else 
....................       //{ 
....................       if (count <= -1 * ProtectRotate) // (-)ProtectRotate rotate 
0095:  MOVLW  FF
0096:  MOVWF  65
0097:  MOVWF  64
0098:  MOVF   3B,W
0099:  MOVWF  67
009A:  MOVF   3A,W
009B:  MOVWF  66
*
00C9:  MOVF   79,W
00CA:  MOVWF  7A
00CB:  MOVF   78,W
00CC:  BTFSS  38.7
00CD:  GOTO   0D1
00CE:  BTFSS  7A.7
00CF:  GOTO   0DD
00D0:  GOTO   0D3
00D1:  BTFSC  7A.7
00D2:  GOTO   0E5
00D3:  MOVF   38,W
00D4:  SUBWF  7A,W
00D5:  BTFSS  03.0
00D6:  GOTO   0E5
00D7:  BTFSS  03.2
00D8:  GOTO   0DD
00D9:  MOVF   37,W
00DA:  SUBWF  78,W
00DB:  BTFSS  03.0
00DC:  GOTO   0E5
....................       { 
....................          output_low(relayOut); // safety switch 
00DD:  BCF    3C.0
00DE:  MOVF   3C,W
00DF:  BSF    03.5
00E0:  MOVWF  07
00E1:  BCF    03.5
00E2:  BCF    07.0
....................          reset_cpu(); 
00E3:  CLRF   0A
00E4:  GOTO   000
....................       } 
....................       //} 
....................    } 
.................... } 
....................  
00E5:  BCF    0C.1
00E6:  BCF    0A.3
00E7:  BCF    0A.4
00E8:  GOTO   02B
.................... #INT_CCP1 
.................... void ccp1_isr() 
.................... { 
....................    if (RC1) 
00E9:  BTFSS  07.1
00EA:  GOTO   0EF
....................       ++count; 
00EB:  INCF   37,F
00EC:  BTFSC  03.2
00ED:  INCF   38,F
00EE:  GOTO   0F3
....................    else 
....................       --count; 
00EF:  MOVF   37,W
00F0:  BTFSC  03.2
00F1:  DECF   38,F
00F2:  DECF   37,F
....................    // clear_interrupt(INT_CCP1); 
00F3:  BCF    0C.2
00F4:  BCF    0A.3
00F5:  BCF    0A.4
00F6:  GOTO   02B
.................... } 
....................  
.................... //================================================== Func() ================================================== 
....................  
.................... void FORWARD() 
.................... { 
....................    output_low(triac2Out); 
*
06A3:  BCF    3C.7
06A4:  MOVF   3C,W
06A5:  BSF    03.5
06A6:  MOVWF  07
06A7:  BCF    03.5
06A8:  BCF    07.7
....................  
....................    flagForward = true; 
06A9:  BSF    39.0
....................    flagSTOP = false; 
06AA:  BCF    39.2
06AB:  RETURN
.................... } 
.................... void REVERSE() 
.................... { 
....................    output_low(triac1Out); 
*
06BA:  BCF    3C.6
06BB:  MOVF   3C,W
06BC:  BSF    03.5
06BD:  MOVWF  07
06BE:  BCF    03.5
06BF:  BCF    07.6
....................    flagForward = flagSTOP = false; 
06C0:  BCF    39.2
06C1:  BCF    39.0
06C2:  RETURN
.................... } 
.................... void STOP() 
.................... { 
....................    flagSTOP = true; 
*
06AC:  BSF    39.2
....................    output_low(triac1Out); 
06AD:  BCF    3C.6
06AE:  MOVF   3C,W
06AF:  BSF    03.5
06B0:  MOVWF  07
06B1:  BCF    03.5
06B2:  BCF    07.6
....................    output_low(triac2Out); 
06B3:  BCF    3C.7
06B4:  MOVF   3C,W
06B5:  BSF    03.5
06B6:  MOVWF  07
06B7:  BCF    03.5
06B8:  BCF    07.7
06B9:  RETURN
.................... } 
....................  
.................... void starter() 
.................... { 
....................    // half rotate 
....................    while (count <= 200) 
*
06C3:  BTFSC  38.7
06C4:  GOTO   6CC
06C5:  MOVF   38,F
06C6:  BTFSS  03.2
06C7:  GOTO   6DC
06C8:  MOVF   37,W
06C9:  SUBLW  C8
06CA:  BTFSS  03.0
06CB:  GOTO   6DC
....................    { 
....................       if (count <= -200) 
06CC:  BTFSS  38.7
06CD:  GOTO   6DA
06CE:  MOVF   38,W
06CF:  SUBLW  FF
06D0:  BTFSS  03.0
06D1:  GOTO   6DA
06D2:  BTFSS  03.2
06D3:  GOTO   6D8
06D4:  MOVF   37,W
06D5:  SUBLW  38
06D6:  BTFSS  03.0
06D7:  GOTO   6DA
....................          reset_cpu(); 
06D8:  CLRF   0A
06D9:  GOTO   000
....................       FORWARD(); 
06DA:  CALL   6A3
06DB:  GOTO   6C3
....................    } 
....................  
....................    STOP(); 
06DC:  CALL   6AC
....................    while (count >= 0) 
06DD:  BTFSC  38.7
06DE:  GOTO   6E1
....................       STOP(); 
06DF:  CALL   6AC
06E0:  GOTO   6DD
....................    while (count >= -200) 
06E1:  BTFSS  38.7
06E2:  GOTO   6EE
06E3:  MOVF   38,W
06E4:  SUBLW  FE
06E5:  BTFSC  03.0
06E6:  GOTO   6F0
06E7:  XORLW  FF
06E8:  BTFSS  03.2
06E9:  GOTO   6EE
06EA:  MOVF   37,W
06EB:  SUBLW  37
06EC:  BTFSC  03.0
06ED:  GOTO   6F0
....................       REVERSE(); 
06EE:  CALL   6BA
06EF:  GOTO   6E1
....................    STOP(); 
06F0:  CALL   6AC
....................    while (count <= 0) 
06F1:  BTFSC  38.7
06F2:  GOTO   6FA
06F3:  MOVF   38,F
06F4:  BTFSS  03.2
06F5:  GOTO   6FC
06F6:  MOVF   37,W
06F7:  SUBLW  00
06F8:  BTFSS  03.0
06F9:  GOTO   6FC
....................       STOP(); 
06FA:  CALL   6AC
06FB:  GOTO   6F1
....................  
....................    // 1 rotate 
....................    while (count <= 400) 
06FC:  BTFSC  38.7
06FD:  GOTO   708
06FE:  MOVF   38,W
06FF:  SUBLW  01
0700:  BTFSS  03.0
0701:  GOTO   70A
0702:  BTFSS  03.2
0703:  GOTO   708
0704:  MOVF   37,W
0705:  SUBLW  90
0706:  BTFSS  03.0
0707:  GOTO   70A
....................       FORWARD(); 
0708:  CALL   6A3
0709:  GOTO   6FC
....................    STOP(); 
070A:  CALL   6AC
....................    while (count >= 0) 
070B:  BTFSC  38.7
070C:  GOTO   70F
....................       STOP(); 
070D:  CALL   6AC
070E:  GOTO   70B
....................    while (count >= -400) 
070F:  BTFSS  38.7
0710:  GOTO   71C
0711:  MOVF   38,W
0712:  SUBLW  FD
0713:  BTFSC  03.0
0714:  GOTO   71E
0715:  XORLW  FF
0716:  BTFSS  03.2
0717:  GOTO   71C
0718:  MOVF   37,W
0719:  SUBLW  6F
071A:  BTFSC  03.0
071B:  GOTO   71E
....................       REVERSE(); 
071C:  CALL   6BA
071D:  GOTO   70F
....................    STOP(); 
071E:  CALL   6AC
....................    while (count <= 0) 
071F:  BTFSC  38.7
0720:  GOTO   728
0721:  MOVF   38,F
0722:  BTFSS  03.2
0723:  GOTO   72A
0724:  MOVF   37,W
0725:  SUBLW  00
0726:  BTFSS  03.0
0727:  GOTO   72A
....................       STOP(); 
0728:  CALL   6AC
0729:  GOTO   71F
....................  
....................    // 2 rotates 
....................    while (count <= 800) 
072A:  BTFSC  38.7
072B:  GOTO   736
072C:  MOVF   38,W
072D:  SUBLW  03
072E:  BTFSS  03.0
072F:  GOTO   738
0730:  BTFSS  03.2
0731:  GOTO   736
0732:  MOVF   37,W
0733:  SUBLW  20
0734:  BTFSS  03.0
0735:  GOTO   738
....................       FORWARD(); 
0736:  CALL   6A3
0737:  GOTO   72A
....................    STOP(); 
0738:  CALL   6AC
....................    while (count >= 0) 
0739:  BTFSC  38.7
073A:  GOTO   73D
....................       STOP(); 
073B:  CALL   6AC
073C:  GOTO   739
....................    while (count >= -800) 
073D:  BTFSS  38.7
073E:  GOTO   74A
073F:  MOVF   38,W
0740:  SUBLW  FB
0741:  BTFSC  03.0
0742:  GOTO   74C
0743:  XORLW  FF
0744:  BTFSS  03.2
0745:  GOTO   74A
0746:  MOVF   37,W
0747:  SUBLW  DF
0748:  BTFSC  03.0
0749:  GOTO   74C
....................       REVERSE(); 
074A:  CALL   6BA
074B:  GOTO   73D
....................    STOP(); 
074C:  CALL   6AC
....................    while (count <= 0) 
074D:  BTFSC  38.7
074E:  GOTO   756
074F:  MOVF   38,F
0750:  BTFSS  03.2
0751:  GOTO   758
0752:  MOVF   37,W
0753:  SUBLW  00
0754:  BTFSS  03.0
0755:  GOTO   758
....................       STOP(); 
0756:  CALL   6AC
0757:  GOTO   74D
....................  
....................    // 3 rotates 1 side 
....................    while (count <= 1200) 
0758:  BTFSC  38.7
0759:  GOTO   764
075A:  MOVF   38,W
075B:  SUBLW  04
075C:  BTFSS  03.0
075D:  GOTO   766
075E:  BTFSS  03.2
075F:  GOTO   764
0760:  MOVF   37,W
0761:  SUBLW  B0
0762:  BTFSS  03.0
0763:  GOTO   766
....................       FORWARD(); 
0764:  CALL   6A3
0765:  GOTO   758
....................    STOP(); 
0766:  CALL   6AC
....................  
....................    flagStarter = false; 
0767:  BCF    39.1
0768:  BSF    0A.3
0769:  BCF    0A.4
076A:  GOTO   1A7 (RETURN)
.................... } 
....................  
.................... void RingTheBell() 
.................... { 
....................    while (count >= 400) 
076B:  BTFSC  38.7
076C:  GOTO   77A
076D:  MOVF   38,W
076E:  SUBLW  00
076F:  BTFSC  03.0
0770:  GOTO   77A
0771:  XORLW  FF
0772:  BTFSS  03.2
0773:  GOTO   778
0774:  MOVF   37,W
0775:  SUBLW  8F
0776:  BTFSC  03.0
0777:  GOTO   77A
....................       STOP(); 
0778:  CALL   6AC
0779:  GOTO   76B
....................  
....................    while (count >= -800) 
077A:  BTFSS  38.7
077B:  GOTO   787
077C:  MOVF   38,W
077D:  SUBLW  FB
077E:  BTFSC  03.0
077F:  GOTO   789
0780:  XORLW  FF
0781:  BTFSS  03.2
0782:  GOTO   787
0783:  MOVF   37,W
0784:  SUBLW  DF
0785:  BTFSC  03.0
0786:  GOTO   789
....................       REVERSE(); 
0787:  CALL   6BA
0788:  GOTO   77A
....................    STOP(); 
0789:  CALL   6AC
....................  
....................    while (count <= -400) 
078A:  BTFSS  38.7
078B:  GOTO   798
078C:  MOVF   38,W
078D:  SUBLW  FE
078E:  BTFSS  03.0
078F:  GOTO   798
0790:  BTFSS  03.2
0791:  GOTO   796
0792:  MOVF   37,W
0793:  SUBLW  70
0794:  BTFSS  03.0
0795:  GOTO   798
....................       STOP(); 
0796:  CALL   6AC
0797:  GOTO   78A
....................  
....................    while (count <= 800) 
0798:  BTFSC  38.7
0799:  GOTO   7A4
079A:  MOVF   38,W
079B:  SUBLW  03
079C:  BTFSS  03.0
079D:  GOTO   7A6
079E:  BTFSS  03.2
079F:  GOTO   7A4
07A0:  MOVF   37,W
07A1:  SUBLW  20
07A2:  BTFSS  03.0
07A3:  GOTO   7A6
....................       FORWARD(); 
07A4:  CALL   6A3
07A5:  GOTO   798
....................    STOP(); 
07A6:  CALL   6AC
07A7:  BSF    0A.3
07A8:  BCF    0A.4
07A9:  GOTO   1B4 (RETURN)
.................... } 
....................  
.................... // pic 20mhz 5.10^6 = 1sec 
.................... // motor 2000rpm 
.................... // quay co tai: 0.5rps -> 200xung/s -> 1/200 s/xung 
.................... void checkSafetyFirst(int32 sec) 
.................... { 
....................    flagSTOP = true; 
*
064E:  BSF    39.2
....................    output_low(relayOut); // safety switch 
064F:  BCF    3C.0
0650:  MOVF   3C,W
0651:  BSF    03.5
0652:  MOVWF  07
0653:  BCF    03.5
0654:  BCF    07.0
....................  
....................    signed int16 lastCount = count; 
0655:  MOVF   38,W
0656:  MOVWF  42
0657:  MOVF   37,W
0658:  MOVWF  41
....................    for (int32 i = sec; --i;) // waitting steady 
0659:  MOVF   40,W
065A:  MOVWF  46
065B:  MOVF   3F,W
065C:  MOVWF  45
065D:  MOVF   3E,W
065E:  MOVWF  44
065F:  MOVF   3D,W
0660:  MOVWF  43
0661:  MOVLW  FF
0662:  ADDWF  43,F
0663:  BTFSS  03.0
0664:  ADDWF  44,F
0665:  BTFSS  03.0
0666:  ADDWF  45,F
0667:  BTFSS  03.0
0668:  ADDWF  46,F
0669:  MOVF   43,F
066A:  BTFSS  03.2
066B:  GOTO   675
066C:  MOVF   44,F
066D:  BTFSS  03.2
066E:  GOTO   675
066F:  MOVF   45,F
0670:  BTFSS  03.2
0671:  GOTO   675
0672:  MOVF   46,F
0673:  BTFSC  03.2
0674:  GOTO   68D
....................    { 
....................       if (count != lastCount) 
0675:  MOVF   41,W
0676:  SUBWF  37,W
0677:  BTFSS  03.2
0678:  GOTO   67D
0679:  MOVF   42,W
067A:  SUBWF  38,W
067B:  BTFSC  03.2
067C:  GOTO   68C
....................       { 
....................          i = sec; // reset 
067D:  MOVF   40,W
067E:  MOVWF  46
067F:  MOVF   3F,W
0680:  MOVWF  45
0681:  MOVF   3E,W
0682:  MOVWF  44
0683:  MOVF   3D,W
0684:  MOVWF  43
....................          lastCount = count; 
0685:  MOVF   38,W
0686:  MOVWF  42
0687:  MOVF   37,W
0688:  MOVWF  41
....................          delay_ms(30); // pray for couting up 
0689:  MOVLW  1E
068A:  MOVWF  48
068B:  CALL   192
....................       } 
068C:  GOTO   661
....................    } 
....................  
....................    count = 0; // update 0 point 
068D:  CLRF   38
068E:  CLRF   37
....................    output_high(relayOut); 
068F:  BCF    3C.0
0690:  MOVF   3C,W
0691:  BSF    03.5
0692:  MOVWF  07
0693:  BCF    03.5
0694:  BSF    07.0
....................    delay_ms(3000); // ngăn hồ quang nếu cùng lúc đóng triac lập tức 
0695:  MOVLW  0C
0696:  MOVWF  47
0697:  MOVLW  FA
0698:  MOVWF  48
0699:  CALL   192
069A:  DECFSZ 47,F
069B:  GOTO   697
....................    enable_interrupts(INT_TIMER2); 
069C:  BSF    03.5
069D:  BSF    0C.1
....................    flagSTOP = false; 
069E:  BCF    03.5
069F:  BCF    39.2
06A0:  BSF    0A.3
06A1:  BCF    0A.4
06A2:  GOTO   19C (RETURN)
.................... } 
....................  
.................... void initDipSwitchState() 
.................... { 
....................    TRISB5 = TRISB4 = TRISB3 = TRISB2 = TRISB1 = TRISD6 = TRISD5 = 1; 
*
00F7:  BSF    03.5
00F8:  BSF    08.5
00F9:  BSF    08.6
00FA:  BSF    06.1
00FB:  BSF    06.2
00FC:  BSF    06.3
00FD:  BSF    06.4
00FE:  BSF    06.5
....................  
....................    // Dip swith Start 
....................    switch (PORTB & 0b00110000) 
00FF:  BCF    03.5
0100:  MOVF   06,W
0101:  ANDLW  30
0102:  BTFSC  03.2
0103:  GOTO   10E
0104:  XORLW  10
0105:  BTFSC  03.2
0106:  GOTO   114
0107:  XORLW  30
0108:  BTFSC  03.2
0109:  GOTO   11A
010A:  XORLW  10
010B:  BTFSC  03.2
010C:  GOTO   120
010D:  GOTO   125
....................    // switch (PORTB & 0x30) 
....................    { 
....................    // case 0b00: 
....................    case 0: 
....................       angleStarter = 1; 
010E:  CLRF   2A
010F:  CLRF   29
0110:  CLRF   28
0111:  MOVLW  01
0112:  MOVWF  27
....................       // output_high(ledRINGING); // debug 
....................       // delay_ms(100); 
....................       // output_low(ledRINGING); 
....................       // delay_ms(100); 
....................       // output_high(ledRINGING); 
....................       // delay_ms(100); 
....................       // output_low(ledRINGING); 
....................       break; 
0113:  GOTO   125
....................    // case 0b01: 
....................    case 0b00010000: 
....................       angleStarter = 2; 
0114:  CLRF   2A
0115:  CLRF   29
0116:  CLRF   28
0117:  MOVLW  02
0118:  MOVWF  27
....................       break; 
0119:  GOTO   125
....................    // case 0b10: 
....................    case 0b00100000: 
....................       angleStarter = 3; 
011A:  CLRF   2A
011B:  CLRF   29
011C:  CLRF   28
011D:  MOVLW  03
011E:  MOVWF  27
....................       break; 
011F:  GOTO   125
....................    case 0b00110000: 
....................       // case 3: 
....................       angleStarter = 4; 
0120:  CLRF   2A
0121:  CLRF   29
0122:  CLRF   28
0123:  MOVLW  04
0124:  MOVWF  27
....................       break; 
....................    } 
....................  
....................    // Dip swith Ringing 
....................    switch (PORTB & 0b00001110) 
0125:  MOVF   06,W
0126:  ANDLW  0E
0127:  ADDLW  F1
0128:  BTFSC  03.0
0129:  GOTO   15B
012A:  ADDLW  0F
012B:  GOTO   17F
....................    // switch (PORTB & 0x0E) 
....................    { 
....................    case 0b0000: 
....................       angleRingTheBell = 2; 
012C:  CLRF   2E
012D:  CLRF   2D
012E:  CLRF   2C
012F:  MOVLW  02
0130:  MOVWF  2B
....................       break; 
0131:  GOTO   15B
....................    case 0b0010: 
....................       angleRingTheBell = 3; 
0132:  CLRF   2E
0133:  CLRF   2D
0134:  CLRF   2C
0135:  MOVLW  03
0136:  MOVWF  2B
....................       break; 
0137:  GOTO   15B
....................    case 0b0100: 
....................       angleRingTheBell = 4; 
0138:  CLRF   2E
0139:  CLRF   2D
013A:  CLRF   2C
013B:  MOVLW  04
013C:  MOVWF  2B
....................       break; 
013D:  GOTO   15B
....................    case 0b0110: 
....................       angleRingTheBell = 5; 
013E:  CLRF   2E
013F:  CLRF   2D
0140:  CLRF   2C
0141:  MOVLW  05
0142:  MOVWF  2B
....................       break; 
0143:  GOTO   15B
....................    case 0b1000: 
....................       angleRingTheBell = 6; 
0144:  CLRF   2E
0145:  CLRF   2D
0146:  CLRF   2C
0147:  MOVLW  06
0148:  MOVWF  2B
....................       break; 
0149:  GOTO   15B
....................    case 0b1010: 
....................       angleRingTheBell = 7; 
014A:  CLRF   2E
014B:  CLRF   2D
014C:  CLRF   2C
014D:  MOVLW  07
014E:  MOVWF  2B
....................       break; 
014F:  GOTO   15B
....................    case 0b1100: 
....................       angleRingTheBell = 8; 
0150:  CLRF   2E
0151:  CLRF   2D
0152:  CLRF   2C
0153:  MOVLW  08
0154:  MOVWF  2B
....................       break; 
0155:  GOTO   15B
....................    case 0b1110: 
....................       angleRingTheBell = 9; 
0156:  CLRF   2E
0157:  CLRF   2D
0158:  CLRF   2C
0159:  MOVLW  09
015A:  MOVWF  2B
....................       break; 
....................    } 
....................  
....................    // Dip swith Protector Rotate 
....................    switch (PORTD & 0b01100000) 
015B:  MOVF   08,W
015C:  ANDLW  60
015D:  BTFSC  03.2
015E:  GOTO   169
015F:  XORLW  20
0160:  BTFSC  03.2
0161:  GOTO   16E
0162:  XORLW  60
0163:  BTFSC  03.2
0164:  GOTO   173
0165:  XORLW  20
0166:  BTFSC  03.2
0167:  GOTO   178
0168:  GOTO   17C
....................    // switch (PORTD & 0x60) 
....................    { 
....................    case 0b0000000: 
....................       ProtectRotate = 2000; 
0169:  MOVLW  07
016A:  MOVWF  3B
016B:  MOVLW  D0
016C:  MOVWF  3A
....................       break; 
016D:  GOTO   17C
....................    case 0b0100000: 
....................       ProtectRotate = 2400; 
016E:  MOVLW  09
016F:  MOVWF  3B
0170:  MOVLW  60
0171:  MOVWF  3A
....................       break; 
0172:  GOTO   17C
....................    case 0b1000000: 
....................       ProtectRotate = 2800; 
0173:  MOVLW  0A
0174:  MOVWF  3B
0175:  MOVLW  F0
0176:  MOVWF  3A
....................       break; 
0177:  GOTO   17C
....................    case 0b1100000: 
....................       ProtectRotate = 3200; 
0178:  MOVLW  0C
0179:  MOVWF  3B
017A:  MOVLW  80
017B:  MOVWF  3A
....................       break; 
....................    } 
017C:  BSF    0A.3
017D:  BCF    0A.4
017E:  GOTO   03A (RETURN)
.................... } 
....................  
.................... //================================================== MAIN ================================================== 
....................  
.................... void main() 
*
0800:  MOVF   03,W
0801:  ANDLW  1F
0802:  MOVWF  03
0803:  CLRF   2A
0804:  CLRF   29
0805:  CLRF   28
0806:  CLRF   27
0807:  CLRF   2E
0808:  CLRF   2D
0809:  CLRF   2C
080A:  CLRF   2B
080B:  CLRF   32
080C:  CLRF   31
080D:  CLRF   30
080E:  CLRF   2F
080F:  CLRF   36
0810:  CLRF   35
0811:  CLRF   34
0812:  CLRF   33
0813:  CLRF   38
0814:  CLRF   37
0815:  BSF    39.0
0816:  BSF    39.1
0817:  BSF    39.2
0818:  CLRF   3B
0819:  CLRF   3A
081A:  MOVLW  FF
081B:  MOVWF  3C
081C:  BSF    03.5
081D:  BSF    03.6
081E:  MOVF   09,W
081F:  ANDLW  C0
0820:  MOVWF  09
0821:  BCF    03.6
0822:  BCF    1F.4
0823:  BCF    1F.5
0824:  MOVLW  00
0825:  BSF    03.6
0826:  MOVWF  08
0827:  BCF    03.5
0828:  CLRF   07
0829:  CLRF   08
082A:  CLRF   09
082B:  BCF    03.7
.................... { 
....................    TRISB0 = TRISC1 = TRISC2 = 1;          //input 
082C:  BSF    03.5
082D:  BCF    03.6
082E:  BSF    07.2
082F:  BSF    07.1
0830:  BSF    06.0
....................    TRISC0 = TRISD2 = TRISD3 = TRISC5 = 0; //output 
0831:  BCF    07.5
0832:  BCF    08.3
0833:  BCF    08.2
0834:  BCF    07.0
....................  
....................    // triac 
....................    // TRISD0 = TRISD1 = 0; 
....................    TRISC6 = TRISC7 = 0; 
0835:  BCF    07.7
0836:  BCF    07.6
....................  
....................    initDipSwitchState(); 
0837:  BCF    0A.3
0838:  BCF    03.5
0839:  GOTO   0F7
083A:  BSF    0A.3
....................    if (angleStarter == 4) 
083B:  MOVF   27,W
083C:  SUBLW  04
083D:  BTFSS  03.2
083E:  GOTO   06F
083F:  MOVF   28,F
0840:  BTFSS  03.2
0841:  GOTO   06F
0842:  MOVF   29,F
0843:  BTFSS  03.2
0844:  GOTO   06F
0845:  MOVF   2A,F
0846:  BTFSS  03.2
0847:  GOTO   06F
....................    { 
....................       output_high(ledRINGING); // debug 
0848:  BCF    3C.5
0849:  MOVF   3C,W
084A:  BSF    03.5
084B:  MOVWF  07
084C:  BCF    03.5
084D:  BSF    07.5
....................       delay_ms(100); 
084E:  MOVLW  64
084F:  MOVWF  48
0850:  BCF    0A.3
0851:  CALL   192
0852:  BSF    0A.3
....................       output_low(ledRINGING); 
0853:  BCF    3C.5
0854:  MOVF   3C,W
0855:  BSF    03.5
0856:  MOVWF  07
0857:  BCF    03.5
0858:  BCF    07.5
....................       delay_ms(100); 
0859:  MOVLW  64
085A:  MOVWF  48
085B:  BCF    0A.3
085C:  CALL   192
085D:  BSF    0A.3
....................       output_high(ledRINGING); 
085E:  BCF    3C.5
085F:  MOVF   3C,W
0860:  BSF    03.5
0861:  MOVWF  07
0862:  BCF    03.5
0863:  BSF    07.5
....................       delay_ms(100); 
0864:  MOVLW  64
0865:  MOVWF  48
0866:  BCF    0A.3
0867:  CALL   192
0868:  BSF    0A.3
....................       output_low(ledRINGING); 
0869:  BCF    3C.5
086A:  MOVF   3C,W
086B:  BSF    03.5
086C:  MOVWF  07
086D:  BCF    03.5
086E:  BCF    07.5
....................    } 
....................    valTimer0SetStarter = (int32)FLOOR((13.1072 - angleStarter) / 0.0512) - 1; 
086F:  MOVF   2A,W
0870:  MOVWF  40
0871:  MOVF   29,W
0872:  MOVWF  3F
0873:  MOVF   28,W
0874:  MOVWF  3E
0875:  MOVF   27,W
0876:  MOVWF  3D
0877:  BCF    0A.3
0878:  CALL   1A6
0879:  BSF    0A.3
087A:  BSF    03.1
087B:  MOVLW  17
087C:  MOVWF  57
087D:  MOVLW  B7
087E:  MOVWF  56
087F:  MOVLW  51
0880:  MOVWF  55
0881:  MOVLW  82
0882:  MOVWF  54
0883:  MOVF   7A,W
0884:  MOVWF  5B
0885:  MOVF   79,W
0886:  MOVWF  5A
0887:  MOVF   78,W
0888:  MOVWF  59
0889:  MOVF   77,W
088A:  MOVWF  58
088B:  BCF    0A.3
088C:  CALL   1C1
088D:  BSF    0A.3
088E:  MOVF   7A,W
088F:  MOVWF  40
0890:  MOVF   79,W
0891:  MOVWF  3F
0892:  MOVF   78,W
0893:  MOVWF  3E
0894:  MOVF   77,W
0895:  MOVWF  3D
0896:  MOVF   40,W
0897:  MOVWF  44
0898:  MOVF   3F,W
0899:  MOVWF  43
089A:  MOVF   3E,W
089B:  MOVWF  42
089C:  MOVF   3D,W
089D:  MOVWF  41
089E:  MOVLW  17
089F:  MOVWF  48
08A0:  MOVLW  B7
08A1:  MOVWF  47
08A2:  MOVLW  51
08A3:  MOVWF  46
08A4:  MOVLW  7A
08A5:  MOVWF  45
08A6:  BCF    0A.3
08A7:  CALL   302
08A8:  BSF    0A.3
08A9:  MOVF   7A,W
08AA:  MOVWF  40
08AB:  MOVF   79,W
08AC:  MOVWF  3F
08AD:  MOVF   78,W
08AE:  MOVWF  3E
08AF:  MOVF   77,W
08B0:  MOVWF  3D
08B1:  MOVF   40,W
08B2:  MOVWF  44
08B3:  MOVF   3F,W
08B4:  MOVWF  43
08B5:  MOVF   3E,W
08B6:  MOVWF  42
08B7:  MOVF   3D,W
08B8:  MOVWF  41
08B9:  BCF    0A.3
08BA:  CALL   4BC
08BB:  BSF    0A.3
08BC:  MOVF   7A,W
08BD:  MOVWF  40
08BE:  MOVF   79,W
08BF:  MOVWF  3F
08C0:  MOVF   78,W
08C1:  MOVWF  3E
08C2:  MOVF   77,W
08C3:  MOVWF  3D
08C4:  BCF    0A.3
08C5:  CALL   62F
08C6:  BSF    0A.3
08C7:  MOVF   7A,W
08C8:  MOVWF  40
08C9:  MOVF   79,W
08CA:  MOVWF  3F
08CB:  MOVF   78,W
08CC:  MOVWF  3E
08CD:  MOVF   77,W
08CE:  MOVWF  3D
08CF:  MOVLW  01
08D0:  SUBWF  3D,W
08D1:  MOVWF  2F
08D2:  MOVF   3E,W
08D3:  MOVWF  30
08D4:  MOVLW  00
08D5:  BTFSS  03.0
08D6:  MOVLW  01
08D7:  SUBWF  30,F
08D8:  MOVF   3F,W
08D9:  MOVWF  31
08DA:  MOVLW  00
08DB:  BTFSS  03.0
08DC:  MOVLW  01
08DD:  SUBWF  31,F
08DE:  MOVF   40,W
08DF:  MOVWF  32
08E0:  MOVLW  00
08E1:  BTFSS  03.0
08E2:  MOVLW  01
08E3:  SUBWF  32,F
....................    valTimer0SetRingTheBell = (int32)FLOOR((13.1072 - angleRingTheBell) / 0.0512) - 1; 
08E4:  MOVF   2E,W
08E5:  MOVWF  40
08E6:  MOVF   2D,W
08E7:  MOVWF  3F
08E8:  MOVF   2C,W
08E9:  MOVWF  3E
08EA:  MOVF   2B,W
08EB:  MOVWF  3D
08EC:  BCF    0A.3
08ED:  CALL   1A6
08EE:  BSF    0A.3
08EF:  BSF    03.1
08F0:  MOVLW  17
08F1:  MOVWF  57
08F2:  MOVLW  B7
08F3:  MOVWF  56
08F4:  MOVLW  51
08F5:  MOVWF  55
08F6:  MOVLW  82
08F7:  MOVWF  54
08F8:  MOVF   7A,W
08F9:  MOVWF  5B
08FA:  MOVF   79,W
08FB:  MOVWF  5A
08FC:  MOVF   78,W
08FD:  MOVWF  59
08FE:  MOVF   77,W
08FF:  MOVWF  58
0900:  BCF    0A.3
0901:  CALL   1C1
0902:  BSF    0A.3
0903:  MOVF   7A,W
0904:  MOVWF  40
0905:  MOVF   79,W
0906:  MOVWF  3F
0907:  MOVF   78,W
0908:  MOVWF  3E
0909:  MOVF   77,W
090A:  MOVWF  3D
090B:  MOVF   40,W
090C:  MOVWF  44
090D:  MOVF   3F,W
090E:  MOVWF  43
090F:  MOVF   3E,W
0910:  MOVWF  42
0911:  MOVF   3D,W
0912:  MOVWF  41
0913:  MOVLW  17
0914:  MOVWF  48
0915:  MOVLW  B7
0916:  MOVWF  47
0917:  MOVLW  51
0918:  MOVWF  46
0919:  MOVLW  7A
091A:  MOVWF  45
091B:  BCF    0A.3
091C:  CALL   302
091D:  BSF    0A.3
091E:  MOVF   7A,W
091F:  MOVWF  40
0920:  MOVF   79,W
0921:  MOVWF  3F
0922:  MOVF   78,W
0923:  MOVWF  3E
0924:  MOVF   77,W
0925:  MOVWF  3D
0926:  MOVF   40,W
0927:  MOVWF  44
0928:  MOVF   3F,W
0929:  MOVWF  43
092A:  MOVF   3E,W
092B:  MOVWF  42
092C:  MOVF   3D,W
092D:  MOVWF  41
092E:  BCF    0A.3
092F:  CALL   4BC
0930:  BSF    0A.3
0931:  MOVF   7A,W
0932:  MOVWF  40
0933:  MOVF   79,W
0934:  MOVWF  3F
0935:  MOVF   78,W
0936:  MOVWF  3E
0937:  MOVF   77,W
0938:  MOVWF  3D
0939:  BCF    0A.3
093A:  CALL   62F
093B:  BSF    0A.3
093C:  MOVF   7A,W
093D:  MOVWF  40
093E:  MOVF   79,W
093F:  MOVWF  3F
0940:  MOVF   78,W
0941:  MOVWF  3E
0942:  MOVF   77,W
0943:  MOVWF  3D
0944:  MOVLW  01
0945:  SUBWF  3D,W
0946:  MOVWF  33
0947:  MOVF   3E,W
0948:  MOVWF  34
0949:  MOVLW  00
094A:  BTFSS  03.0
094B:  MOVLW  01
094C:  SUBWF  34,F
094D:  MOVF   3F,W
094E:  MOVWF  35
094F:  MOVLW  00
0950:  BTFSS  03.0
0951:  MOVLW  01
0952:  SUBWF  35,F
0953:  MOVF   40,W
0954:  MOVWF  36
0955:  MOVLW  00
0956:  BTFSS  03.0
0957:  MOVLW  01
0958:  SUBWF  36,F
....................  
....................    output_low(ledSAFETY);   // CLEAR reset pin 
0959:  BSF    03.5
095A:  BCF    08.2
095B:  BCF    03.5
095C:  BCF    08.2
....................    output_low(ledSTARTING); // CLEAR reset pin 
095D:  BSF    03.5
095E:  BCF    08.3
095F:  BCF    03.5
0960:  BCF    08.3
....................    output_low(ledRINGING);  // CLEAR reset pin 
0961:  BCF    3C.5
0962:  MOVF   3C,W
0963:  BSF    03.5
0964:  MOVWF  07
0965:  BCF    03.5
0966:  BCF    07.5
....................  
....................    clear_interrupt(INT_EXT); 
0967:  BCF    0B.1
....................    enable_interrupts(INT_EXT); 
0968:  BSF    0B.4
....................    ext_int_edge(H_TO_L); 
0969:  BSF    03.5
096A:  BCF    01.6
....................  
....................    setup_timer_0(RTCC_INTERNAL | RTCC_DIV_256); // 51.2us 
096B:  MOVF   01,W
096C:  ANDLW  C0
096D:  IORLW  07
096E:  MOVWF  01
....................    enable_interrupts(INT_TIMER0); 
096F:  BCF    03.5
0970:  BSF    0B.5
....................  
....................    setup_ccp1(CCP_CAPTURE_FE); 
0971:  BSF    3C.2
0972:  MOVF   3C,W
0973:  BSF    03.5
0974:  MOVWF  07
0975:  BCF    03.5
0976:  CLRF   17
0977:  MOVLW  04
0978:  MOVWF  17
0979:  BSF    03.5
097A:  CLRF   1B
097B:  CLRF   1C
097C:  MOVLW  01
097D:  MOVWF  1D
....................    setup_timer_1(T1_INTERNAL); 
097E:  MOVLW  05
097F:  BCF    03.5
0980:  MOVWF  10
....................    enable_interrupts(INT_CCP1); 
0981:  BSF    03.5
0982:  BSF    0C.2
....................  
....................    setup_timer_2(T2_DIV_BY_16, 255, 16); // Overflow every 13.056us 
0983:  MOVLW  78
0984:  MOVWF  78
0985:  IORLW  06
0986:  BCF    03.5
0987:  MOVWF  12
0988:  MOVLW  FF
0989:  BSF    03.5
098A:  MOVWF  12
....................    set_timer2(0); 
098B:  BCF    03.5
098C:  CLRF   11
....................    // iTimer2OverFlow = 50; // 100ms every command 
....................    // iTimer2OverFlow = 7660; // 100ms every command 
....................  
....................    // setup_comparator(A0_VR_A1_VR); 
....................    // setup_vref(VREF_HIGH | 5); 
....................    // enable_interrupts(INT_COMP); 
....................  
....................    enable_interrupts(GLOBAL); 
098D:  MOVLW  C0
098E:  IORWF  0B,F
....................  
....................    output_high(ledSAFETY); 
098F:  BSF    03.5
0990:  BCF    08.2
0991:  BCF    03.5
0992:  BSF    08.2
....................    checkSafetyFirst(1500000); // ~~ 6 seconds 
0993:  CLRF   40
0994:  MOVLW  16
0995:  MOVWF  3F
0996:  MOVLW  E3
0997:  MOVWF  3E
0998:  MOVLW  60
0999:  MOVWF  3D
099A:  BCF    0A.3
099B:  GOTO   64E
099C:  BSF    0A.3
....................    output_low(ledSAFETY); 
099D:  BSF    03.5
099E:  BCF    08.2
099F:  BCF    03.5
09A0:  BCF    08.2
....................  
....................    output_high(ledSTARTING); 
09A1:  BSF    03.5
09A2:  BCF    08.3
09A3:  BCF    03.5
09A4:  BSF    08.3
....................    starter(); 
09A5:  BCF    0A.3
09A6:  GOTO   6C3
09A7:  BSF    0A.3
....................    output_low(ledSTARTING); 
09A8:  BSF    03.5
09A9:  BCF    08.3
09AA:  BCF    03.5
09AB:  BCF    08.3
....................  
....................    output_high(ledRINGING); 
09AC:  BCF    3C.5
09AD:  MOVF   3C,W
09AE:  BSF    03.5
09AF:  MOVWF  07
09B0:  BCF    03.5
09B1:  BSF    07.5
....................    while (TRUE) 
....................    { 
....................       RingTheBell(); 
09B2:  BCF    0A.3
09B3:  GOTO   76B
09B4:  BSF    0A.3
09B5:  GOTO   1B2
....................    } 
.................... } 
09B6:  SLEEP

Configuration Fuses:
   Word  1: 2CE2   HS NOWDT PUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
