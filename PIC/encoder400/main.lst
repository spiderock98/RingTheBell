CCS PCM C Compiler, Version 5.025, 47277               16-Apr-20 11:32

               Filename:   D:\Desktop\RingTheBell\PIC\encoder400\main.lst

               ROM used:   2120 words (26%)
                           Largest free fragment is 2048
               RAM used:   40 (11%) at main() level
                           82 (22%) worst case
               Stack used: 3 locations (2 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  08
0001:  MOVWF  0A
0002:  GOTO   000
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.4
0018:  GOTO   01B
0019:  BTFSC  0B.1
001A:  GOTO   042
001B:  MOVLW  8C
001C:  MOVWF  04
001D:  BTFSS  00.1
001E:  GOTO   021
001F:  BTFSC  0C.1
0020:  GOTO   045
0021:  MOVLW  8C
0022:  MOVWF  04
0023:  BTFSS  00.2
0024:  GOTO   027
0025:  BTFSC  0C.2
0026:  GOTO   048
0027:  BTFSS  0B.5
0028:  GOTO   02B
0029:  BTFSC  0B.2
002A:  GOTO   04B
002B:  MOVLW  8D
002C:  MOVWF  04
002D:  BTFSS  00.6
002E:  GOTO   031
002F:  BTFSC  0D.6
0030:  GOTO   04E
0031:  MOVF   22,W
0032:  MOVWF  04
0033:  MOVF   23,W
0034:  MOVWF  77
0035:  MOVF   24,W
0036:  MOVWF  78
0037:  MOVF   25,W
0038:  MOVWF  79
0039:  MOVF   26,W
003A:  MOVWF  7A
003B:  MOVF   20,W
003C:  MOVWF  0A
003D:  SWAPF  21,W
003E:  MOVWF  03
003F:  SWAPF  7F,F
0040:  SWAPF  7F,W
0041:  RETFIE
0042:  BCF    0A.3
0043:  BCF    0A.4
0044:  GOTO   05F
0045:  BCF    0A.3
0046:  BCF    0A.4
0047:  GOTO   093
0048:  BCF    0A.3
0049:  BCF    0A.4
004A:  GOTO   0CB
004B:  BCF    0A.3
004C:  BCF    0A.4
004D:  GOTO   079
004E:  BCF    0A.3
004F:  BCF    0A.4
0050:  GOTO   051
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
*
00D9:  MOVLW  8E
00DA:  MOVWF  77
00DB:  MOVF   5D,W
00DC:  MOVWF  78
00DD:  MOVF   5C,W
00DE:  MOVWF  79
00DF:  CLRF   7A
00E0:  MOVF   78,F
00E1:  BTFSS  03.2
00E2:  GOTO   0ED
00E3:  MOVF   79,W
00E4:  MOVWF  78
00E5:  CLRF   79
00E6:  MOVLW  08
00E7:  SUBWF  77,F
00E8:  MOVF   78,F
00E9:  BTFSS  03.2
00EA:  GOTO   0ED
00EB:  CLRF   77
00EC:  GOTO   0F5
00ED:  BCF    03.0
00EE:  BTFSC  78.7
00EF:  GOTO   0F4
00F0:  RLF    79,F
00F1:  RLF    78,F
00F2:  DECF   77,F
00F3:  GOTO   0ED
00F4:  BCF    78.7
00F5:  RETURN
00F6:  MOVLW  80
00F7:  BTFSC  03.1
00F8:  XORWF  61,F
00F9:  CLRF   66
00FA:  CLRF   67
00FB:  MOVF   5D,W
00FC:  MOVWF  65
00FD:  MOVF   61,W
00FE:  XORWF  65,F
00FF:  MOVF   5C,W
0100:  BTFSC  03.2
0101:  GOTO   1E6
0102:  MOVWF  64
0103:  MOVWF  77
0104:  MOVF   60,W
0105:  BTFSC  03.2
0106:  GOTO   1EF
0107:  SUBWF  64,F
0108:  BTFSC  03.2
0109:  GOTO   18B
010A:  BTFSS  03.0
010B:  GOTO   149
010C:  MOVF   61,W
010D:  MOVWF  6A
010E:  BSF    6A.7
010F:  MOVF   62,W
0110:  MOVWF  69
0111:  MOVF   63,W
0112:  MOVWF  68
0113:  CLRF   67
0114:  BCF    03.0
0115:  RRF    6A,F
0116:  RRF    69,F
0117:  RRF    68,F
0118:  RRF    67,F
0119:  DECFSZ 64,F
011A:  GOTO   113
011B:  BTFSS  65.7
011C:  GOTO   120
011D:  BSF    66.0
011E:  GOTO   203
011F:  BCF    66.0
0120:  BCF    64.0
0121:  BSF    66.4
0122:  MOVLW  5F
0123:  MOVWF  04
0124:  BCF    03.7
0125:  GOTO   218
0126:  BCF    66.4
0127:  BTFSC  65.7
0128:  GOTO   133
0129:  BTFSS  64.0
012A:  GOTO   13E
012B:  RRF    6A,F
012C:  RRF    69,F
012D:  RRF    68,F
012E:  RRF    67,F
012F:  INCF   77,F
0130:  BTFSC  03.2
0131:  GOTO   1FE
0132:  GOTO   13E
0133:  BTFSC  6A.7
0134:  GOTO   141
0135:  BCF    03.0
0136:  RLF    67,F
0137:  RLF    68,F
0138:  RLF    69,F
0139:  RLF    6A,F
013A:  DECF   77,F
013B:  BTFSC  03.2
013C:  GOTO   1FE
013D:  GOTO   133
013E:  BSF    66.6
013F:  GOTO   1AB
0140:  BCF    66.6
0141:  MOVF   5D,W
0142:  MOVWF  65
0143:  BTFSS  65.7
0144:  GOTO   147
0145:  BSF    6A.7
0146:  GOTO   1F7
0147:  BCF    6A.7
0148:  GOTO   1F7
0149:  MOVF   60,W
014A:  MOVWF  64
014B:  MOVWF  77
014C:  MOVF   5C,W
014D:  SUBWF  64,F
014E:  MOVF   5D,W
014F:  MOVWF  6A
0150:  BSF    6A.7
0151:  MOVF   5E,W
0152:  MOVWF  69
0153:  MOVF   5F,W
0154:  MOVWF  68
0155:  CLRF   67
0156:  BCF    03.0
0157:  RRF    6A,F
0158:  RRF    69,F
0159:  RRF    68,F
015A:  RRF    67,F
015B:  DECFSZ 64,F
015C:  GOTO   155
015D:  BTFSS  65.7
015E:  GOTO   162
015F:  BSF    66.1
0160:  GOTO   203
0161:  BCF    66.1
0162:  BCF    64.0
0163:  BSF    66.5
0164:  MOVLW  63
0165:  MOVWF  04
0166:  BCF    03.7
0167:  GOTO   218
0168:  BCF    66.5
0169:  BTFSC  65.7
016A:  GOTO   175
016B:  BTFSS  64.0
016C:  GOTO   180
016D:  RRF    6A,F
016E:  RRF    69,F
016F:  RRF    68,F
0170:  RRF    67,F
0171:  INCF   77,F
0172:  BTFSC  03.2
0173:  GOTO   1FE
0174:  GOTO   180
0175:  BTFSC  6A.7
0176:  GOTO   183
0177:  BCF    03.0
0178:  RLF    67,F
0179:  RLF    68,F
017A:  RLF    69,F
017B:  RLF    6A,F
017C:  DECF   77,F
017D:  BTFSC  03.2
017E:  GOTO   1FE
017F:  GOTO   175
0180:  BSF    66.7
0181:  GOTO   1AB
0182:  BCF    66.7
0183:  MOVF   61,W
0184:  MOVWF  65
0185:  BTFSS  65.7
0186:  GOTO   189
0187:  BSF    6A.7
0188:  GOTO   1F7
0189:  BCF    6A.7
018A:  GOTO   1F7
018B:  MOVF   61,W
018C:  MOVWF  6A
018D:  BSF    6A.7
018E:  MOVF   62,W
018F:  MOVWF  69
0190:  MOVF   63,W
0191:  MOVWF  68
0192:  BTFSS  65.7
0193:  GOTO   198
0194:  BCF    6A.7
0195:  BSF    66.2
0196:  GOTO   203
0197:  BCF    66.2
0198:  CLRF   67
0199:  BCF    64.0
019A:  MOVLW  5F
019B:  MOVWF  04
019C:  BCF    03.7
019D:  GOTO   218
019E:  BTFSC  65.7
019F:  GOTO   1C1
01A0:  MOVF   5D,W
01A1:  MOVWF  65
01A2:  BTFSS  64.0
01A3:  GOTO   1AB
01A4:  RRF    6A,F
01A5:  RRF    69,F
01A6:  RRF    68,F
01A7:  RRF    67,F
01A8:  INCF   77,F
01A9:  BTFSC  03.2
01AA:  GOTO   1FE
01AB:  BTFSS  67.7
01AC:  GOTO   1BC
01AD:  INCF   68,F
01AE:  BTFSS  03.2
01AF:  GOTO   1BC
01B0:  INCF   69,F
01B1:  BTFSS  03.2
01B2:  GOTO   1BC
01B3:  INCF   6A,F
01B4:  BTFSS  03.2
01B5:  GOTO   1BC
01B6:  RRF    6A,F
01B7:  RRF    69,F
01B8:  RRF    68,F
01B9:  INCF   77,F
01BA:  BTFSC  03.2
01BB:  GOTO   1FE
01BC:  BTFSC  66.6
01BD:  GOTO   140
01BE:  BTFSC  66.7
01BF:  GOTO   182
01C0:  GOTO   1E0
01C1:  MOVLW  80
01C2:  XORWF  6A,F
01C3:  BTFSS  6A.7
01C4:  GOTO   1C9
01C5:  GOTO   203
01C6:  MOVF   61,W
01C7:  MOVWF  65
01C8:  GOTO   1D6
01C9:  MOVF   5D,W
01CA:  MOVWF  65
01CB:  MOVF   6A,F
01CC:  BTFSS  03.2
01CD:  GOTO   1D6
01CE:  MOVF   69,F
01CF:  BTFSS  03.2
01D0:  GOTO   1D6
01D1:  MOVF   68,F
01D2:  BTFSS  03.2
01D3:  GOTO   1D6
01D4:  CLRF   77
01D5:  GOTO   1F7
01D6:  BTFSC  6A.7
01D7:  GOTO   1E0
01D8:  BCF    03.0
01D9:  RLF    67,F
01DA:  RLF    68,F
01DB:  RLF    69,F
01DC:  RLF    6A,F
01DD:  DECFSZ 77,F
01DE:  GOTO   1D6
01DF:  GOTO   1FE
01E0:  BTFSS  65.7
01E1:  GOTO   1E4
01E2:  BSF    6A.7
01E3:  GOTO   1F7
01E4:  BCF    6A.7
01E5:  GOTO   1F7
01E6:  MOVF   60,W
01E7:  MOVWF  77
01E8:  MOVF   61,W
01E9:  MOVWF  6A
01EA:  MOVF   62,W
01EB:  MOVWF  69
01EC:  MOVF   63,W
01ED:  MOVWF  68
01EE:  GOTO   1F7
01EF:  MOVF   5C,W
01F0:  MOVWF  77
01F1:  MOVF   5D,W
01F2:  MOVWF  6A
01F3:  MOVF   5E,W
01F4:  MOVWF  69
01F5:  MOVF   5F,W
01F6:  MOVWF  68
01F7:  MOVF   6A,W
01F8:  MOVWF  78
01F9:  MOVF   69,W
01FA:  MOVWF  79
01FB:  MOVF   68,W
01FC:  MOVWF  7A
01FD:  GOTO   236
01FE:  CLRF   77
01FF:  CLRF   78
0200:  CLRF   79
0201:  CLRF   7A
0202:  GOTO   236
0203:  CLRF   67
0204:  COMF   68,F
0205:  COMF   69,F
0206:  COMF   6A,F
0207:  COMF   67,F
0208:  INCF   67,F
0209:  BTFSS  03.2
020A:  GOTO   211
020B:  INCF   68,F
020C:  BTFSS  03.2
020D:  GOTO   211
020E:  INCF   69,F
020F:  BTFSC  03.2
0210:  INCF   6A,F
0211:  BTFSC  66.0
0212:  GOTO   11F
0213:  BTFSC  66.1
0214:  GOTO   161
0215:  BTFSC  66.2
0216:  GOTO   197
0217:  GOTO   1C6
0218:  MOVF   00,W
0219:  ADDWF  68,F
021A:  BTFSS  03.0
021B:  GOTO   222
021C:  INCF   69,F
021D:  BTFSS  03.2
021E:  GOTO   222
021F:  INCF   6A,F
0220:  BTFSC  03.2
0221:  BSF    64.0
0222:  DECF   04,F
0223:  MOVF   00,W
0224:  ADDWF  69,F
0225:  BTFSS  03.0
0226:  GOTO   22A
0227:  INCF   6A,F
0228:  BTFSC  03.2
0229:  BSF    64.0
022A:  DECF   04,F
022B:  MOVF   00,W
022C:  BTFSS  00.7
022D:  XORLW  80
022E:  ADDWF  6A,F
022F:  BTFSC  03.0
0230:  BSF    64.0
0231:  BTFSC  66.4
0232:  GOTO   126
0233:  BTFSC  66.5
0234:  GOTO   168
0235:  GOTO   19E
0236:  RETURN
0237:  MOVF   49,W
0238:  BTFSC  03.2
0239:  GOTO   2FC
023A:  MOVWF  55
023B:  MOVF   4D,W
023C:  BTFSC  03.2
023D:  GOTO   2FC
023E:  SUBWF  55,F
023F:  BTFSS  03.0
0240:  GOTO   246
0241:  MOVLW  7F
0242:  ADDWF  55,F
0243:  BTFSC  03.0
0244:  GOTO   2FC
0245:  GOTO   24C
0246:  MOVLW  81
0247:  SUBWF  55,F
0248:  BTFSS  03.0
0249:  GOTO   2FC
024A:  BTFSC  03.2
024B:  GOTO   2FC
024C:  MOVF   55,W
024D:  MOVWF  77
024E:  CLRF   78
024F:  CLRF   79
0250:  CLRF   7A
0251:  CLRF   54
0252:  MOVF   4A,W
0253:  MOVWF  53
0254:  BSF    53.7
0255:  MOVF   4B,W
0256:  MOVWF  52
0257:  MOVF   4C,W
0258:  MOVWF  51
0259:  MOVLW  19
025A:  MOVWF  55
025B:  MOVF   50,W
025C:  SUBWF  51,F
025D:  BTFSC  03.0
025E:  GOTO   26F
025F:  MOVLW  01
0260:  SUBWF  52,F
0261:  BTFSC  03.0
0262:  GOTO   26F
0263:  SUBWF  53,F
0264:  BTFSC  03.0
0265:  GOTO   26F
0266:  SUBWF  54,F
0267:  BTFSC  03.0
0268:  GOTO   26F
0269:  INCF   54,F
026A:  INCF   53,F
026B:  INCF   52,F
026C:  MOVF   50,W
026D:  ADDWF  51,F
026E:  GOTO   2A1
026F:  MOVF   4F,W
0270:  SUBWF  52,F
0271:  BTFSC  03.0
0272:  GOTO   28A
0273:  MOVLW  01
0274:  SUBWF  53,F
0275:  BTFSC  03.0
0276:  GOTO   28A
0277:  SUBWF  54,F
0278:  BTFSC  03.0
0279:  GOTO   28A
027A:  INCF   54,F
027B:  INCF   53,F
027C:  MOVF   4F,W
027D:  ADDWF  52,F
027E:  MOVF   50,W
027F:  ADDWF  51,F
0280:  BTFSS  03.0
0281:  GOTO   2A1
0282:  INCF   52,F
0283:  BTFSS  03.2
0284:  GOTO   2A1
0285:  INCF   53,F
0286:  BTFSS  03.2
0287:  GOTO   2A1
0288:  INCF   54,F
0289:  GOTO   2A1
028A:  MOVF   4E,W
028B:  IORLW  80
028C:  SUBWF  53,F
028D:  BTFSC  03.0
028E:  GOTO   2A0
028F:  MOVLW  01
0290:  SUBWF  54,F
0291:  BTFSC  03.0
0292:  GOTO   2A0
0293:  INCF   54,F
0294:  MOVF   4E,W
0295:  IORLW  80
0296:  ADDWF  53,F
0297:  MOVF   4F,W
0298:  ADDWF  52,F
0299:  BTFSS  03.0
029A:  GOTO   27E
029B:  INCF   53,F
029C:  BTFSS  03.2
029D:  GOTO   27E
029E:  INCF   54,F
029F:  GOTO   27E
02A0:  BSF    7A.0
02A1:  DECFSZ 55,F
02A2:  GOTO   2A4
02A3:  GOTO   2AF
02A4:  BCF    03.0
02A5:  RLF    51,F
02A6:  RLF    52,F
02A7:  RLF    53,F
02A8:  RLF    54,F
02A9:  BCF    03.0
02AA:  RLF    7A,F
02AB:  RLF    79,F
02AC:  RLF    78,F
02AD:  RLF    56,F
02AE:  GOTO   25B
02AF:  BTFSS  56.0
02B0:  GOTO   2B7
02B1:  BCF    03.0
02B2:  RRF    78,F
02B3:  RRF    79,F
02B4:  RRF    7A,F
02B5:  RRF    56,F
02B6:  GOTO   2BA
02B7:  DECF   77,F
02B8:  BTFSC  03.2
02B9:  GOTO   2FC
02BA:  BTFSC  56.7
02BB:  GOTO   2E3
02BC:  BCF    03.0
02BD:  RLF    51,F
02BE:  RLF    52,F
02BF:  RLF    53,F
02C0:  RLF    54,F
02C1:  MOVF   50,W
02C2:  SUBWF  51,F
02C3:  BTFSC  03.0
02C4:  GOTO   2CF
02C5:  MOVLW  01
02C6:  SUBWF  52,F
02C7:  BTFSC  03.0
02C8:  GOTO   2CF
02C9:  SUBWF  53,F
02CA:  BTFSC  03.0
02CB:  GOTO   2CF
02CC:  SUBWF  54,F
02CD:  BTFSS  03.0
02CE:  GOTO   2F2
02CF:  MOVF   4F,W
02D0:  SUBWF  52,F
02D1:  BTFSC  03.0
02D2:  GOTO   2DA
02D3:  MOVLW  01
02D4:  SUBWF  53,F
02D5:  BTFSC  03.0
02D6:  GOTO   2DA
02D7:  SUBWF  54,F
02D8:  BTFSS  03.0
02D9:  GOTO   2F2
02DA:  MOVF   4E,W
02DB:  IORLW  80
02DC:  SUBWF  53,F
02DD:  BTFSC  03.0
02DE:  GOTO   2E3
02DF:  MOVLW  01
02E0:  SUBWF  54,F
02E1:  BTFSS  03.0
02E2:  GOTO   2F2
02E3:  INCF   7A,F
02E4:  BTFSS  03.2
02E5:  GOTO   2F2
02E6:  INCF   79,F
02E7:  BTFSS  03.2
02E8:  GOTO   2F2
02E9:  INCF   78,F
02EA:  BTFSS  03.2
02EB:  GOTO   2F2
02EC:  INCF   77,F
02ED:  BTFSC  03.2
02EE:  GOTO   2FC
02EF:  RRF    78,F
02F0:  RRF    79,F
02F1:  RRF    7A,F
02F2:  MOVF   4A,W
02F3:  MOVWF  55
02F4:  MOVF   4E,W
02F5:  XORWF  55,F
02F6:  BTFSS  55.7
02F7:  GOTO   2FA
02F8:  BSF    78.7
02F9:  GOTO   300
02FA:  BCF    78.7
02FB:  GOTO   300
02FC:  CLRF   77
02FD:  CLRF   78
02FE:  CLRF   79
02FF:  CLRF   7A
0300:  RETURN
0301:  MOVF   59,W
0302:  MOVWF  60
0303:  MOVF   5D,W
0304:  XORWF  60,F
0305:  BTFSS  60.7
0306:  GOTO   30C
0307:  BCF    03.2
0308:  BCF    03.0
0309:  BTFSC  59.7
030A:  BSF    03.0
030B:  GOTO   33F
030C:  MOVF   59,W
030D:  MOVWF  60
030E:  MOVF   5C,W
030F:  MOVWF  61
0310:  MOVF   58,W
0311:  SUBWF  61,F
0312:  BTFSC  03.2
0313:  GOTO   31A
0314:  BTFSS  60.7
0315:  GOTO   33F
0316:  MOVF   03,W
0317:  XORLW  01
0318:  MOVWF  03
0319:  GOTO   33F
031A:  MOVF   5D,W
031B:  MOVWF  61
031C:  MOVF   59,W
031D:  SUBWF  61,F
031E:  BTFSC  03.2
031F:  GOTO   326
0320:  BTFSS  60.7
0321:  GOTO   33F
0322:  MOVF   03,W
0323:  XORLW  01
0324:  MOVWF  03
0325:  GOTO   33F
0326:  MOVF   5E,W
0327:  MOVWF  61
0328:  MOVF   5A,W
0329:  SUBWF  61,F
032A:  BTFSC  03.2
032B:  GOTO   332
032C:  BTFSS  60.7
032D:  GOTO   33F
032E:  MOVF   03,W
032F:  XORLW  01
0330:  MOVWF  03
0331:  GOTO   33F
0332:  MOVF   5F,W
0333:  MOVWF  61
0334:  MOVF   5B,W
0335:  SUBWF  61,F
0336:  BTFSC  03.2
0337:  GOTO   33E
0338:  BTFSS  60.7
0339:  GOTO   33F
033A:  MOVF   03,W
033B:  XORLW  01
033C:  MOVWF  03
033D:  GOTO   33F
033E:  BCF    03.0
033F:  RETURN
0340:  MOVLW  8E
0341:  MOVWF  77
0342:  MOVF   58,W
0343:  SUBWF  77,F
0344:  MOVF   59,W
0345:  MOVWF  79
0346:  MOVF   5A,W
0347:  MOVWF  78
0348:  BSF    79.7
0349:  MOVF   77,F
034A:  BTFSC  03.2
034B:  GOTO   357
034C:  BCF    03.0
034D:  MOVF   79,F
034E:  BTFSS  03.2
034F:  GOTO   353
0350:  MOVF   78,F
0351:  BTFSC  03.2
0352:  GOTO   357
0353:  RRF    79,F
0354:  RRF    78,F
0355:  DECFSZ 77,F
0356:  GOTO   34C
0357:  BTFSS  59.7
0358:  GOTO   35E
0359:  COMF   78,F
035A:  COMF   79,F
035B:  INCF   78,F
035C:  BTFSC  03.2
035D:  INCF   79,F
035E:  RETURN
035F:  MOVF   58,W
0360:  BTFSC  03.2
0361:  GOTO   3CF
0362:  MOVWF  60
0363:  MOVF   5C,W
0364:  BTFSC  03.2
0365:  GOTO   3CF
0366:  ADDWF  60,F
0367:  BTFSC  03.0
0368:  GOTO   370
0369:  MOVLW  7F
036A:  SUBWF  60,F
036B:  BTFSS  03.0
036C:  GOTO   3CF
036D:  BTFSC  03.2
036E:  GOTO   3CF
036F:  GOTO   374
0370:  MOVLW  81
0371:  ADDWF  60,F
0372:  BTFSC  03.0
0373:  GOTO   3CF
0374:  MOVF   60,W
0375:  MOVWF  77
0376:  CLRF   78
0377:  CLRF   79
0378:  CLRF   7A
0379:  MOVF   59,W
037A:  MOVWF  64
037B:  BSF    64.7
037C:  MOVF   5A,W
037D:  MOVWF  63
037E:  MOVF   5B,W
037F:  MOVWF  62
0380:  MOVLW  18
0381:  MOVWF  60
0382:  CLRF   61
0383:  BTFSS  62.0
0384:  GOTO   39D
0385:  MOVF   5F,W
0386:  ADDWF  7A,F
0387:  BTFSS  03.0
0388:  GOTO   38F
0389:  INCF   79,F
038A:  BTFSS  03.2
038B:  GOTO   38F
038C:  INCF   78,F
038D:  BTFSC  03.2
038E:  BSF    61.7
038F:  MOVF   5E,W
0390:  ADDWF  79,F
0391:  BTFSS  03.0
0392:  GOTO   396
0393:  INCF   78,F
0394:  BTFSC  03.2
0395:  BSF    61.7
0396:  MOVF   5D,W
0397:  MOVWF  5A
0398:  BSF    5A.7
0399:  MOVF   5A,W
039A:  ADDWF  78,F
039B:  BTFSC  03.0
039C:  BSF    61.7
039D:  RLF    61,F
039E:  RRF    78,F
039F:  RRF    79,F
03A0:  RRF    7A,F
03A1:  RRF    64,F
03A2:  RRF    63,F
03A3:  RRF    62,F
03A4:  BCF    03.0
03A5:  DECFSZ 60,F
03A6:  GOTO   382
03A7:  MOVLW  01
03A8:  ADDWF  77,F
03A9:  BTFSC  03.0
03AA:  GOTO   3CF
03AB:  BTFSC  78.7
03AC:  GOTO   3B4
03AD:  RLF    64,F
03AE:  RLF    7A,F
03AF:  RLF    79,F
03B0:  RLF    78,F
03B1:  DECF   77,F
03B2:  BTFSC  03.2
03B3:  GOTO   3CF
03B4:  BTFSS  64.7
03B5:  GOTO   3C5
03B6:  INCF   7A,F
03B7:  BTFSS  03.2
03B8:  GOTO   3C5
03B9:  INCF   79,F
03BA:  BTFSS  03.2
03BB:  GOTO   3C5
03BC:  INCF   78,F
03BD:  BTFSS  03.2
03BE:  GOTO   3C5
03BF:  RRF    78,F
03C0:  RRF    79,F
03C1:  RRF    7A,F
03C2:  INCF   77,F
03C3:  BTFSC  03.2
03C4:  GOTO   3CF
03C5:  MOVF   59,W
03C6:  MOVWF  61
03C7:  MOVF   5D,W
03C8:  XORWF  61,F
03C9:  BTFSS  61.7
03CA:  GOTO   3CD
03CB:  BSF    78.7
03CC:  GOTO   3D3
03CD:  BCF    78.7
03CE:  GOTO   3D3
03CF:  CLRF   77
03D0:  CLRF   78
03D1:  CLRF   79
03D2:  CLRF   7A
03D3:  RETURN
*
0547:  MOVF   45,W
0548:  SUBLW  B6
0549:  MOVWF  45
054A:  CLRF   7A
054B:  MOVF   46,W
054C:  MOVWF  49
054D:  BSF    46.7
054E:  BCF    03.0
054F:  RRF    46,F
0550:  RRF    47,F
0551:  RRF    48,F
0552:  RRF    7A,F
0553:  RRF    79,F
0554:  RRF    78,F
0555:  RRF    77,F
0556:  DECFSZ 45,F
0557:  GOTO   54E
0558:  BTFSS  49.7
0559:  GOTO   565
055A:  COMF   77,F
055B:  COMF   78,F
055C:  COMF   79,F
055D:  COMF   7A,F
055E:  INCF   77,F
055F:  BTFSC  03.2
0560:  INCF   78,F
0561:  BTFSC  03.2
0562:  INCF   79,F
0563:  BTFSC  03.2
0564:  INCF   7A,F
0565:  RETURN
....................  
.................... #list 
....................  
.................... #include <def_16f877a.h> 
.................... //========================= Register Definitions ========================== 
.................... //-----Register Files------------------------------------------------------ 
.................... #byte INDF = 0x00 
.................... #byte TMR0 = 0x01 
.................... #byte PCL = 0x02 
.................... #byte STATUS = 0x03 
.................... #byte FSR = 0x04 
.................... #byte PORTA = 0x05 
.................... #byte PORTB = 0x06 
.................... #byte PORTC = 0x07 
.................... #byte PORTD = 0x08 
.................... #byte PORTE = 0x09 
.................... #byte PCLATH = 0x0A 
.................... #byte INTCON = 0x0B 
.................... #byte PIR1 = 0x0C 
.................... #byte PIR2 = 0x0D 
.................... #byte TMR1L = 0x0E 
.................... #byte TMR1H = 0x0F 
.................... #byte T1CON = 0x10 
.................... #byte TMR2 = 0x11 
.................... #byte T2CON = 0x12 
.................... #byte SSPBUF = 0x13 
.................... #byte SSPCON = 0x14 
.................... #byte CCPR1L = 0x15 
.................... #byte CCPR1H = 0x16 
.................... #byte CCP1CON = 0x17 
.................... #byte RCSTA = 0x18 
.................... #byte TXREG = 0x19 
.................... #byte RCREG = 0x1A 
.................... #byte CCPR2L = 0x1B 
.................... #byte CCPR2H = 0x1C 
.................... #byte CCP2CON = 0x1D 
.................... #byte ADRESH = 0x1E 
.................... #byte ADCON0 = 0x1F 
.................... #byte OPTION_REG = 0x81 
.................... //-------------- TRIS PORT ----------------------------- 
.................... #byte TRISA = 0x85 
.................... #byte TRISB = 0x86 
.................... #byte TRISC = 0x87 
.................... #byte TRISD = 0x88 
.................... #byte TRISE = 0x89 
.................... #byte PIE1 = 0x8C 
.................... #byte PIE2 = 0x8D 
.................... #byte PCON = 0x8E 
....................  
.................... #byte SSPCON2 = 0x91 
.................... #byte PR2 = 0x92 
.................... #byte SSPADD = 0x93 
.................... #byte SSPSTAT = 0x94 
....................  
.................... #byte TXSTA = 0x98 
.................... #byte SPBRG = 0x99 
....................  
.................... #byte ADRESL = 0x9E 
.................... #byte ADCON1 = 0x9F 
....................  
.................... /*	bank 2 registers */ 
....................  
.................... #byte EEDATA = 0x010C 
.................... #byte EEADR = 0x010D 
.................... #byte EEDATH = 0x010E 
.................... #byte EEADRH = 0x010F 
....................  
.................... /*	bank 3 registers */ 
....................  
.................... #byte EECON1 = 0x018C 
.................... #byte EECON2 = 0x018D 
....................  
.................... //----- STATUS Bits -------------------------------------------------------- 
....................  
.................... // For Assembly Language - Note upper case 
.................... #define IRP 7 
.................... #define RP1 6 
.................... #define RP0 5 
.................... #define NOT_TO 4 
.................... #define NOT_PD 3 
.................... #define Z 2 
.................... #define DC 1 
.................... #define C 0 
....................  
.................... //---------------- TRIS BIT PORT-------------------------------------- 
.................... //------------------TRISA bits--------------------------- 
....................  
.................... #bit TRISA5 = 0x85.5 
.................... #bit TRISA4 = 0x85.4 
.................... #bit TRISA3 = 0x85.3 
.................... #bit TRISA2 = 0x85.2 
.................... #bit TRISA1 = 0x85.1 
.................... #bit TRISA0 = 0x85.0 
....................  
.................... //-----------------TRISB bits----------------------------- 
....................  
.................... #bit TRISB7 = 0x86.7 
.................... #bit TRISB6 = 0x86.6 
.................... #bit TRISB5 = 0x86.5 
.................... #bit TRISB4 = 0x86.4 
.................... #bit TRISB3 = 0x86.3 
.................... #bit TRISB2 = 0x86.2 
.................... #bit TRISB1 = 0x86.1 
.................... #bit TRISB0 = 0x86.0 
....................  
.................... //----------------TRISC bits------------------- 
....................  
.................... #bit TRISC7 = 0x87.7 
.................... #bit TRISC6 = 0x87.6 
.................... #bit TRISC5 = 0x87.5 
.................... #bit TRISC4 = 0x87.4 
.................... #bit TRISC3 = 0x87.3 
.................... #bit TRISC2 = 0x87.2 
.................... #bit TRISC1 = 0x87.1 
.................... #bit TRISC0 = 0x87.0 
.................... //------------------TRISD bit------------------ 
.................... #bit TRISD7 = 0x88.7 
.................... #bit TRISD6 = 0x88.6 
.................... #bit TRISD5 = 0x88.5 
.................... #bit TRISD4 = 0x88.4 
.................... #bit TRISD3 = 0x88.3 
.................... #bit TRISD2 = 0x88.2 
.................... #bit TRISD1 = 0x88.1 
.................... #bit TRISD0 = 0x88.0 
.................... //-------------TRISE bit---------------------- 
.................... #bit TRISE2 = 0x89.2 
.................... #bit TRISE1 = 0x89.1 
.................... #bit TRISE0 = 0x89.0 
.................... //--------------------------------------------------------------------------- 
.................... //---------PORTA bits------------------ 
.................... #bit RA4 = 0x05.4 
.................... #bit RA3 = 0x05.3 
.................... #bit RA2 = 0x05.2 
.................... #bit RA1 = 0x05.1 
.................... #bit RA0 = 0x05.0 
.................... //---------PORTB bits------------------ 
.................... #bit RB7 = 0x06.7 
.................... #bit RB6 = 0x06.6 
.................... #bit RB5 = 0x06.5 
.................... #bit RB4 = 0x06.4 
.................... #bit RB3 = 0x06.3 
.................... #bit RB2 = 0x06.2 
.................... #bit RB1 = 0x06.1 
.................... #bit RB0 = 0x06.0 
.................... //---------PORTC bits------------------ 
.................... #bit RC7 = 0x07.7 
.................... #bit RC6 = 0x07.6 
.................... #bit RC5 = 0x07.5 
.................... #bit RC4 = 0x07.4 
.................... #bit RC3 = 0x07.3 
.................... #bit RC2 = 0x07.2 
.................... #bit RC1 = 0x07.1 
.................... #bit RC0 = 0x07.0 
.................... //---------PORTD bits------------------ 
.................... #bit RD7 = 0x08.7 
.................... #bit RD6 = 0x08.6 
.................... #bit RD5 = 0x08.5 
.................... #bit RD4 = 0x08.4 
.................... #bit RD3 = 0x08.3 
.................... #bit RD2 = 0x08.2 
.................... #bit RD1 = 0x08.1 
.................... #bit RD0 = 0x08.0 
.................... //---------PORTE bits------------------ 
.................... #bit RE2 = 0x09.2 
.................... #bit RE1 = 0x09.1 
.................... #bit RE0 = 0x09.0 
....................  
.................... //----- INTCON ------------------------------------------------------------- 
....................  
.................... #bit GIE = 0x0b.7 
.................... #bit PEIE = 0x0b.6 
.................... #bit TMR0IE = 0x0b.5 
.................... #bit INTE = 0x0b.4 
.................... #bit RBIE = 0x0b.3 
.................... #bit TMR0IF = 0x0b.2 
.................... #bit INTF = 0x0b.1 
.................... #bit RBIF = 0x0b.0 
....................  
.................... //----- PIR1 --------------------------------------------------------------- 
....................  
.................... #bit pspif = 0x0c.7 
.................... #bit adif = 0x0c.6 
.................... #bit rcif = 0x0c.5 
.................... #bit txif = 0x0c.4 
.................... #bit sspif = 0x0c.3 
.................... #bit ccp1if = 0x0c.2 
.................... #bit tmr2if = 0x0c.1 
.................... #bit tmr1if = 0x0c.0 
....................  
.................... //----- PIR2 --------------------------------------------------------------- 
....................  
.................... #bit cmif = 0x0d.6 
.................... #bit eeif = 0x0d.4 
.................... #bit bclif = 0x0d.3 
.................... #bit ccp2if = 0x0d.0 
....................  
.................... //----- PIE1 --------------------------------------------------------------- 
....................  
.................... #bit pspie = 0x8c.7 
.................... #bit adie = 0x8c.6 
.................... #bit rcie = 0x8c.5 
.................... #bit txie = 0x8c.4 
.................... #bit sspie = 0x8c.3 
.................... #bit ccp1ie = 0x8c.2 
.................... #bit tmr2ie = 0x8c.1 
.................... #bit tmr1ie = 0x8c.0 
....................  
.................... //----- PIE2 --------------------------------------------------------------- 
....................  
.................... #bit cmie = 0x8d.6 
.................... #bit eeie = 0x8d.4 
.................... #bit bclie = 0x8d.3 
.................... #bit ccp2ie = 0x8d.0 
.................... //----- T1CON Bits --------------------------------------------------------- 
.................... #bit T1CKPS1 = 0x10.5 
.................... #bit T1CKPS0 = 0x10.4 
.................... #bit T1OSCEN = 0x10.3 
.................... #bit T1SYNC = 0x10.2 
.................... #bit TMR1CS = 0x10.1 
.................... #bit TMR1ON = 0x10.0 
....................  
.................... //----- T2CON Bits --------------------------------------------------------- 
.................... #bit TOUTPS3 = 0x12.6 
.................... #bit TOUTPS2 = 0x12.5 
.................... #bit TOUTPS1 = 0x12.4 
.................... #bit TOUTPS0 = 0x12.3 
.................... #bit TMR2ON = 0x12.2 
.................... #bit T2CKPS1 = 0x12.1 
.................... #bit T2CKPS0 = 0x12.0 
....................  
.................... //-------------SSPCON bits-------------------------- 
.................... #bit WCOL = 0x14.7 
.................... #bit SSPOV = 0x14.6 
.................... #bit SSPEN = 0x14.5 
.................... #bit CKP = 0x14.4 
.................... #bit SSPM3 = 0x14.3 
.................... #bit SSPM2 = 0x14.2 
.................... #bit SSPM1 = 0x14.1 
.................... #bit SSPM0 = 0x14.0 
....................  
.................... //---------------CCP1CON bits-------- 
.................... #bit CCP1X = 0x17.5 
.................... #bit CCP1Y = 0x17.4 
.................... #bit CCP1M3 = 0x17.3 
.................... #bit CCP1M2 = 0x17.2 
.................... #bit CCP1M1 = 0x17.1 
.................... #bit CCP1M0 = 0x17.0 
....................  
.................... //---------------RCSTA bits------------------- 
....................  
.................... #bit SPEN = 0x18.7 
.................... #bit RX9 = 0x18.6 
.................... #bit SREN = 0x18.5 
.................... #bit CREN = 0x18.4 
.................... #bit ADDEN = 0x18.3 
.................... #bit FERR = 0x18.2 
.................... #bit OERR = 0x18.1 
.................... #bit RX9D = 0x18.0 
....................  
.................... //-----------------------CCP2CON bits---------- 
....................  
.................... #bit CCP2X = 0x1D.5 
.................... #bit CCP2Y = 0x1D.4 
.................... #bit CCP2M3 = 0x1D.3 
.................... #bit CCP2M2 = 0x1D.2 
.................... #bit CCP2M1 = 0x1D.1 
.................... #bit CCP2M0 = 0x1D.0 
....................  
.................... //----- ADCON0 Bits -------------------------------------------------------- 
.................... #bit ADCS1 = 0x1F.7 
.................... #bit ADCS0 = 0x1F.6 
.................... #bit CHS2 = 0x1F.5 
.................... #bit CHS1 = 0x1F.4 
.................... #bit CHS0 = 0x1F.3 
.................... #bit ADGO = 0x1F.2 
.................... #bit ADON = 0x1F.0 
....................  
.................... //----- OPTION_reg Bits -------------------------------------------------------- 
....................  
.................... #bit RBPU = 0x81.7 
.................... #bit INTEDG = 0x81.6 
.................... #bit T0CS = 0x81.5 
.................... #bit T0SE = 0x81.4 
.................... #bit PSA = 0x81.3 
.................... #bit PS2 = 0x81.2 
.................... #bit PS1 = 0x81.1 
.................... #bit PS0 = 0x81.0 
.................... //----- PCON Bits ---------------------------------------------------------- 
....................  
.................... #bit POR = 0x8E.1 
.................... #bit BOD = 0x8E.0 
....................  
.................... //-----------SSPCON2 bits--------------------------------------------- 
....................  
.................... #bit GCEN = 0x91.7 
.................... #bit ACKSTAT = 0x91.6 
.................... #bit ACKDT = 0x91.5 
.................... #bit ACKEN = 0x91.4 
.................... #bit RCEN = 0x91.3 
.................... #bit PEN = 0x91.2 
.................... #bit RSEN = 0x91.1 
.................... #bit SEN = 0x91.0 
....................  
.................... //---------------------SSPSTAT bits------------------------ 
....................  
.................... #bit STAT_SMP = 0x94.7 
.................... #bit STAT_CKE = 0x94.6 
.................... #bit STAT_DA = 0x94.5 
.................... #bit STAT_P = 0x94.4 
.................... #bit STAT_S = 0x94.3 
.................... #bit STAT_RW = 0x94.2 
.................... #bit STAT_UA = 0x94.1 
.................... #bit STAT_BF = 0x94.0 
....................  
.................... //----------------TXSTA bits----------------- 
....................  
.................... #bit CSRC = 0x98.7 
.................... #bit TX9 = 0x98.6 
.................... #bit TXEN = 0x98.5 
.................... #bit SYNC = 0x98.4 
.................... #bit BRGH = 0x98.2 
.................... #bit TRMT = 0x98.1 
.................... #bit TX9D = 0x98.0 
....................  
.................... //--------------ADCON1 bits--------------- 
....................  
.................... #bit ADFM = 0x9F.7 
.................... #bit ADCS2 = 0x9F.6 
.................... #bit PCFG3 = 0x9F.3 
.................... #bit PCFG2 = 0x9F.2 
.................... #bit PCFG1 = 0x9F.1 
.................... #bit PCFG0 = 0x9F.0 
....................  
.................... //-----------EECON1 bits---------- 
....................  
.................... #bit EEPGD = 0x018C.7 
.................... #bit WRERR = 0x018C.3 
.................... #bit WREN = 0x018C.2 
.................... #bit WR = 0x018C.1 
.................... #bit RD = 0x018C.0 
....................  
....................  
.................... #device ADC = 16, WRITE_EEPROM=ASYNC 
....................  
.................... #FUSES NOWDT      //No Watch Dog Timer 
.................... #FUSES NOBROWNOUT //No brownout reset 
.................... #FUSES NOLVP      //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal = 20000000) 
0566:  MOVLW  4E
0567:  MOVWF  04
0568:  BCF    03.7
0569:  MOVF   00,W
056A:  BTFSC  03.2
056B:  GOTO   579
056C:  MOVLW  06
056D:  MOVWF  78
056E:  CLRF   77
056F:  DECFSZ 77,F
0570:  GOTO   56F
0571:  DECFSZ 78,F
0572:  GOTO   56E
0573:  MOVLW  7B
0574:  MOVWF  77
0575:  DECFSZ 77,F
0576:  GOTO   575
0577:  DECFSZ 00,F
0578:  GOTO   56C
0579:  RETURN
....................  
.................... #include "def_lcd.c" 
.................... #define RS RC3 
.................... #define RW RC4 
.................... #define E RC5 
.................... #define LCD PORTD 
....................  
.................... // CONST Char gd[4][21] = {"    Thap Chuong     ", 
.................... //                         "                    ", 
.................... //                         "Sensor 1:           ", 
.................... //                         "Sensor 2:           "}; 
.................... char arrNumber[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'}; 
*
0912:  MOVLW  30
0913:  BCF    03.5
0914:  MOVWF  27
0915:  MOVLW  31
0916:  MOVWF  28
0917:  MOVLW  32
0918:  MOVWF  29
0919:  MOVLW  33
091A:  MOVWF  2A
091B:  MOVLW  34
091C:  MOVWF  2B
091D:  MOVLW  35
091E:  MOVWF  2C
091F:  MOVLW  36
0920:  MOVWF  2D
0921:  MOVLW  37
0922:  MOVWF  2E
0923:  MOVLW  38
0924:  MOVWF  2F
0925:  MOVLW  39
0926:  MOVWF  30
....................  
.................... void ghima(int8 data) 
.................... { 
....................   LCD = data; 
....................   RS = 0; 
....................   RW = 0; 
....................   E = 1; 
....................   E = 0; 
....................   delay_us(1500); 
.................... } 
.................... void hienthi(int8 data) 
.................... { 
....................   LCD = data; 
....................   RS = 1; 
....................   RW = 0; 
....................   E = 1; 
....................   E = 0; 
....................   delay_us(1500); 
.................... } 
....................  
.................... void initLCD() 
.................... { 
....................   TRISD = 0; 
....................   TRISC3 = TRISC4 = TRISC5 = 0; 
....................  
....................   ghima(0x38); //giao tiep 8bit, hien thi 2 dong, kich thuoc 5x7 
....................   ghima(0x0C); //bat man hinh 
....................   ghima(0x01); //xoa man hinh 
....................   ghima(0x80); // dua con tro ve du dong 1 
....................  
....................   // int8 i, j; 
....................   // for (i = 0; i < 4; i++) 
....................   //   for (j = 0; j < 20; j++) 
....................   //   { 
....................   //     hienthi(gd[i][j]); 
....................   //     if ((j == 19) && (i == 0)) 
....................   //       ghima(0xc0); 
....................   //     if ((j == 19) && (i == 1)) 
....................   //       ghima(0x94); 
....................   //     if ((j == 19) && (i == 2)) 
....................   //       ghima(0xd4); 
....................   //   } 
.................... } 
....................  
.................... #include "floor.c" 
.................... float32 FLOOR(float32 x) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
*
03D4:  BCF    57.0
....................    y = x; 
03D5:  MOVF   4C,W
03D6:  MOVWF  50
03D7:  MOVF   4B,W
03D8:  MOVWF  4F
03D9:  MOVF   4A,W
03DA:  MOVWF  4E
03DB:  MOVF   49,W
03DC:  MOVWF  4D
....................  
....................    if (x < 0) 
03DD:  MOVF   4C,W
03DE:  MOVWF  5B
03DF:  MOVF   4B,W
03E0:  MOVWF  5A
03E1:  MOVF   4A,W
03E2:  MOVWF  59
03E3:  MOVF   49,W
03E4:  MOVWF  58
03E5:  CLRF   5F
03E6:  CLRF   5E
03E7:  CLRF   5D
03E8:  CLRF   5C
03E9:  CALL   301
03EA:  BTFSS  03.0
03EB:  GOTO   3F0
....................    { 
....................       s = 1; 
03EC:  BSF    57.0
....................       y = -y; 
03ED:  MOVF   4E,W
03EE:  XORLW  80
03EF:  MOVWF  4E
....................    } 
....................  
....................    if (y <= 32768.0) 
03F0:  MOVF   50,W
03F1:  MOVWF  5B
03F2:  MOVF   4F,W
03F3:  MOVWF  5A
03F4:  MOVF   4E,W
03F5:  MOVWF  59
03F6:  MOVF   4D,W
03F7:  MOVWF  58
03F8:  CLRF   5F
03F9:  CLRF   5E
03FA:  CLRF   5D
03FB:  MOVLW  8E
03FC:  MOVWF  5C
03FD:  CALL   301
03FE:  BTFSC  03.0
03FF:  GOTO   402
0400:  BTFSS  03.2
0401:  GOTO   419
....................       res = (float32)(unsigned int16)y; 
0402:  MOVF   50,W
0403:  MOVWF  5B
0404:  MOVF   4F,W
0405:  MOVWF  5A
0406:  MOVF   4E,W
0407:  MOVWF  59
0408:  MOVF   4D,W
0409:  MOVWF  58
040A:  CALL   340
040B:  MOVF   79,W
040C:  MOVWF  5D
040D:  MOVF   78,W
040E:  MOVWF  5C
040F:  CALL   0D9
0410:  MOVF   7A,W
0411:  MOVWF  54
0412:  MOVF   79,W
0413:  MOVWF  53
0414:  MOVF   78,W
0415:  MOVWF  52
0416:  MOVF   77,W
0417:  MOVWF  51
0418:  GOTO   4D6
....................  
....................    else if (y < 10000000.0) 
0419:  MOVF   50,W
041A:  MOVWF  5B
041B:  MOVF   4F,W
041C:  MOVWF  5A
041D:  MOVF   4E,W
041E:  MOVWF  59
041F:  MOVF   4D,W
0420:  MOVWF  58
0421:  MOVLW  80
0422:  MOVWF  5F
0423:  MOVLW  96
0424:  MOVWF  5E
0425:  MOVLW  18
0426:  MOVWF  5D
0427:  MOVLW  96
0428:  MOVWF  5C
0429:  CALL   301
042A:  BTFSS  03.0
042B:  GOTO   4CE
....................    { 
....................       l = (unsigned int16)(y * 0.000030517578125); 
042C:  MOVF   50,W
042D:  MOVWF  5B
042E:  MOVF   4F,W
042F:  MOVWF  5A
0430:  MOVF   4E,W
0431:  MOVWF  59
0432:  MOVF   4D,W
0433:  MOVWF  58
0434:  CLRF   5F
0435:  CLRF   5E
0436:  CLRF   5D
0437:  MOVLW  70
0438:  MOVWF  5C
0439:  CALL   35F
043A:  MOVF   7A,W
043B:  MOVWF  5B
043C:  MOVF   79,W
043D:  MOVWF  5A
043E:  MOVF   78,W
043F:  MOVWF  59
0440:  MOVF   77,W
0441:  MOVWF  58
0442:  CALL   340
0443:  MOVF   79,W
0444:  MOVWF  56
0445:  MOVF   78,W
0446:  MOVWF  55
....................       y = 32768.0 * (y * 0.000030517578125 - (float32)l); 
0447:  MOVF   50,W
0448:  MOVWF  5B
0449:  MOVF   4F,W
044A:  MOVWF  5A
044B:  MOVF   4E,W
044C:  MOVWF  59
044D:  MOVF   4D,W
044E:  MOVWF  58
044F:  CLRF   5F
0450:  CLRF   5E
0451:  CLRF   5D
0452:  MOVLW  70
0453:  MOVWF  5C
0454:  CALL   35F
0455:  MOVF   7A,W
0456:  MOVWF  5B
0457:  MOVF   79,W
0458:  MOVWF  5A
0459:  MOVF   78,W
045A:  MOVWF  59
045B:  MOVF   77,W
045C:  MOVWF  58
045D:  MOVF   56,W
045E:  MOVWF  5D
045F:  MOVF   55,W
0460:  MOVWF  5C
0461:  CALL   0D9
0462:  BSF    03.1
0463:  MOVF   5B,W
0464:  MOVWF  5F
0465:  MOVF   5A,W
0466:  MOVWF  5E
0467:  MOVF   59,W
0468:  MOVWF  5D
0469:  MOVF   58,W
046A:  MOVWF  5C
046B:  MOVF   7A,W
046C:  MOVWF  63
046D:  MOVF   79,W
046E:  MOVWF  62
046F:  MOVF   78,W
0470:  MOVWF  61
0471:  MOVF   77,W
0472:  MOVWF  60
0473:  CALL   0F6
0474:  CLRF   5B
0475:  CLRF   5A
0476:  CLRF   59
0477:  MOVLW  8E
0478:  MOVWF  58
0479:  MOVF   7A,W
047A:  MOVWF  5F
047B:  MOVF   79,W
047C:  MOVWF  5E
047D:  MOVF   78,W
047E:  MOVWF  5D
047F:  MOVF   77,W
0480:  MOVWF  5C
0481:  CALL   35F
0482:  MOVF   7A,W
0483:  MOVWF  50
0484:  MOVF   79,W
0485:  MOVWF  4F
0486:  MOVF   78,W
0487:  MOVWF  4E
0488:  MOVF   77,W
0489:  MOVWF  4D
....................       res = 32768.0 * (float32)l; 
048A:  MOVF   56,W
048B:  MOVWF  5D
048C:  MOVF   55,W
048D:  MOVWF  5C
048E:  CALL   0D9
048F:  CLRF   5B
0490:  CLRF   5A
0491:  CLRF   59
0492:  MOVLW  8E
0493:  MOVWF  58
0494:  MOVF   7A,W
0495:  MOVWF  5F
0496:  MOVF   79,W
0497:  MOVWF  5E
0498:  MOVF   78,W
0499:  MOVWF  5D
049A:  MOVF   77,W
049B:  MOVWF  5C
049C:  CALL   35F
049D:  MOVF   7A,W
049E:  MOVWF  54
049F:  MOVF   79,W
04A0:  MOVWF  53
04A1:  MOVF   78,W
04A2:  MOVWF  52
04A3:  MOVF   77,W
04A4:  MOVWF  51
....................       res += (float32)(unsigned int16)y; 
04A5:  MOVF   50,W
04A6:  MOVWF  5B
04A7:  MOVF   4F,W
04A8:  MOVWF  5A
04A9:  MOVF   4E,W
04AA:  MOVWF  59
04AB:  MOVF   4D,W
04AC:  MOVWF  58
04AD:  CALL   340
04AE:  MOVF   79,W
04AF:  MOVWF  5D
04B0:  MOVF   78,W
04B1:  MOVWF  5C
04B2:  CALL   0D9
04B3:  BCF    03.1
04B4:  MOVF   54,W
04B5:  MOVWF  5F
04B6:  MOVF   53,W
04B7:  MOVWF  5E
04B8:  MOVF   52,W
04B9:  MOVWF  5D
04BA:  MOVF   51,W
04BB:  MOVWF  5C
04BC:  MOVF   7A,W
04BD:  MOVWF  63
04BE:  MOVF   79,W
04BF:  MOVWF  62
04C0:  MOVF   78,W
04C1:  MOVWF  61
04C2:  MOVF   77,W
04C3:  MOVWF  60
04C4:  CALL   0F6
04C5:  MOVF   7A,W
04C6:  MOVWF  54
04C7:  MOVF   79,W
04C8:  MOVWF  53
04C9:  MOVF   78,W
04CA:  MOVWF  52
04CB:  MOVF   77,W
04CC:  MOVWF  51
....................    } 
04CD:  GOTO   4D6
....................  
....................    else 
....................       res = y; 
04CE:  MOVF   50,W
04CF:  MOVWF  54
04D0:  MOVF   4F,W
04D1:  MOVWF  53
04D2:  MOVF   4E,W
04D3:  MOVWF  52
04D4:  MOVF   4D,W
04D5:  MOVWF  51
....................  
....................    y = y - (float32)(unsigned int16)y; 
04D6:  MOVF   50,W
04D7:  MOVWF  5B
04D8:  MOVF   4F,W
04D9:  MOVWF  5A
04DA:  MOVF   4E,W
04DB:  MOVWF  59
04DC:  MOVF   4D,W
04DD:  MOVWF  58
04DE:  CALL   340
04DF:  MOVF   79,W
04E0:  MOVWF  5D
04E1:  MOVF   78,W
04E2:  MOVWF  5C
04E3:  CALL   0D9
04E4:  BSF    03.1
04E5:  MOVF   50,W
04E6:  MOVWF  5F
04E7:  MOVF   4F,W
04E8:  MOVWF  5E
04E9:  MOVF   4E,W
04EA:  MOVWF  5D
04EB:  MOVF   4D,W
04EC:  MOVWF  5C
04ED:  MOVF   7A,W
04EE:  MOVWF  63
04EF:  MOVF   79,W
04F0:  MOVWF  62
04F1:  MOVF   78,W
04F2:  MOVWF  61
04F3:  MOVF   77,W
04F4:  MOVWF  60
04F5:  CALL   0F6
04F6:  MOVF   7A,W
04F7:  MOVWF  50
04F8:  MOVF   79,W
04F9:  MOVWF  4F
04FA:  MOVF   78,W
04FB:  MOVWF  4E
04FC:  MOVF   77,W
04FD:  MOVWF  4D
....................  
....................    if (s) 
04FE:  BTFSS  57.0
04FF:  GOTO   503
....................       res = -res; 
0500:  MOVF   52,W
0501:  XORLW  80
0502:  MOVWF  52
....................  
....................    if (y != 0) 
0503:  MOVF   50,W
0504:  MOVWF  5B
0505:  MOVF   4F,W
0506:  MOVWF  5A
0507:  MOVF   4E,W
0508:  MOVWF  59
0509:  MOVF   4D,W
050A:  MOVWF  58
050B:  CLRF   5F
050C:  CLRF   5E
050D:  CLRF   5D
050E:  CLRF   5C
050F:  CALL   301
0510:  BTFSC  03.2
0511:  GOTO   52B
....................    { 
....................       if (s == 1) 
0512:  BTFSS  57.0
0513:  GOTO   52B
....................          res -= 1.0; 
0514:  BSF    03.1
0515:  MOVF   54,W
0516:  MOVWF  5F
0517:  MOVF   53,W
0518:  MOVWF  5E
0519:  MOVF   52,W
051A:  MOVWF  5D
051B:  MOVF   51,W
051C:  MOVWF  5C
051D:  CLRF   63
051E:  CLRF   62
051F:  CLRF   61
0520:  MOVLW  7F
0521:  MOVWF  60
0522:  CALL   0F6
0523:  MOVF   7A,W
0524:  MOVWF  54
0525:  MOVF   79,W
0526:  MOVWF  53
0527:  MOVF   78,W
0528:  MOVWF  52
0529:  MOVF   77,W
052A:  MOVWF  51
....................    } 
....................    if (x == 0) 
052B:  MOVF   4C,W
052C:  MOVWF  5B
052D:  MOVF   4B,W
052E:  MOVWF  5A
052F:  MOVF   4A,W
0530:  MOVWF  59
0531:  MOVF   49,W
0532:  MOVWF  58
0533:  CLRF   5F
0534:  CLRF   5E
0535:  CLRF   5D
0536:  CLRF   5C
0537:  CALL   301
0538:  BTFSS  03.2
0539:  GOTO   53E
....................       res = 0; 
053A:  CLRF   54
053B:  CLRF   53
053C:  CLRF   52
053D:  CLRF   51
....................  
....................    return (res); 
053E:  MOVF   51,W
053F:  MOVWF  77
0540:  MOVF   52,W
0541:  MOVWF  78
0542:  MOVF   53,W
0543:  MOVWF  79
0544:  MOVF   54,W
0545:  MOVWF  7A
0546:  RETURN
.................... } 
....................  
....................  
.................... /***************************************************** PREPROSECSOR ****************************************************/ 
....................  
.................... // 1 >> on 
.................... #define triac1Out PIN_C6 
.................... #define triac2Out PIN_C7 
.................... #define relayOut PIN_C1 
.................... // 0 >> pressed 
.................... #define btnINCREASE PIN_B4 
.................... #define btnDECREASE PIN_B1 
.................... // 1 >> led on 
.................... #define ledSAFETY PIN_D1 
.................... #define ledSTARTING PIN_D2 
.................... #define ledRINGING PIN_C5 
.................... #define ledBUTTON PIN_D4 
....................  
.................... /***************************************************** VARIABLES *****************************************************/ 
....................  
.................... // set angle (10 levels). more angle, weaker motor 
.................... volatile int8 angleStarter = read_eeprom(0x00); 
.................... volatile int8 angleRingTheBell = read_eeprom(0x01); 
....................  
.................... volatile int32 valTimer0SetStarter = (int32)FLOOR((13.1072 - angleStarter) / 0.0512) - 1; 
.................... volatile int32 valTimer0SetRingTheBell = (int32)FLOOR((13.1072 - angleRingTheBell) / 0.0512) - 1; 
....................  
.................... volatile signed int16 count = 0; 
.................... int8 countTime = 0, anglePercent = 0; 
.................... int16 iTimer2OverFlow; 
.................... int1 flagForward = true, flagStarter = true, flagSTOP = true; 
....................  
.................... /***************************************************** ISR Func() *****************************************************/ 
....................  
.................... #byte CMCON = 0x9C 
.................... #INT_COMP 
.................... void isrComparator() 
*
0051:  BSF    03.5
0052:  MOVF   1C,W
0053:  BCF    03.5
0054:  MOVWF  6C
.................... { // A mismatch condition will continue to set flag bit CMIF. Reading CMCON will end the mismatch condition and allow flag bit CMIF to be cleared 
....................    char charas = CMCON; 
....................    output_low(relayOut); // safety switch 
0055:  BCF    42.1
0056:  MOVF   42,W
0057:  BSF    03.5
0058:  MOVWF  07
0059:  BCF    03.5
005A:  BCF    07.1
....................    //TODO: xuat tin hieu reset 
.................... } 
....................  
005B:  BCF    0D.6
005C:  BCF    0A.3
005D:  BCF    0A.4
005E:  GOTO   031
.................... #INT_EXT 
.................... void ext_isr() 
.................... { 
....................    // cross zero point detector 50Hz >> 1/50/2 sec per half pulse after diode brighet 
....................  
....................    output_low(triac1Out); 
005F:  BCF    42.6
0060:  MOVF   42,W
0061:  BSF    03.5
0062:  MOVWF  07
0063:  BCF    03.5
0064:  BCF    07.6
....................    output_low(triac2Out); 
0065:  BCF    42.7
0066:  MOVF   42,W
0067:  BSF    03.5
0068:  MOVWF  07
0069:  BCF    03.5
006A:  BCF    07.7
....................  
....................    if (flagStarter) 
006B:  BTFSS  41.1
006C:  GOTO   070
....................       set_timer0(valTimer0SetStarter); 
006D:  MOVF   33,W
006E:  MOVWF  01
006F:  GOTO   072
....................    else 
....................       set_timer0(valTimer0SetRingTheBell); 
0070:  MOVF   37,W
0071:  MOVWF  01
....................  
....................    clear_interrupt(INT_TIMER0); 
0072:  BCF    0B.2
....................    enable_interrupts(INT_TIMER0); 
0073:  BSF    0B.5
....................    clear_interrupt(INT_EXT); // waiting for next EXT 
0074:  BCF    0B.1
.................... } 
....................  
0075:  BCF    0B.1
0076:  BCF    0A.3
0077:  BCF    0A.4
0078:  GOTO   031
.................... #INT_TIMER0 
.................... void timer0_isr() 
.................... { 
....................    if (flagForward && !flagSTOP) 
0079:  BTFSS  41.0
007A:  GOTO   084
007B:  BTFSC  41.2
007C:  GOTO   084
....................       output_high(triac1Out); 
007D:  BCF    42.6
007E:  MOVF   42,W
007F:  BSF    03.5
0080:  MOVWF  07
0081:  BCF    03.5
0082:  BSF    07.6
0083:  GOTO   08E
....................    else if (!flagForward && !flagSTOP) 
0084:  BTFSC  41.0
0085:  GOTO   08E
0086:  BTFSC  41.2
0087:  GOTO   08E
....................       output_high(triac2Out); 
0088:  BCF    42.7
0089:  MOVF   42,W
008A:  BSF    03.5
008B:  MOVWF  07
008C:  BCF    03.5
008D:  BSF    07.7
....................  
....................    // set_timer0(200.00); 
....................    disable_interrupts(INT_TIMER0); 
008E:  BCF    0B.5
.................... } 
....................  
008F:  BCF    0B.2
0090:  BCF    0A.3
0091:  BCF    0A.4
0092:  GOTO   031
.................... #INT_TIMER2 
.................... void timer2_isr() 
.................... { 
....................    if (!(--iTimer2OverFlow)) 
0093:  MOVF   3F,W
0094:  BTFSC  03.2
0095:  DECF   40,F
0096:  DECF   3F,F
0097:  MOVF   3F,W
0098:  IORWF  40,W
0099:  BTFSS  03.2
009A:  GOTO   0C7
....................    { 
....................       // reset neu quay qua 4 vong 
....................       if (flagForward) 
009B:  BTFSS  41.0
009C:  GOTO   0B1
....................       { 
....................          if (count >= 1600) // (+)4 rotate 
009D:  BTFSC  3C.7
009E:  GOTO   0B0
009F:  MOVF   3C,W
00A0:  SUBLW  05
00A1:  BTFSC  03.0
00A2:  GOTO   0B0
00A3:  XORLW  FF
00A4:  BTFSS  03.2
00A5:  GOTO   0AA
00A6:  MOVF   3B,W
00A7:  SUBLW  3F
00A8:  BTFSC  03.0
00A9:  GOTO   0B0
....................          { 
....................             output_low(relayOut); // safety switch 
00AA:  BCF    42.1
00AB:  MOVF   42,W
00AC:  BSF    03.5
00AD:  MOVWF  07
00AE:  BCF    03.5
00AF:  BCF    07.1
....................             //TODO: xuat tin hieu reset 
....................          } 
....................       } 
00B0:  GOTO   0C3
....................       else 
....................       { 
....................          if (count <= -1600) // (-)4 rotate 
00B1:  BTFSS  3C.7
00B2:  GOTO   0C3
00B3:  MOVF   3C,W
00B4:  SUBLW  F9
00B5:  BTFSS  03.0
00B6:  GOTO   0C3
00B7:  BTFSS  03.2
00B8:  GOTO   0BD
00B9:  MOVF   3B,W
00BA:  SUBLW  C0
00BB:  BTFSS  03.0
00BC:  GOTO   0C3
....................          { 
....................             output_low(relayOut); // safety switch 
00BD:  BCF    42.1
00BE:  MOVF   42,W
00BF:  BSF    03.5
00C0:  MOVWF  07
00C1:  BCF    03.5
00C2:  BCF    07.1
....................             //TODO: xuat tin hieu reset 
....................          } 
....................       } 
....................  
....................       if (!btnDECREASE) 
....................       { 
....................          if (flagStarter) 
....................          { 
....................             if (angleStarter < 9) 
....................             { 
....................                write_eeprom(0x00, ++angleStarter); 
....................                valTimer0SetStarter = (int32)FLOOR((13.1072 - angleStarter) / 0.0512) - 1; 
....................             } 
....................          } 
....................          else 
....................          { 
....................             if (angleRingTheBell < 9) 
....................             { 
....................                write_eeprom(0x01, ++angleRingTheBell); 
....................                valTimer0SetRingTheBell = (int32)FLOOR((13.1072 - angleRingTheBell) / 0.0512) - 1; 
....................             } 
....................          } 
....................       } 
....................       else if (!btnINCREASE) 
....................       { 
....................          if (flagStarter) 
....................          { 
....................             if (angleStarter > 1) 
....................             { 
....................                write_eeprom(0x00, --angleStarter); 
....................                valTimer0SetStarter = (int32)FLOOR((13.1072 - angleStarter) / 0.0512) - 1; 
....................             } 
....................          } 
....................          else 
....................          { 
....................             if (angleRingTheBell > 1) 
....................             { 
....................                write_eeprom(0x01, --angleRingTheBell); 
....................                valTimer0SetRingTheBell = (int32)FLOOR((13.1072 - angleRingTheBell) / 0.0512) - 1; 
....................             } 
....................          } 
....................       } 
....................  
....................       iTimer2OverFlow = 7660; // 100ms every command 
00C3:  MOVLW  1D
00C4:  MOVWF  40
00C5:  MOVLW  EC
00C6:  MOVWF  3F
....................    } 
.................... } 
....................  
00C7:  BCF    0C.1
00C8:  BCF    0A.3
00C9:  BCF    0A.4
00CA:  GOTO   031
.................... #INT_CCP1 
.................... void ccp1_isr() 
.................... { 
....................    if (RC0) 
00CB:  BTFSS  07.0
00CC:  GOTO   0D1
....................       ++count; 
00CD:  INCF   3B,F
00CE:  BTFSC  03.2
00CF:  INCF   3C,F
00D0:  GOTO   0D5
....................    else 
....................       --count; 
00D1:  MOVF   3B,W
00D2:  BTFSC  03.2
00D3:  DECF   3C,F
00D4:  DECF   3B,F
....................    // clear_interrupt(INT_CCP1); 
00D5:  BCF    0C.2
00D6:  BCF    0A.3
00D7:  BCF    0A.4
00D8:  GOTO   031
.................... } 
....................  
.................... /***************************************************** FUNC() *****************************************************/ 
....................  
.................... void FORWARD() 
.................... { 
....................    output_low(triac2Out); 
*
05CF:  BCF    42.7
05D0:  MOVF   42,W
05D1:  BSF    03.5
05D2:  MOVWF  07
05D3:  BCF    03.5
05D4:  BCF    07.7
....................  
....................    flagForward = true; 
05D5:  BSF    41.0
....................    flagSTOP = false; 
05D6:  BCF    41.2
05D7:  RETURN
.................... } 
.................... void REVERSE() 
.................... { 
....................    output_low(triac1Out); 
*
05E6:  BCF    42.6
05E7:  MOVF   42,W
05E8:  BSF    03.5
05E9:  MOVWF  07
05EA:  BCF    03.5
05EB:  BCF    07.6
....................    flagForward = flagSTOP = false; 
05EC:  BCF    41.2
05ED:  BCF    41.0
05EE:  RETURN
.................... } 
.................... void STOP() 
.................... { 
....................    flagSTOP = true; 
*
05D8:  BSF    41.2
....................    output_low(triac1Out); 
05D9:  BCF    42.6
05DA:  MOVF   42,W
05DB:  BSF    03.5
05DC:  MOVWF  07
05DD:  BCF    03.5
05DE:  BCF    07.6
....................    output_low(triac2Out); 
05DF:  BCF    42.7
05E0:  MOVF   42,W
05E1:  BSF    03.5
05E2:  MOVWF  07
05E3:  BCF    03.5
05E4:  BCF    07.7
05E5:  RETURN
.................... } 
....................  
.................... void starter() 
.................... { 
....................    // half rotate 
....................    while (count <= 200) 
*
05EF:  BTFSC  3C.7
05F0:  GOTO   5F8
05F1:  MOVF   3C,F
05F2:  BTFSS  03.2
05F3:  GOTO   5FA
05F4:  MOVF   3B,W
05F5:  SUBLW  C8
05F6:  BTFSS  03.0
05F7:  GOTO   5FA
....................       FORWARD(); 
05F8:  CALL   5CF
05F9:  GOTO   5EF
....................    STOP(); 
05FA:  CALL   5D8
....................    while (count >= 0) 
05FB:  BTFSC  3C.7
05FC:  GOTO   5FF
....................       STOP(); 
05FD:  CALL   5D8
05FE:  GOTO   5FB
....................    while (count >= -200) 
05FF:  BTFSS  3C.7
0600:  GOTO   60C
0601:  MOVF   3C,W
0602:  SUBLW  FE
0603:  BTFSC  03.0
0604:  GOTO   60E
0605:  XORLW  FF
0606:  BTFSS  03.2
0607:  GOTO   60C
0608:  MOVF   3B,W
0609:  SUBLW  37
060A:  BTFSC  03.0
060B:  GOTO   60E
....................       REVERSE(); 
060C:  CALL   5E6
060D:  GOTO   5FF
....................    STOP(); 
060E:  CALL   5D8
....................    while (count <= 0) 
060F:  BTFSC  3C.7
0610:  GOTO   618
0611:  MOVF   3C,F
0612:  BTFSS  03.2
0613:  GOTO   61A
0614:  MOVF   3B,W
0615:  SUBLW  00
0616:  BTFSS  03.0
0617:  GOTO   61A
....................       STOP(); 
0618:  CALL   5D8
0619:  GOTO   60F
....................  
....................    // 1 rotate 
....................    while (count <= 400) 
061A:  BTFSC  3C.7
061B:  GOTO   626
061C:  MOVF   3C,W
061D:  SUBLW  01
061E:  BTFSS  03.0
061F:  GOTO   628
0620:  BTFSS  03.2
0621:  GOTO   626
0622:  MOVF   3B,W
0623:  SUBLW  90
0624:  BTFSS  03.0
0625:  GOTO   628
....................       FORWARD(); 
0626:  CALL   5CF
0627:  GOTO   61A
....................    STOP(); 
0628:  CALL   5D8
....................    while (count >= 0) 
0629:  BTFSC  3C.7
062A:  GOTO   62D
....................       STOP(); 
062B:  CALL   5D8
062C:  GOTO   629
....................    while (count >= -400) 
062D:  BTFSS  3C.7
062E:  GOTO   63A
062F:  MOVF   3C,W
0630:  SUBLW  FD
0631:  BTFSC  03.0
0632:  GOTO   63C
0633:  XORLW  FF
0634:  BTFSS  03.2
0635:  GOTO   63A
0636:  MOVF   3B,W
0637:  SUBLW  6F
0638:  BTFSC  03.0
0639:  GOTO   63C
....................       REVERSE(); 
063A:  CALL   5E6
063B:  GOTO   62D
....................    STOP(); 
063C:  CALL   5D8
....................    while (count <= 0) 
063D:  BTFSC  3C.7
063E:  GOTO   646
063F:  MOVF   3C,F
0640:  BTFSS  03.2
0641:  GOTO   648
0642:  MOVF   3B,W
0643:  SUBLW  00
0644:  BTFSS  03.0
0645:  GOTO   648
....................       STOP(); 
0646:  CALL   5D8
0647:  GOTO   63D
....................  
....................    // 2 rotates 
....................    while (count <= 800) 
0648:  BTFSC  3C.7
0649:  GOTO   654
064A:  MOVF   3C,W
064B:  SUBLW  03
064C:  BTFSS  03.0
064D:  GOTO   656
064E:  BTFSS  03.2
064F:  GOTO   654
0650:  MOVF   3B,W
0651:  SUBLW  20
0652:  BTFSS  03.0
0653:  GOTO   656
....................       FORWARD(); 
0654:  CALL   5CF
0655:  GOTO   648
....................    STOP(); 
0656:  CALL   5D8
....................    while (count >= 0) 
0657:  BTFSC  3C.7
0658:  GOTO   65B
....................       STOP(); 
0659:  CALL   5D8
065A:  GOTO   657
....................    while (count >= -800) 
065B:  BTFSS  3C.7
065C:  GOTO   668
065D:  MOVF   3C,W
065E:  SUBLW  FB
065F:  BTFSC  03.0
0660:  GOTO   66A
0661:  XORLW  FF
0662:  BTFSS  03.2
0663:  GOTO   668
0664:  MOVF   3B,W
0665:  SUBLW  DF
0666:  BTFSC  03.0
0667:  GOTO   66A
....................       REVERSE(); 
0668:  CALL   5E6
0669:  GOTO   65B
....................    STOP(); 
066A:  CALL   5D8
....................    while (count <= 0) 
066B:  BTFSC  3C.7
066C:  GOTO   674
066D:  MOVF   3C,F
066E:  BTFSS  03.2
066F:  GOTO   676
0670:  MOVF   3B,W
0671:  SUBLW  00
0672:  BTFSS  03.0
0673:  GOTO   676
....................       STOP(); 
0674:  CALL   5D8
0675:  GOTO   66B
....................  
....................    // 3 rotates 1 side 
....................    while (count <= 1200) 
0676:  BTFSC  3C.7
0677:  GOTO   682
0678:  MOVF   3C,W
0679:  SUBLW  04
067A:  BTFSS  03.0
067B:  GOTO   684
067C:  BTFSS  03.2
067D:  GOTO   682
067E:  MOVF   3B,W
067F:  SUBLW  B0
0680:  BTFSS  03.0
0681:  GOTO   684
....................       FORWARD(); 
0682:  CALL   5CF
0683:  GOTO   676
....................    STOP(); 
0684:  CALL   5D8
....................  
....................    flagStarter = false; 
0685:  BCF    41.1
0686:  BSF    0A.3
0687:  BCF    0A.4
0688:  GOTO   17A (RETURN)
.................... } 
....................  
.................... void RingTheBell() 
.................... { 
....................    while (count >= 400) 
0689:  BTFSC  3C.7
068A:  GOTO   698
068B:  MOVF   3C,W
068C:  SUBLW  00
068D:  BTFSC  03.0
068E:  GOTO   698
068F:  XORLW  FF
0690:  BTFSS  03.2
0691:  GOTO   696
0692:  MOVF   3B,W
0693:  SUBLW  8F
0694:  BTFSC  03.0
0695:  GOTO   698
....................       STOP(); 
0696:  CALL   5D8
0697:  GOTO   689
....................  
....................    while (count >= -800) 
0698:  BTFSS  3C.7
0699:  GOTO   6A5
069A:  MOVF   3C,W
069B:  SUBLW  FB
069C:  BTFSC  03.0
069D:  GOTO   6A7
069E:  XORLW  FF
069F:  BTFSS  03.2
06A0:  GOTO   6A5
06A1:  MOVF   3B,W
06A2:  SUBLW  DF
06A3:  BTFSC  03.0
06A4:  GOTO   6A7
....................       REVERSE(); 
06A5:  CALL   5E6
06A6:  GOTO   698
....................    STOP(); 
06A7:  CALL   5D8
....................  
....................    while (count <= -400) 
06A8:  BTFSS  3C.7
06A9:  GOTO   6B6
06AA:  MOVF   3C,W
06AB:  SUBLW  FE
06AC:  BTFSS  03.0
06AD:  GOTO   6B6
06AE:  BTFSS  03.2
06AF:  GOTO   6B4
06B0:  MOVF   3B,W
06B1:  SUBLW  70
06B2:  BTFSS  03.0
06B3:  GOTO   6B6
....................       STOP(); 
06B4:  CALL   5D8
06B5:  GOTO   6A8
....................  
....................    while (count <= 800) 
06B6:  BTFSC  3C.7
06B7:  GOTO   6C2
06B8:  MOVF   3C,W
06B9:  SUBLW  03
06BA:  BTFSS  03.0
06BB:  GOTO   6C4
06BC:  BTFSS  03.2
06BD:  GOTO   6C2
06BE:  MOVF   3B,W
06BF:  SUBLW  20
06C0:  BTFSS  03.0
06C1:  GOTO   6C4
....................       FORWARD(); 
06C2:  CALL   5CF
06C3:  GOTO   6B6
....................    STOP(); 
06C4:  CALL   5D8
06C5:  BSF    0A.3
06C6:  BCF    0A.4
06C7:  GOTO   17D (RETURN)
.................... } 
....................  
.................... // pic 20mhz 5.10^6 = 1sec 
.................... // motor 2000rpm 
.................... // quay co tai: 0.5rps -> 200xung/s -> 1/200 s/xung 
.................... void checkSafetyFirst(int32 sec) 
.................... { 
....................    flagSTOP = true; 
*
057A:  BSF    41.2
....................    output_low(relayOut); // safety switch 
057B:  BCF    42.1
057C:  MOVF   42,W
057D:  BSF    03.5
057E:  MOVWF  07
057F:  BCF    03.5
0580:  BCF    07.1
....................  
....................    signed int16 lastCount = count; 
0581:  MOVF   3C,W
0582:  MOVWF  48
0583:  MOVF   3B,W
0584:  MOVWF  47
....................    for (int32 i = sec; --i;) // waitting steady 
0585:  MOVF   46,W
0586:  MOVWF  4C
0587:  MOVF   45,W
0588:  MOVWF  4B
0589:  MOVF   44,W
058A:  MOVWF  4A
058B:  MOVF   43,W
058C:  MOVWF  49
058D:  MOVLW  FF
058E:  ADDWF  49,F
058F:  BTFSS  03.0
0590:  ADDWF  4A,F
0591:  BTFSS  03.0
0592:  ADDWF  4B,F
0593:  BTFSS  03.0
0594:  ADDWF  4C,F
0595:  MOVF   49,F
0596:  BTFSS  03.2
0597:  GOTO   5A1
0598:  MOVF   4A,F
0599:  BTFSS  03.2
059A:  GOTO   5A1
059B:  MOVF   4B,F
059C:  BTFSS  03.2
059D:  GOTO   5A1
059E:  MOVF   4C,F
059F:  BTFSC  03.2
05A0:  GOTO   5B9
....................    { 
....................       if (count != lastCount) 
05A1:  MOVF   47,W
05A2:  SUBWF  3B,W
05A3:  BTFSS  03.2
05A4:  GOTO   5A9
05A5:  MOVF   48,W
05A6:  SUBWF  3C,W
05A7:  BTFSC  03.2
05A8:  GOTO   5B8
....................       { 
....................          i = sec; // reset 
05A9:  MOVF   46,W
05AA:  MOVWF  4C
05AB:  MOVF   45,W
05AC:  MOVWF  4B
05AD:  MOVF   44,W
05AE:  MOVWF  4A
05AF:  MOVF   43,W
05B0:  MOVWF  49
....................          lastCount = count; 
05B1:  MOVF   3C,W
05B2:  MOVWF  48
05B3:  MOVF   3B,W
05B4:  MOVWF  47
....................          delay_ms(30); // pray for couting up 
05B5:  MOVLW  1E
05B6:  MOVWF  4E
05B7:  CALL   566
....................       } 
05B8:  GOTO   58D
....................    } 
....................  
....................    count = 0; // update 0 point 
05B9:  CLRF   3C
05BA:  CLRF   3B
....................    output_high(relayOut); 
05BB:  BCF    42.1
05BC:  MOVF   42,W
05BD:  BSF    03.5
05BE:  MOVWF  07
05BF:  BCF    03.5
05C0:  BSF    07.1
....................    delay_ms(3000); // ngăn hồ quang nếu cùng lúc đóng triac lập tức 
05C1:  MOVLW  0C
05C2:  MOVWF  4D
05C3:  MOVLW  FA
05C4:  MOVWF  4E
05C5:  CALL   566
05C6:  DECFSZ 4D,F
05C7:  GOTO   5C3
....................    enable_interrupts(INT_TIMER2); 
05C8:  BSF    03.5
05C9:  BSF    0C.1
....................    flagSTOP = false; 
05CA:  BCF    03.5
05CB:  BCF    41.2
05CC:  BSF    0A.3
05CD:  BCF    0A.4
05CE:  GOTO   177 (RETURN)
.................... } 
....................  
.................... /***************************************************** MAIN ********************************************************/ 
....................  
.................... void main() 
*
0800:  MOVF   03,W
0801:  ANDLW  1F
0802:  MOVWF  03
0803:  BSF    03.6
0804:  CLRF   0D
0805:  BSF    03.5
0806:  BCF    0C.7
0807:  BSF    0C.0
0808:  BCF    03.5
0809:  MOVF   0C,W
080A:  BCF    03.6
080B:  MOVWF  31
080C:  MOVLW  01
080D:  BSF    03.6
080E:  MOVWF  0D
080F:  BSF    03.5
0810:  BCF    0C.7
0811:  BSF    0C.0
0812:  BCF    03.5
0813:  MOVF   0C,W
0814:  BCF    03.6
0815:  MOVWF  32
0816:  CLRF   5D
0817:  MOVF   31,W
0818:  MOVWF  5C
0819:  BCF    0A.3
081A:  CALL   0D9
081B:  BSF    0A.3
081C:  BSF    03.1
081D:  MOVLW  17
081E:  MOVWF  5F
081F:  MOVLW  B7
0820:  MOVWF  5E
0821:  MOVLW  51
0822:  MOVWF  5D
0823:  MOVLW  82
0824:  MOVWF  5C
0825:  MOVF   7A,W
0826:  MOVWF  63
0827:  MOVF   79,W
0828:  MOVWF  62
0829:  MOVF   78,W
082A:  MOVWF  61
082B:  MOVF   77,W
082C:  MOVWF  60
082D:  BCF    0A.3
082E:  CALL   0F6
082F:  BSF    0A.3
0830:  MOVF   7A,W
0831:  MOVWF  46
0832:  MOVF   79,W
0833:  MOVWF  45
0834:  MOVF   78,W
0835:  MOVWF  44
0836:  MOVF   77,W
0837:  MOVWF  43
0838:  MOVF   46,W
0839:  MOVWF  4C
083A:  MOVF   45,W
083B:  MOVWF  4B
083C:  MOVF   44,W
083D:  MOVWF  4A
083E:  MOVF   43,W
083F:  MOVWF  49
0840:  MOVLW  17
0841:  MOVWF  50
0842:  MOVLW  B7
0843:  MOVWF  4F
0844:  MOVLW  51
0845:  MOVWF  4E
0846:  MOVLW  7A
0847:  MOVWF  4D
0848:  BCF    0A.3
0849:  CALL   237
084A:  BSF    0A.3
084B:  MOVF   7A,W
084C:  MOVWF  46
084D:  MOVF   79,W
084E:  MOVWF  45
084F:  MOVF   78,W
0850:  MOVWF  44
0851:  MOVF   77,W
0852:  MOVWF  43
0853:  MOVF   46,W
0854:  MOVWF  4C
0855:  MOVF   45,W
0856:  MOVWF  4B
0857:  MOVF   44,W
0858:  MOVWF  4A
0859:  MOVF   43,W
085A:  MOVWF  49
085B:  BCF    0A.3
085C:  CALL   3D4
085D:  BSF    0A.3
085E:  MOVF   7A,W
085F:  MOVWF  48
0860:  MOVF   79,W
0861:  MOVWF  47
0862:  MOVF   78,W
0863:  MOVWF  46
0864:  MOVF   77,W
0865:  MOVWF  45
0866:  BCF    0A.3
0867:  CALL   547
0868:  BSF    0A.3
0869:  MOVF   7A,W
086A:  MOVWF  46
086B:  MOVF   79,W
086C:  MOVWF  45
086D:  MOVF   78,W
086E:  MOVWF  44
086F:  MOVF   77,W
0870:  MOVWF  43
0871:  MOVLW  01
0872:  SUBWF  43,W
0873:  MOVWF  33
0874:  MOVF   44,W
0875:  MOVWF  34
0876:  MOVLW  00
0877:  BTFSS  03.0
0878:  MOVLW  01
0879:  SUBWF  34,F
087A:  MOVF   45,W
087B:  MOVWF  35
087C:  MOVLW  00
087D:  BTFSS  03.0
087E:  MOVLW  01
087F:  SUBWF  35,F
0880:  MOVF   46,W
0881:  MOVWF  36
0882:  MOVLW  00
0883:  BTFSS  03.0
0884:  MOVLW  01
0885:  SUBWF  36,F
0886:  CLRF   5D
0887:  MOVF   32,W
0888:  MOVWF  5C
0889:  BCF    0A.3
088A:  CALL   0D9
088B:  BSF    0A.3
088C:  CLRF   44
088D:  MOVF   04,W
088E:  MOVWF  43
088F:  BCF    44.0
0890:  BTFSC  03.7
0891:  BSF    44.0
0892:  BSF    03.1
0893:  MOVLW  17
0894:  MOVWF  5F
0895:  MOVLW  B7
0896:  MOVWF  5E
0897:  MOVLW  51
0898:  MOVWF  5D
0899:  MOVLW  82
089A:  MOVWF  5C
089B:  MOVF   7A,W
089C:  MOVWF  63
089D:  MOVF   79,W
089E:  MOVWF  62
089F:  MOVF   78,W
08A0:  MOVWF  61
08A1:  MOVF   77,W
08A2:  MOVWF  60
08A3:  BCF    0A.3
08A4:  CALL   0F6
08A5:  BSF    0A.3
08A6:  MOVF   43,W
08A7:  MOVWF  04
08A8:  BCF    03.7
08A9:  BTFSC  44.0
08AA:  BSF    03.7
08AB:  MOVF   7A,W
08AC:  MOVWF  48
08AD:  MOVF   79,W
08AE:  MOVWF  47
08AF:  MOVF   78,W
08B0:  MOVWF  46
08B1:  MOVF   77,W
08B2:  MOVWF  45
08B3:  MOVF   48,W
08B4:  MOVWF  4C
08B5:  MOVF   47,W
08B6:  MOVWF  4B
08B7:  MOVF   46,W
08B8:  MOVWF  4A
08B9:  MOVF   45,W
08BA:  MOVWF  49
08BB:  MOVLW  17
08BC:  MOVWF  50
08BD:  MOVLW  B7
08BE:  MOVWF  4F
08BF:  MOVLW  51
08C0:  MOVWF  4E
08C1:  MOVLW  7A
08C2:  MOVWF  4D
08C3:  BCF    0A.3
08C4:  CALL   237
08C5:  BSF    0A.3
08C6:  MOVF   7A,W
08C7:  MOVWF  48
08C8:  MOVF   79,W
08C9:  MOVWF  47
08CA:  MOVF   78,W
08CB:  MOVWF  46
08CC:  MOVF   77,W
08CD:  MOVWF  45
08CE:  MOVF   48,W
08CF:  MOVWF  4C
08D0:  MOVF   47,W
08D1:  MOVWF  4B
08D2:  MOVF   46,W
08D3:  MOVWF  4A
08D4:  MOVF   45,W
08D5:  MOVWF  49
08D6:  BCF    0A.3
08D7:  CALL   3D4
08D8:  BSF    0A.3
08D9:  MOVF   7A,W
08DA:  MOVWF  48
08DB:  MOVF   79,W
08DC:  MOVWF  47
08DD:  MOVF   78,W
08DE:  MOVWF  46
08DF:  MOVF   77,W
08E0:  MOVWF  45
08E1:  BCF    0A.3
08E2:  CALL   547
08E3:  BSF    0A.3
08E4:  MOVF   7A,W
08E5:  MOVWF  48
08E6:  MOVF   79,W
08E7:  MOVWF  47
08E8:  MOVF   78,W
08E9:  MOVWF  46
08EA:  MOVF   77,W
08EB:  MOVWF  45
08EC:  MOVLW  01
08ED:  SUBWF  45,W
08EE:  MOVWF  37
08EF:  MOVF   46,W
08F0:  MOVWF  38
08F1:  MOVLW  00
08F2:  BTFSS  03.0
08F3:  MOVLW  01
08F4:  SUBWF  38,F
08F5:  MOVF   47,W
08F6:  MOVWF  39
08F7:  MOVLW  00
08F8:  BTFSS  03.0
08F9:  MOVLW  01
08FA:  SUBWF  39,F
08FB:  MOVF   48,W
08FC:  MOVWF  3A
08FD:  MOVLW  00
08FE:  BTFSS  03.0
08FF:  MOVLW  01
0900:  SUBWF  3A,F
0901:  CLRF   3C
0902:  CLRF   3B
0903:  CLRF   3D
0904:  CLRF   3E
0905:  BSF    41.0
0906:  BSF    41.1
0907:  BSF    41.2
0908:  MOVLW  FF
0909:  MOVWF  42
090A:  BSF    03.5
090B:  BSF    1F.0
090C:  BSF    1F.1
090D:  BSF    1F.2
090E:  BCF    1F.3
090F:  MOVLW  07
0910:  MOVWF  1C
0911:  BCF    03.7
.................... { 
....................    TRISB0 = TRISC0 = TRISC2 = TRISB1 = TRISB4 = 1;                   //input 
*
0927:  BSF    03.5
0928:  BSF    06.4
0929:  BSF    06.1
092A:  BSF    07.2
092B:  BSF    07.0
092C:  BSF    06.0
....................    TRISC6 = TRISC7 = TRISC1 = TRISD1 = TRISD2 = TRISC5 = TRISD4 = 0; //output 
092D:  BCF    08.4
092E:  BCF    07.5
092F:  BCF    08.2
0930:  BCF    08.1
0931:  BCF    07.1
0932:  BCF    07.7
0933:  BCF    07.6
....................  
....................    clear_interrupt(INT_EXT); 
0934:  BCF    03.5
0935:  BCF    0B.1
....................    enable_interrupts(INT_EXT); 
0936:  BSF    0B.4
....................    ext_int_edge(H_TO_L); 
0937:  BSF    03.5
0938:  BCF    01.6
....................  
....................    setup_timer_0(RTCC_INTERNAL | RTCC_DIV_256); // 51.2us 
0939:  MOVF   01,W
093A:  ANDLW  C0
093B:  IORLW  07
093C:  MOVWF  01
....................    enable_interrupts(INT_TIMER0); 
093D:  BCF    03.5
093E:  BSF    0B.5
....................  
....................    setup_ccp1(CCP_CAPTURE_FE); 
093F:  BSF    42.2
0940:  MOVF   42,W
0941:  BSF    03.5
0942:  MOVWF  07
0943:  BCF    03.5
0944:  CLRF   17
0945:  MOVLW  04
0946:  MOVWF  17
....................    setup_timer_1(T1_INTERNAL); 
0947:  MOVLW  85
0948:  MOVWF  10
....................    enable_interrupts(INT_CCP1); 
0949:  BSF    03.5
094A:  BSF    0C.2
....................  
....................    setup_timer_2(T2_DIV_BY_16, 255, 16); // Overflow every 13.056us 
094B:  MOVLW  78
094C:  MOVWF  78
094D:  IORLW  06
094E:  BCF    03.5
094F:  MOVWF  12
0950:  MOVLW  FF
0951:  BSF    03.5
0952:  MOVWF  12
....................    iTimer2OverFlow = 7660;               // 100ms every command 
0953:  MOVLW  1D
0954:  BCF    03.5
0955:  MOVWF  40
0956:  MOVLW  EC
0957:  MOVWF  3F
....................    set_timer2(0);                        // init value 
0958:  CLRF   11
....................  
....................    setup_comparator(A0_VR_A1_VR); 
0959:  MOVLW  06
095A:  BSF    03.5
095B:  MOVWF  1C
095C:  MOVF   05,W
095D:  IORLW  03
095E:  MOVWF  05
095F:  MOVLW  10
0960:  MOVWF  77
0961:  DECFSZ 77,F
0962:  GOTO   161
0963:  NOP
0964:  MOVF   1C,W
0965:  BCF    03.5
0966:  BCF    0D.6
....................    setup_vref(VREF_HIGH | 5); 
0967:  MOVLW  85
0968:  BSF    03.5
0969:  MOVWF  1D
....................    enable_interrupts(INT_COMP); 
096A:  BSF    0D.6
....................  
....................    enable_interrupts(GLOBAL); 
096B:  MOVLW  C0
096C:  BCF    03.5
096D:  IORWF  0B,F
....................  
....................    checkSafetyFirst(10000000); // 2sec 
096E:  CLRF   46
096F:  MOVLW  98
0970:  MOVWF  45
0971:  MOVLW  96
0972:  MOVWF  44
0973:  MOVLW  80
0974:  MOVWF  43
0975:  BCF    0A.3
0976:  GOTO   57A
0977:  BSF    0A.3
....................  
....................    starter(); 
0978:  BCF    0A.3
0979:  GOTO   5EF
097A:  BSF    0A.3
....................  
....................    while (TRUE) 
....................    { 
....................       RingTheBell(); 
097B:  BCF    0A.3
097C:  GOTO   689
097D:  BSF    0A.3
097E:  GOTO   17B
....................    } 
.................... } 
097F:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
