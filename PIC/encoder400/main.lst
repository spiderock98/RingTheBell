CCS PCM C Compiler, Version 5.025, 31658               23-Apr-20 00:31

               Filename:   D:\Desktop\RingTheBell\PIC\encoder400\main.lst

               ROM used:   2311 words (28%)
                           Largest free fragment is 2048
               RAM used:   38 (10%) at main() level
                           79 (21%) worst case
               Stack used: 3 locations (2 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  08
0001:  MOVWF  0A
0002:  GOTO   000
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.4
0018:  GOTO   01B
0019:  BTFSC  0B.1
001A:  GOTO   03C
001B:  MOVLW  8C
001C:  MOVWF  04
001D:  BTFSS  00.1
001E:  GOTO   021
001F:  BTFSC  0C.1
0020:  GOTO   03F
0021:  MOVLW  8C
0022:  MOVWF  04
0023:  BTFSS  00.2
0024:  GOTO   027
0025:  BTFSC  0C.2
0026:  GOTO   042
0027:  BTFSS  0B.5
0028:  GOTO   02B
0029:  BTFSC  0B.2
002A:  GOTO   045
002B:  MOVF   22,W
002C:  MOVWF  04
002D:  MOVF   23,W
002E:  MOVWF  77
002F:  MOVF   24,W
0030:  MOVWF  78
0031:  MOVF   25,W
0032:  MOVWF  79
0033:  MOVF   26,W
0034:  MOVWF  7A
0035:  MOVF   20,W
0036:  MOVWF  0A
0037:  SWAPF  21,W
0038:  MOVWF  03
0039:  SWAPF  7F,F
003A:  SWAPF  7F,W
003B:  RETFIE
003C:  BCF    0A.3
003D:  BCF    0A.4
003E:  GOTO   048
003F:  BCF    0A.3
0040:  BCF    0A.4
0041:  GOTO   074
0042:  BCF    0A.3
0043:  BCF    0A.4
0044:  GOTO   0E1
0045:  BCF    0A.3
0046:  BCF    0A.4
0047:  GOTO   05E
.................... #include <main.h> 
.................... // #include <16F877A.h> 
.................... #include <16F887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
*
0094:  MOVF   65,W
0095:  XORWF  67,W
0096:  ANDLW  80
0097:  MOVWF  69
0098:  BTFSS  65.7
0099:  GOTO   09F
009A:  COMF   64,F
009B:  COMF   65,F
009C:  INCF   64,F
009D:  BTFSC  03.2
009E:  INCF   65,F
009F:  BTFSS  67.7
00A0:  GOTO   0A6
00A1:  COMF   66,F
00A2:  COMF   67,F
00A3:  INCF   66,F
00A4:  BTFSC  03.2
00A5:  INCF   67,F
00A6:  MOVLW  10
00A7:  MOVWF  68
00A8:  CLRF   77
00A9:  CLRF   7A
00AA:  RRF    65,F
00AB:  RRF    64,F
00AC:  BTFSS  03.0
00AD:  GOTO   0B4
00AE:  MOVF   66,W
00AF:  ADDWF  77,F
00B0:  BTFSC  03.0
00B1:  INCF   7A,F
00B2:  MOVF   67,W
00B3:  ADDWF  7A,F
00B4:  RRF    7A,F
00B5:  RRF    77,F
00B6:  RRF    79,F
00B7:  RRF    78,F
00B8:  DECFSZ 68,F
00B9:  GOTO   0AA
00BA:  BTFSS  69.7
00BB:  GOTO   0C1
00BC:  COMF   78,F
00BD:  COMF   79,F
00BE:  INCF   78,F
00BF:  BTFSC  03.2
00C0:  INCF   79,F
*
00EF:  MOVLW  B6
00F0:  MOVWF  77
00F1:  CLRF   7A
00F2:  CLRF   79
00F3:  CLRF   78
00F4:  MOVF   3D,W
00F5:  IORWF  3E,W
00F6:  IORWF  3F,W
00F7:  IORWF  40,W
00F8:  BTFSS  03.2
00F9:  GOTO   0FC
00FA:  CLRF   77
00FB:  GOTO   109
00FC:  BCF    03.0
00FD:  BTFSC  78.7
00FE:  GOTO   108
00FF:  RLF    3D,F
0100:  RLF    3E,F
0101:  RLF    3F,F
0102:  RLF    40,F
0103:  RLF    7A,F
0104:  RLF    79,F
0105:  RLF    78,F
0106:  DECFSZ 77,F
0107:  GOTO   0FC
0108:  BCF    78.7
0109:  RETURN
010A:  MOVLW  80
010B:  BTFSC  03.1
010C:  XORWF  59,F
010D:  CLRF   5E
010E:  CLRF   5F
010F:  MOVF   55,W
0110:  MOVWF  5D
0111:  MOVF   59,W
0112:  XORWF  5D,F
0113:  MOVF   54,W
0114:  BTFSC  03.2
0115:  GOTO   1FA
0116:  MOVWF  5C
0117:  MOVWF  77
0118:  MOVF   58,W
0119:  BTFSC  03.2
011A:  GOTO   203
011B:  SUBWF  5C,F
011C:  BTFSC  03.2
011D:  GOTO   19F
011E:  BTFSS  03.0
011F:  GOTO   15D
0120:  MOVF   59,W
0121:  MOVWF  62
0122:  BSF    62.7
0123:  MOVF   5A,W
0124:  MOVWF  61
0125:  MOVF   5B,W
0126:  MOVWF  60
0127:  CLRF   5F
0128:  BCF    03.0
0129:  RRF    62,F
012A:  RRF    61,F
012B:  RRF    60,F
012C:  RRF    5F,F
012D:  DECFSZ 5C,F
012E:  GOTO   127
012F:  BTFSS  5D.7
0130:  GOTO   134
0131:  BSF    5E.0
0132:  GOTO   217
0133:  BCF    5E.0
0134:  BCF    5C.0
0135:  BSF    5E.4
0136:  MOVLW  57
0137:  MOVWF  04
0138:  BCF    03.7
0139:  GOTO   22C
013A:  BCF    5E.4
013B:  BTFSC  5D.7
013C:  GOTO   147
013D:  BTFSS  5C.0
013E:  GOTO   152
013F:  RRF    62,F
0140:  RRF    61,F
0141:  RRF    60,F
0142:  RRF    5F,F
0143:  INCF   77,F
0144:  BTFSC  03.2
0145:  GOTO   212
0146:  GOTO   152
0147:  BTFSC  62.7
0148:  GOTO   155
0149:  BCF    03.0
014A:  RLF    5F,F
014B:  RLF    60,F
014C:  RLF    61,F
014D:  RLF    62,F
014E:  DECF   77,F
014F:  BTFSC  03.2
0150:  GOTO   212
0151:  GOTO   147
0152:  BSF    5E.6
0153:  GOTO   1BF
0154:  BCF    5E.6
0155:  MOVF   55,W
0156:  MOVWF  5D
0157:  BTFSS  5D.7
0158:  GOTO   15B
0159:  BSF    62.7
015A:  GOTO   20B
015B:  BCF    62.7
015C:  GOTO   20B
015D:  MOVF   58,W
015E:  MOVWF  5C
015F:  MOVWF  77
0160:  MOVF   54,W
0161:  SUBWF  5C,F
0162:  MOVF   55,W
0163:  MOVWF  62
0164:  BSF    62.7
0165:  MOVF   56,W
0166:  MOVWF  61
0167:  MOVF   57,W
0168:  MOVWF  60
0169:  CLRF   5F
016A:  BCF    03.0
016B:  RRF    62,F
016C:  RRF    61,F
016D:  RRF    60,F
016E:  RRF    5F,F
016F:  DECFSZ 5C,F
0170:  GOTO   169
0171:  BTFSS  5D.7
0172:  GOTO   176
0173:  BSF    5E.1
0174:  GOTO   217
0175:  BCF    5E.1
0176:  BCF    5C.0
0177:  BSF    5E.5
0178:  MOVLW  5B
0179:  MOVWF  04
017A:  BCF    03.7
017B:  GOTO   22C
017C:  BCF    5E.5
017D:  BTFSC  5D.7
017E:  GOTO   189
017F:  BTFSS  5C.0
0180:  GOTO   194
0181:  RRF    62,F
0182:  RRF    61,F
0183:  RRF    60,F
0184:  RRF    5F,F
0185:  INCF   77,F
0186:  BTFSC  03.2
0187:  GOTO   212
0188:  GOTO   194
0189:  BTFSC  62.7
018A:  GOTO   197
018B:  BCF    03.0
018C:  RLF    5F,F
018D:  RLF    60,F
018E:  RLF    61,F
018F:  RLF    62,F
0190:  DECF   77,F
0191:  BTFSC  03.2
0192:  GOTO   212
0193:  GOTO   189
0194:  BSF    5E.7
0195:  GOTO   1BF
0196:  BCF    5E.7
0197:  MOVF   59,W
0198:  MOVWF  5D
0199:  BTFSS  5D.7
019A:  GOTO   19D
019B:  BSF    62.7
019C:  GOTO   20B
019D:  BCF    62.7
019E:  GOTO   20B
019F:  MOVF   59,W
01A0:  MOVWF  62
01A1:  BSF    62.7
01A2:  MOVF   5A,W
01A3:  MOVWF  61
01A4:  MOVF   5B,W
01A5:  MOVWF  60
01A6:  BTFSS  5D.7
01A7:  GOTO   1AC
01A8:  BCF    62.7
01A9:  BSF    5E.2
01AA:  GOTO   217
01AB:  BCF    5E.2
01AC:  CLRF   5F
01AD:  BCF    5C.0
01AE:  MOVLW  57
01AF:  MOVWF  04
01B0:  BCF    03.7
01B1:  GOTO   22C
01B2:  BTFSC  5D.7
01B3:  GOTO   1D5
01B4:  MOVF   55,W
01B5:  MOVWF  5D
01B6:  BTFSS  5C.0
01B7:  GOTO   1BF
01B8:  RRF    62,F
01B9:  RRF    61,F
01BA:  RRF    60,F
01BB:  RRF    5F,F
01BC:  INCF   77,F
01BD:  BTFSC  03.2
01BE:  GOTO   212
01BF:  BTFSS  5F.7
01C0:  GOTO   1D0
01C1:  INCF   60,F
01C2:  BTFSS  03.2
01C3:  GOTO   1D0
01C4:  INCF   61,F
01C5:  BTFSS  03.2
01C6:  GOTO   1D0
01C7:  INCF   62,F
01C8:  BTFSS  03.2
01C9:  GOTO   1D0
01CA:  RRF    62,F
01CB:  RRF    61,F
01CC:  RRF    60,F
01CD:  INCF   77,F
01CE:  BTFSC  03.2
01CF:  GOTO   212
01D0:  BTFSC  5E.6
01D1:  GOTO   154
01D2:  BTFSC  5E.7
01D3:  GOTO   196
01D4:  GOTO   1F4
01D5:  MOVLW  80
01D6:  XORWF  62,F
01D7:  BTFSS  62.7
01D8:  GOTO   1DD
01D9:  GOTO   217
01DA:  MOVF   59,W
01DB:  MOVWF  5D
01DC:  GOTO   1EA
01DD:  MOVF   55,W
01DE:  MOVWF  5D
01DF:  MOVF   62,F
01E0:  BTFSS  03.2
01E1:  GOTO   1EA
01E2:  MOVF   61,F
01E3:  BTFSS  03.2
01E4:  GOTO   1EA
01E5:  MOVF   60,F
01E6:  BTFSS  03.2
01E7:  GOTO   1EA
01E8:  CLRF   77
01E9:  GOTO   20B
01EA:  BTFSC  62.7
01EB:  GOTO   1F4
01EC:  BCF    03.0
01ED:  RLF    5F,F
01EE:  RLF    60,F
01EF:  RLF    61,F
01F0:  RLF    62,F
01F1:  DECFSZ 77,F
01F2:  GOTO   1EA
01F3:  GOTO   212
01F4:  BTFSS  5D.7
01F5:  GOTO   1F8
01F6:  BSF    62.7
01F7:  GOTO   20B
01F8:  BCF    62.7
01F9:  GOTO   20B
01FA:  MOVF   58,W
01FB:  MOVWF  77
01FC:  MOVF   59,W
01FD:  MOVWF  62
01FE:  MOVF   5A,W
01FF:  MOVWF  61
0200:  MOVF   5B,W
0201:  MOVWF  60
0202:  GOTO   20B
0203:  MOVF   54,W
0204:  MOVWF  77
0205:  MOVF   55,W
0206:  MOVWF  62
0207:  MOVF   56,W
0208:  MOVWF  61
0209:  MOVF   57,W
020A:  MOVWF  60
020B:  MOVF   62,W
020C:  MOVWF  78
020D:  MOVF   61,W
020E:  MOVWF  79
020F:  MOVF   60,W
0210:  MOVWF  7A
0211:  GOTO   24A
0212:  CLRF   77
0213:  CLRF   78
0214:  CLRF   79
0215:  CLRF   7A
0216:  GOTO   24A
0217:  CLRF   5F
0218:  COMF   60,F
0219:  COMF   61,F
021A:  COMF   62,F
021B:  COMF   5F,F
021C:  INCF   5F,F
021D:  BTFSS  03.2
021E:  GOTO   225
021F:  INCF   60,F
0220:  BTFSS  03.2
0221:  GOTO   225
0222:  INCF   61,F
0223:  BTFSC  03.2
0224:  INCF   62,F
0225:  BTFSC  5E.0
0226:  GOTO   133
0227:  BTFSC  5E.1
0228:  GOTO   175
0229:  BTFSC  5E.2
022A:  GOTO   1AB
022B:  GOTO   1DA
022C:  MOVF   00,W
022D:  ADDWF  60,F
022E:  BTFSS  03.0
022F:  GOTO   236
0230:  INCF   61,F
0231:  BTFSS  03.2
0232:  GOTO   236
0233:  INCF   62,F
0234:  BTFSC  03.2
0235:  BSF    5C.0
0236:  DECF   04,F
0237:  MOVF   00,W
0238:  ADDWF  61,F
0239:  BTFSS  03.0
023A:  GOTO   23E
023B:  INCF   62,F
023C:  BTFSC  03.2
023D:  BSF    5C.0
023E:  DECF   04,F
023F:  MOVF   00,W
0240:  BTFSS  00.7
0241:  XORLW  80
0242:  ADDWF  62,F
0243:  BTFSC  03.0
0244:  BSF    5C.0
0245:  BTFSC  5E.4
0246:  GOTO   13A
0247:  BTFSC  5E.5
0248:  GOTO   17C
0249:  GOTO   1B2
024A:  RETURN
024B:  MOVF   41,W
024C:  BTFSC  03.2
024D:  GOTO   310
024E:  MOVWF  4D
024F:  MOVF   45,W
0250:  BTFSC  03.2
0251:  GOTO   310
0252:  SUBWF  4D,F
0253:  BTFSS  03.0
0254:  GOTO   25A
0255:  MOVLW  7F
0256:  ADDWF  4D,F
0257:  BTFSC  03.0
0258:  GOTO   310
0259:  GOTO   260
025A:  MOVLW  81
025B:  SUBWF  4D,F
025C:  BTFSS  03.0
025D:  GOTO   310
025E:  BTFSC  03.2
025F:  GOTO   310
0260:  MOVF   4D,W
0261:  MOVWF  77
0262:  CLRF   78
0263:  CLRF   79
0264:  CLRF   7A
0265:  CLRF   4C
0266:  MOVF   42,W
0267:  MOVWF  4B
0268:  BSF    4B.7
0269:  MOVF   43,W
026A:  MOVWF  4A
026B:  MOVF   44,W
026C:  MOVWF  49
026D:  MOVLW  19
026E:  MOVWF  4D
026F:  MOVF   48,W
0270:  SUBWF  49,F
0271:  BTFSC  03.0
0272:  GOTO   283
0273:  MOVLW  01
0274:  SUBWF  4A,F
0275:  BTFSC  03.0
0276:  GOTO   283
0277:  SUBWF  4B,F
0278:  BTFSC  03.0
0279:  GOTO   283
027A:  SUBWF  4C,F
027B:  BTFSC  03.0
027C:  GOTO   283
027D:  INCF   4C,F
027E:  INCF   4B,F
027F:  INCF   4A,F
0280:  MOVF   48,W
0281:  ADDWF  49,F
0282:  GOTO   2B5
0283:  MOVF   47,W
0284:  SUBWF  4A,F
0285:  BTFSC  03.0
0286:  GOTO   29E
0287:  MOVLW  01
0288:  SUBWF  4B,F
0289:  BTFSC  03.0
028A:  GOTO   29E
028B:  SUBWF  4C,F
028C:  BTFSC  03.0
028D:  GOTO   29E
028E:  INCF   4C,F
028F:  INCF   4B,F
0290:  MOVF   47,W
0291:  ADDWF  4A,F
0292:  MOVF   48,W
0293:  ADDWF  49,F
0294:  BTFSS  03.0
0295:  GOTO   2B5
0296:  INCF   4A,F
0297:  BTFSS  03.2
0298:  GOTO   2B5
0299:  INCF   4B,F
029A:  BTFSS  03.2
029B:  GOTO   2B5
029C:  INCF   4C,F
029D:  GOTO   2B5
029E:  MOVF   46,W
029F:  IORLW  80
02A0:  SUBWF  4B,F
02A1:  BTFSC  03.0
02A2:  GOTO   2B4
02A3:  MOVLW  01
02A4:  SUBWF  4C,F
02A5:  BTFSC  03.0
02A6:  GOTO   2B4
02A7:  INCF   4C,F
02A8:  MOVF   46,W
02A9:  IORLW  80
02AA:  ADDWF  4B,F
02AB:  MOVF   47,W
02AC:  ADDWF  4A,F
02AD:  BTFSS  03.0
02AE:  GOTO   292
02AF:  INCF   4B,F
02B0:  BTFSS  03.2
02B1:  GOTO   292
02B2:  INCF   4C,F
02B3:  GOTO   292
02B4:  BSF    7A.0
02B5:  DECFSZ 4D,F
02B6:  GOTO   2B8
02B7:  GOTO   2C3
02B8:  BCF    03.0
02B9:  RLF    49,F
02BA:  RLF    4A,F
02BB:  RLF    4B,F
02BC:  RLF    4C,F
02BD:  BCF    03.0
02BE:  RLF    7A,F
02BF:  RLF    79,F
02C0:  RLF    78,F
02C1:  RLF    4E,F
02C2:  GOTO   26F
02C3:  BTFSS  4E.0
02C4:  GOTO   2CB
02C5:  BCF    03.0
02C6:  RRF    78,F
02C7:  RRF    79,F
02C8:  RRF    7A,F
02C9:  RRF    4E,F
02CA:  GOTO   2CE
02CB:  DECF   77,F
02CC:  BTFSC  03.2
02CD:  GOTO   310
02CE:  BTFSC  4E.7
02CF:  GOTO   2F7
02D0:  BCF    03.0
02D1:  RLF    49,F
02D2:  RLF    4A,F
02D3:  RLF    4B,F
02D4:  RLF    4C,F
02D5:  MOVF   48,W
02D6:  SUBWF  49,F
02D7:  BTFSC  03.0
02D8:  GOTO   2E3
02D9:  MOVLW  01
02DA:  SUBWF  4A,F
02DB:  BTFSC  03.0
02DC:  GOTO   2E3
02DD:  SUBWF  4B,F
02DE:  BTFSC  03.0
02DF:  GOTO   2E3
02E0:  SUBWF  4C,F
02E1:  BTFSS  03.0
02E2:  GOTO   306
02E3:  MOVF   47,W
02E4:  SUBWF  4A,F
02E5:  BTFSC  03.0
02E6:  GOTO   2EE
02E7:  MOVLW  01
02E8:  SUBWF  4B,F
02E9:  BTFSC  03.0
02EA:  GOTO   2EE
02EB:  SUBWF  4C,F
02EC:  BTFSS  03.0
02ED:  GOTO   306
02EE:  MOVF   46,W
02EF:  IORLW  80
02F0:  SUBWF  4B,F
02F1:  BTFSC  03.0
02F2:  GOTO   2F7
02F3:  MOVLW  01
02F4:  SUBWF  4C,F
02F5:  BTFSS  03.0
02F6:  GOTO   306
02F7:  INCF   7A,F
02F8:  BTFSS  03.2
02F9:  GOTO   306
02FA:  INCF   79,F
02FB:  BTFSS  03.2
02FC:  GOTO   306
02FD:  INCF   78,F
02FE:  BTFSS  03.2
02FF:  GOTO   306
0300:  INCF   77,F
0301:  BTFSC  03.2
0302:  GOTO   310
0303:  RRF    78,F
0304:  RRF    79,F
0305:  RRF    7A,F
0306:  MOVF   42,W
0307:  MOVWF  4D
0308:  MOVF   46,W
0309:  XORWF  4D,F
030A:  BTFSS  4D.7
030B:  GOTO   30E
030C:  BSF    78.7
030D:  GOTO   314
030E:  BCF    78.7
030F:  GOTO   314
0310:  CLRF   77
0311:  CLRF   78
0312:  CLRF   79
0313:  CLRF   7A
0314:  RETURN
0315:  MOVF   51,W
0316:  MOVWF  58
0317:  MOVF   55,W
0318:  XORWF  58,F
0319:  BTFSS  58.7
031A:  GOTO   320
031B:  BCF    03.2
031C:  BCF    03.0
031D:  BTFSC  51.7
031E:  BSF    03.0
031F:  GOTO   353
0320:  MOVF   51,W
0321:  MOVWF  58
0322:  MOVF   54,W
0323:  MOVWF  59
0324:  MOVF   50,W
0325:  SUBWF  59,F
0326:  BTFSC  03.2
0327:  GOTO   32E
0328:  BTFSS  58.7
0329:  GOTO   353
032A:  MOVF   03,W
032B:  XORLW  01
032C:  MOVWF  03
032D:  GOTO   353
032E:  MOVF   55,W
032F:  MOVWF  59
0330:  MOVF   51,W
0331:  SUBWF  59,F
0332:  BTFSC  03.2
0333:  GOTO   33A
0334:  BTFSS  58.7
0335:  GOTO   353
0336:  MOVF   03,W
0337:  XORLW  01
0338:  MOVWF  03
0339:  GOTO   353
033A:  MOVF   56,W
033B:  MOVWF  59
033C:  MOVF   52,W
033D:  SUBWF  59,F
033E:  BTFSC  03.2
033F:  GOTO   346
0340:  BTFSS  58.7
0341:  GOTO   353
0342:  MOVF   03,W
0343:  XORLW  01
0344:  MOVWF  03
0345:  GOTO   353
0346:  MOVF   57,W
0347:  MOVWF  59
0348:  MOVF   53,W
0349:  SUBWF  59,F
034A:  BTFSC  03.2
034B:  GOTO   352
034C:  BTFSS  58.7
034D:  GOTO   353
034E:  MOVF   03,W
034F:  XORLW  01
0350:  MOVWF  03
0351:  GOTO   353
0352:  BCF    03.0
0353:  RETURN
0354:  MOVLW  8E
0355:  MOVWF  77
0356:  MOVF   50,W
0357:  SUBWF  77,F
0358:  MOVF   51,W
0359:  MOVWF  79
035A:  MOVF   52,W
035B:  MOVWF  78
035C:  BSF    79.7
035D:  MOVF   77,F
035E:  BTFSC  03.2
035F:  GOTO   36B
0360:  BCF    03.0
0361:  MOVF   79,F
0362:  BTFSS  03.2
0363:  GOTO   367
0364:  MOVF   78,F
0365:  BTFSC  03.2
0366:  GOTO   36B
0367:  RRF    79,F
0368:  RRF    78,F
0369:  DECFSZ 77,F
036A:  GOTO   360
036B:  BTFSS  51.7
036C:  GOTO   372
036D:  COMF   78,F
036E:  COMF   79,F
036F:  INCF   78,F
0370:  BTFSC  03.2
0371:  INCF   79,F
0372:  RETURN
0373:  MOVLW  8E
0374:  MOVWF  77
0375:  MOVF   55,W
0376:  MOVWF  78
0377:  MOVF   54,W
0378:  MOVWF  79
0379:  CLRF   7A
037A:  MOVF   78,F
037B:  BTFSS  03.2
037C:  GOTO   387
037D:  MOVF   79,W
037E:  MOVWF  78
037F:  CLRF   79
0380:  MOVLW  08
0381:  SUBWF  77,F
0382:  MOVF   78,F
0383:  BTFSS  03.2
0384:  GOTO   387
0385:  CLRF   77
0386:  GOTO   38F
0387:  BCF    03.0
0388:  BTFSC  78.7
0389:  GOTO   38E
038A:  RLF    79,F
038B:  RLF    78,F
038C:  DECF   77,F
038D:  GOTO   387
038E:  BCF    78.7
038F:  RETURN
0390:  MOVF   50,W
0391:  BTFSC  03.2
0392:  GOTO   400
0393:  MOVWF  58
0394:  MOVF   54,W
0395:  BTFSC  03.2
0396:  GOTO   400
0397:  ADDWF  58,F
0398:  BTFSC  03.0
0399:  GOTO   3A1
039A:  MOVLW  7F
039B:  SUBWF  58,F
039C:  BTFSS  03.0
039D:  GOTO   400
039E:  BTFSC  03.2
039F:  GOTO   400
03A0:  GOTO   3A5
03A1:  MOVLW  81
03A2:  ADDWF  58,F
03A3:  BTFSC  03.0
03A4:  GOTO   400
03A5:  MOVF   58,W
03A6:  MOVWF  77
03A7:  CLRF   78
03A8:  CLRF   79
03A9:  CLRF   7A
03AA:  MOVF   51,W
03AB:  MOVWF  5C
03AC:  BSF    5C.7
03AD:  MOVF   52,W
03AE:  MOVWF  5B
03AF:  MOVF   53,W
03B0:  MOVWF  5A
03B1:  MOVLW  18
03B2:  MOVWF  58
03B3:  CLRF   59
03B4:  BTFSS  5A.0
03B5:  GOTO   3CE
03B6:  MOVF   57,W
03B7:  ADDWF  7A,F
03B8:  BTFSS  03.0
03B9:  GOTO   3C0
03BA:  INCF   79,F
03BB:  BTFSS  03.2
03BC:  GOTO   3C0
03BD:  INCF   78,F
03BE:  BTFSC  03.2
03BF:  BSF    59.7
03C0:  MOVF   56,W
03C1:  ADDWF  79,F
03C2:  BTFSS  03.0
03C3:  GOTO   3C7
03C4:  INCF   78,F
03C5:  BTFSC  03.2
03C6:  BSF    59.7
03C7:  MOVF   55,W
03C8:  MOVWF  52
03C9:  BSF    52.7
03CA:  MOVF   52,W
03CB:  ADDWF  78,F
03CC:  BTFSC  03.0
03CD:  BSF    59.7
03CE:  RLF    59,F
03CF:  RRF    78,F
03D0:  RRF    79,F
03D1:  RRF    7A,F
03D2:  RRF    5C,F
03D3:  RRF    5B,F
03D4:  RRF    5A,F
03D5:  BCF    03.0
03D6:  DECFSZ 58,F
03D7:  GOTO   3B3
03D8:  MOVLW  01
03D9:  ADDWF  77,F
03DA:  BTFSC  03.0
03DB:  GOTO   400
03DC:  BTFSC  78.7
03DD:  GOTO   3E5
03DE:  RLF    5C,F
03DF:  RLF    7A,F
03E0:  RLF    79,F
03E1:  RLF    78,F
03E2:  DECF   77,F
03E3:  BTFSC  03.2
03E4:  GOTO   400
03E5:  BTFSS  5C.7
03E6:  GOTO   3F6
03E7:  INCF   7A,F
03E8:  BTFSS  03.2
03E9:  GOTO   3F6
03EA:  INCF   79,F
03EB:  BTFSS  03.2
03EC:  GOTO   3F6
03ED:  INCF   78,F
03EE:  BTFSS  03.2
03EF:  GOTO   3F6
03F0:  RRF    78,F
03F1:  RRF    79,F
03F2:  RRF    7A,F
03F3:  INCF   77,F
03F4:  BTFSC  03.2
03F5:  GOTO   400
03F6:  MOVF   51,W
03F7:  MOVWF  59
03F8:  MOVF   55,W
03F9:  XORWF  59,F
03FA:  BTFSS  59.7
03FB:  GOTO   3FE
03FC:  BSF    78.7
03FD:  GOTO   404
03FE:  BCF    78.7
03FF:  GOTO   404
0400:  CLRF   77
0401:  CLRF   78
0402:  CLRF   79
0403:  CLRF   7A
0404:  RETURN
*
0578:  MOVF   3D,W
0579:  SUBLW  B6
057A:  MOVWF  3D
057B:  CLRF   7A
057C:  MOVF   3E,W
057D:  MOVWF  41
057E:  BSF    3E.7
057F:  BCF    03.0
0580:  RRF    3E,F
0581:  RRF    3F,F
0582:  RRF    40,F
0583:  RRF    7A,F
0584:  RRF    79,F
0585:  RRF    78,F
0586:  RRF    77,F
0587:  DECFSZ 3D,F
0588:  GOTO   57F
0589:  BTFSS  41.7
058A:  GOTO   596
058B:  COMF   77,F
058C:  COMF   78,F
058D:  COMF   79,F
058E:  COMF   7A,F
058F:  INCF   77,F
0590:  BTFSC  03.2
0591:  INCF   78,F
0592:  BTFSC  03.2
0593:  INCF   79,F
0594:  BTFSC  03.2
0595:  INCF   7A,F
0596:  RETURN
....................  
.................... #list 
....................  
.................... #include <def_16f877a.h> 
.................... //========================= Register Definitions ========================== 
.................... //-----Register Files------------------------------------------------------ 
.................... #byte INDF         =0x00 
.................... #byte TMR0         =0x01 
.................... #byte PCL          =0x02 
.................... #byte STATUS       =0x03 
.................... #byte FSR          =0x04 
.................... #byte PORTA    = 0x05 
.................... #byte PORTB    = 0x06 
.................... #byte PORTC    = 0x07 
.................... #byte PORTD    = 0x08 
.................... #byte PORTE    = 0x09 
.................... #byte PCLATH       =0x0A 
.................... #byte INTCON       =0x0B 
.................... #byte PIR1	   =0x0C 
.................... #byte PIR2	   =0x0D 
.................... #byte TMR1L	   =0x0E 
.................... #byte TMR1H        =0x0F 
.................... #byte T1CON        =0x10 
.................... #byte TMR2	   =0x11 
.................... #byte T2CON	   =0x12 
.................... #byte SSPBUF       =0x13 
.................... #byte SSPCON       =0x14 
.................... #byte CCPR1L       =0x15 
.................... #byte CCPR1H       =0x16 
.................... #byte CCP1CON      =0x17 
.................... #byte RCSTA        =0x18 
.................... #byte TXREG        =0x19 
.................... #byte RCREG        =0x1A 
.................... #byte CCPR2L       =0x1B 
.................... #byte CCPR2H       =0x1C 
.................... #byte CCP2CON      =0x1D 
.................... #byte ADRESH       =0x1E 
.................... #byte ADCON0	   =0x1F 
.................... #byte OPTION_REG   =0x81 
.................... //-------------- TRIS PORT ----------------------------- 
.................... #byte TRISA        =0x85 
.................... #byte TRISB	   =0x86 
.................... #byte TRISC	   =0x87 
.................... #byte TRISD        =0x88 
.................... #byte TRISE	   =0x89 
.................... #byte PIE1	   =0x8C 
.................... #byte PIE2	   =0x8D 
.................... #byte PCON	   =0x8E 
....................  
.................... #byte SSPCON2      =0x91 
.................... #byte PR2          =0x92 
.................... #byte SSPADD       =0x93 
.................... #byte SSPSTAT      =0x94 
....................  
.................... #byte TXSTA        =0x98 
.................... #byte SPBRG        =0x99 
....................  
.................... #byte ADRESL       =0x9E 
.................... #byte ADCON1       =0x9F 
....................  
.................... /*	bank 2 registers */ 
....................  
.................... #byte EEDATA	   =0x010C 
.................... #byte EEADR	   =0x010D 
.................... #byte EEDATH       =0x010E 
.................... #byte EEADRH       =0x010F 
....................  
.................... /*	bank 3 registers */ 
....................  
.................... #byte EECON1	   =0x018C 
.................... #byte EECON2	   =0x018D 
....................  
.................... //----- STATUS Bits -------------------------------------------------------- 
....................  
.................... // For Assembly Language - Note upper case 
.................... #define IRP 	7 
.................... #define RP1 	6 
.................... #define RP0 	5 
.................... #define NOT_TO 	4 
.................... #define NOT_PD 	3 
.................... #define Z 	2 
.................... #define DC 	1 
.................... #define C  	0 
....................  
.................... //---------------- TRIS BIT PORT-------------------------------------- 
.................... //------------------TRISA bits--------------------------- 
....................  
.................... #bit TRISA5     =0x85.5 
.................... #bit TRISA4     =0x85.4 
.................... #bit TRISA3     =0x85.3 
.................... #bit TRISA2     =0x85.2 
.................... #bit TRISA1     =0x85.1 
.................... #bit TRISA0     =0x85.0 
....................  
.................... //-----------------TRISB bits----------------------------- 
....................  
.................... #bit TRISB7     =0x86.7 
.................... #bit TRISB6     =0x86.6 
.................... #bit TRISB5     =0x86.5 
.................... #bit TRISB4     =0x86.4 
.................... #bit TRISB3     =0x86.3 
.................... #bit TRISB2     =0x86.2 
.................... #bit TRISB1     =0x86.1 
.................... #bit TRISB0     =0x86.0 
....................  
.................... //----------------TRISC bits------------------- 
....................  
.................... #bit TRISC7     =0x87.7 
.................... #bit TRISC6     =0x87.6 
.................... #bit TRISC5     =0x87.5 
.................... #bit TRISC4     =0x87.4 
.................... #bit TRISC3     =0x87.3 
.................... #bit TRISC2     =0x87.2 
.................... #bit TRISC1     =0x87.1 
.................... #bit TRISC0     =0x87.0 
.................... //------------------TRISD bit------------------ 
.................... #bit TRISD7     =0x88.7 
.................... #bit TRISD6     =0x88.6 
.................... #bit TRISD5     =0x88.5 
.................... #bit TRISD4     =0x88.4 
.................... #bit TRISD3     =0x88.3 
.................... #bit TRISD2     =0x88.2 
.................... #bit TRISD1     =0x88.1 
.................... #bit TRISD0     =0x88.0 
.................... //-------------TRISE bit---------------------- 
.................... #bit TRISE2     =0x89.2 
.................... #bit TRISE1     =0x89.1 
.................... #bit TRISE0     =0x89.0 
.................... //--------------------------------------------------------------------------- 
.................... //---------PORTA bits------------------ 
.................... #bit RA4			= 0x05.4 
.................... #bit RA3			= 0x05.3 
.................... #bit RA2			= 0x05.2 
.................... #bit RA1			= 0x05.1 
.................... #bit RA0			= 0x05.0 
.................... //---------PORTB bits------------------ 
.................... #bit RB7			= 0x06.7 
.................... #bit RB6			= 0x06.6 
.................... #bit RB5			= 0x06.5 
.................... #bit RB4			= 0x06.4 
.................... #bit RB3			= 0x06.3 
.................... #bit RB2			= 0x06.2 
.................... #bit RB1			= 0x06.1 
.................... #bit RB0			= 0x06.0 
.................... //---------PORTC bits------------------ 
.................... #bit RC7			= 0x07.7 
.................... #bit RC6			= 0x07.6 
.................... #bit RC5			= 0x07.5 
.................... #bit RC4			= 0x07.4 
.................... #bit RC3			= 0x07.3 
.................... #bit RC2			= 0x07.2 
.................... #bit RC1			= 0x07.1 
.................... #bit RC0			= 0x07.0 
.................... //---------PORTD bits------------------ 
.................... #bit RD7			= 0x08.7 
.................... #bit RD6			= 0x08.6 
.................... #bit RD5			= 0x08.5 
.................... #bit RD4			= 0x08.4 
.................... #bit RD3			= 0x08.3 
.................... #bit RD2			= 0x08.2 
.................... #bit RD1			= 0x08.1 
.................... #bit RD0			= 0x08.0 
.................... //---------PORTE bits------------------ 
.................... #bit RE2			= 0x09.2 
.................... #bit RE1			= 0x09.1 
.................... #bit RE0			= 0x09.0 
....................  
.................... //----- INTCON ------------------------------------------------------------- 
....................  
.................... #bit	GIE      = 0x0b.7 
.................... #bit	PEIE     = 0x0b.6 
.................... #bit	TMR0IE   = 0x0b.5 
.................... #bit	INTE     = 0x0b.4 
.................... #bit	RBIE     = 0x0b.3 
.................... #bit	TMR0IF   = 0x0b.2 
.................... #bit	INTF     = 0x0b.1 
.................... #bit	RBIF     = 0x0b.0 
....................  
.................... //----- PIR1 --------------------------------------------------------------- 
....................  
.................... #bit pspif     = 0x0c.7 
.................... #bit adif      = 0x0c.6 
.................... #bit rcif      = 0x0c.5 
.................... #bit txif      = 0x0c.4 
.................... #bit sspif     = 0x0c.3 
.................... #bit ccp1if    = 0x0c.2 
.................... #bit tmr2if    = 0x0c.1 
.................... #bit tmr1if    = 0x0c.0 
....................  
.................... //----- PIR2 --------------------------------------------------------------- 
....................  
.................... #bit cmif      = 0x0d.6 
.................... #bit eeif      = 0x0d.4 
.................... #bit bclif     = 0x0d.3 
.................... #bit ccp2if    = 0x0d.0 
....................  
.................... //----- PIE1 --------------------------------------------------------------- 
....................  
.................... #bit pspie     = 0x8c.7 
.................... #bit adie      = 0x8c.6 
.................... #bit rcie      = 0x8c.5 
.................... #bit txie      = 0x8c.4 
.................... #bit sspie     = 0x8c.3 
.................... #bit ccp1ie    = 0x8c.2 
.................... #bit tmr2ie    = 0x8c.1 
.................... #bit tmr1ie    = 0x8c.0 
....................  
.................... //----- PIE2 --------------------------------------------------------------- 
....................  
.................... #bit cmie      = 0x8d.6 
.................... #bit eeie      = 0x8d.4 
.................... #bit bclie     = 0x8d.3 
.................... #bit ccp2ie    = 0x8d.0 
.................... //----- T1CON Bits --------------------------------------------------------- 
.................... #bit T1CKPS1    =0x10.5 
.................... #bit T1CKPS0    =0x10.4 
.................... #bit T1OSCEN    =0x10.3 
.................... #bit T1SYNC     =0x10.2 
.................... #bit TMR1CS     =0x10.1 
.................... #bit TMR1ON     =0x10.0 
....................  
.................... //----- T2CON Bits --------------------------------------------------------- 
.................... #bit TOUTPS3    =0x12.6 
.................... #bit TOUTPS2    =0x12.5 
.................... #bit TOUTPS1    =0x12.4 
.................... #bit TOUTPS0    =0x12.3 
.................... #bit TMR2ON     =0x12.2 
.................... #bit T2CKPS1    =0x12.1 
.................... #bit T2CKPS0    =0x12.0 
....................  
.................... //-------------SSPCON bits-------------------------- 
.................... #bit WCOL       =0x14.7 
.................... #bit SSPOV      =0x14.6 
.................... #bit SSPEN      =0x14.5 
.................... #bit CKP        =0x14.4 
.................... #bit SSPM3      =0x14.3 
.................... #bit SSPM2      =0x14.2 
.................... #bit SSPM1      =0x14.1 
.................... #bit SSPM0      =0x14.0 
....................  
.................... //---------------CCP1CON bits-------- 
.................... #bit CCP1X      =0x17.5 
.................... #bit CCP1Y      =0x17.4 
.................... #bit CCP1M3     =0x17.3 
.................... #bit CCP1M2     =0x17.2 
.................... #bit CCP1M1     =0x17.1 
.................... #bit CCP1M0     =0x17.0 
....................  
.................... //---------------RCSTA bits------------------- 
....................  
.................... #bit SPEN       =0x18.7 
.................... #bit RX9        =0x18.6 
.................... #bit SREN       =0x18.5 
.................... #bit CREN       =0x18.4 
.................... #bit ADDEN      =0x18.3 
.................... #bit FERR       =0x18.2 
.................... #bit OERR       =0x18.1 
.................... #bit RX9D       =0x18.0 
....................  
.................... //-----------------------CCP2CON bits---------- 
....................  
.................... #bit CCP2X      =0x1D.5 
.................... #bit CCP2Y      =0x1D.4 
.................... #bit CCP2M3     =0x1D.3 
.................... #bit CCP2M2     =0x1D.2 
.................... #bit CCP2M1     =0x1D.1 
.................... #bit CCP2M0     =0x1D.0 
....................  
.................... //----- ADCON0 Bits -------------------------------------------------------- 
.................... #bit ADCS1      =0x1F.7 
.................... #bit ADCS0      =0x1F.6 
.................... #bit CHS2       =0x1F.5 
.................... #bit CHS1       =0x1F.4 
.................... #bit CHS0       =0x1F.3 
.................... #bit ADGO       =0x1F.2 
.................... #bit ADON       =0x1F.0 
....................  
.................... //----- OPTION_reg Bits -------------------------------------------------------- 
....................  
.................... #bit RBPU       =0x81.7 
.................... #bit INTEDG     =0x81.6 
.................... #bit T0CS       =0x81.5 
.................... #bit T0SE       =0x81.4 
.................... #bit PSA        =0x81.3 
.................... #bit PS2        =0x81.2 
.................... #bit PS1        =0x81.1 
.................... #bit PS0        =0x81.0 
.................... //----- PCON Bits ---------------------------------------------------------- 
....................  
.................... #bit POR        =0x8E.1 
.................... #bit BOD        =0x8E.0 
....................  
.................... //-----------SSPCON2 bits--------------------------------------------- 
....................  
.................... #bit GCEN       =0x91.7 
.................... #bit ACKSTAT    =0x91.6 
.................... #bit ACKDT      =0x91.5 
.................... #bit ACKEN      =0x91.4 
.................... #bit RCEN       =0x91.3 
.................... #bit PEN        =0x91.2 
.................... #bit RSEN       =0x91.1 
.................... #bit SEN        =0x91.0 
....................  
.................... //---------------------SSPSTAT bits------------------------ 
....................  
.................... #bit STAT_SMP   =0x94.7 
.................... #bit STAT_CKE   =0x94.6 
.................... #bit STAT_DA    =0x94.5 
.................... #bit STAT_P     =0x94.4 
.................... #bit STAT_S     =0x94.3 
.................... #bit STAT_RW    =0x94.2 
.................... #bit STAT_UA    =0x94.1 
.................... #bit STAT_BF    =0x94.0 
....................  
.................... //----------------TXSTA bits----------------- 
....................  
.................... #bit CSRC       =0x98.7 
.................... #bit TX9        =0x98.6 
.................... #bit TXEN       =0x98.5 
.................... #bit SYNC       =0x98.4 
.................... #bit BRGH       =0x98.2 
.................... #bit TRMT       =0x98.1 
.................... #bit TX9D       =0x98.0 
....................  
.................... //--------------ADCON1 bits--------------- 
....................  
.................... #bit ADFM       =0x9F.7 
.................... #bit ADCS2      =0x9F.6 
.................... #bit PCFG3      =0x9F.3 
.................... #bit PCFG2      =0x9F.2 
.................... #bit PCFG1      =0x9F.1 
.................... #bit PCFG0      =0x9F.0 
....................  
.................... //-----------EECON1 bits---------- 
....................  
.................... #bit EEPGD      =0x018C.7 
.................... #bit WRERR      =0x018C.3 
.................... #bit WREN       =0x018C.2 
.................... #bit WR         =0x018C.1 
.................... #bit RD         =0x018C.0 
....................  
....................  
.................... #device ADC = 16, WRITE_EEPROM = ASYNC 
....................  
.................... #FUSES NOWDT      //No Watch Dog Timer 
.................... #FUSES NOBROWNOUT //No brownout reset 
.................... #FUSES NOLVP      //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal = 20000000) 
0597:  MOVLW  48
0598:  MOVWF  04
0599:  BCF    03.7
059A:  MOVF   00,W
059B:  BTFSC  03.2
059C:  GOTO   5AA
059D:  MOVLW  06
059E:  MOVWF  78
059F:  CLRF   77
05A0:  DECFSZ 77,F
05A1:  GOTO   5A0
05A2:  DECFSZ 78,F
05A3:  GOTO   59F
05A4:  MOVLW  7B
05A5:  MOVWF  77
05A6:  DECFSZ 77,F
05A7:  GOTO   5A6
05A8:  DECFSZ 00,F
05A9:  GOTO   59D
05AA:  RETURN
....................  
.................... //================================================== PREPROSECSOR ================================================== 
....................  
.................... // 1 >> on 
.................... // #define triac1Out PIN_C6 
.................... // #define triac2Out PIN_C7 
.................... #define triac1Out PIN_D0 
.................... #define triac2Out PIN_D1 
.................... #define relayOut PIN_C0 
.................... // 0 >> pressed 
.................... // #define btnINCREASE PIN_B4 
.................... // #define btnDECREASE PIN_B1 
....................  
.................... // dip switch 2-bit starter 
.................... #define dipStart1 PIN_B5 
.................... #define dipStart0 PIN_B4 
.................... // dip switch 3-bit ringthebell 
.................... #define dipRing2 PIN_B3 
.................... #define dipRing1 PIN_B2 
.................... #define dipRing0 PIN_B1 
.................... // dip switch rotate protecter 
.................... #define dipRotate1 PIN_D6 
.................... #define dipRotate0 PIN_D5 
....................  
.................... // 1 >> led on 
.................... #define ledSAFETY PIN_D2 
.................... #define ledSTARTING PIN_D3 
.................... #define ledRINGING PIN_C5 
.................... // #define ledBUTTON PIN_D4 
....................  
.................... #byte CMCON = 0x9C 
....................  
.................... #include "floor.c" 
.................... float32 FLOOR(float32 x) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
*
0405:  BCF    4F.0
....................    y = x; 
0406:  MOVF   44,W
0407:  MOVWF  48
0408:  MOVF   43,W
0409:  MOVWF  47
040A:  MOVF   42,W
040B:  MOVWF  46
040C:  MOVF   41,W
040D:  MOVWF  45
....................  
....................    if (x < 0) 
040E:  MOVF   44,W
040F:  MOVWF  53
0410:  MOVF   43,W
0411:  MOVWF  52
0412:  MOVF   42,W
0413:  MOVWF  51
0414:  MOVF   41,W
0415:  MOVWF  50
0416:  CLRF   57
0417:  CLRF   56
0418:  CLRF   55
0419:  CLRF   54
041A:  CALL   315
041B:  BTFSS  03.0
041C:  GOTO   421
....................    { 
....................       s = 1; 
041D:  BSF    4F.0
....................       y = -y; 
041E:  MOVF   46,W
041F:  XORLW  80
0420:  MOVWF  46
....................    } 
....................  
....................    if (y <= 32768.0) 
0421:  MOVF   48,W
0422:  MOVWF  53
0423:  MOVF   47,W
0424:  MOVWF  52
0425:  MOVF   46,W
0426:  MOVWF  51
0427:  MOVF   45,W
0428:  MOVWF  50
0429:  CLRF   57
042A:  CLRF   56
042B:  CLRF   55
042C:  MOVLW  8E
042D:  MOVWF  54
042E:  CALL   315
042F:  BTFSC  03.0
0430:  GOTO   433
0431:  BTFSS  03.2
0432:  GOTO   44A
....................       res = (float32)(unsigned int16)y; 
0433:  MOVF   48,W
0434:  MOVWF  53
0435:  MOVF   47,W
0436:  MOVWF  52
0437:  MOVF   46,W
0438:  MOVWF  51
0439:  MOVF   45,W
043A:  MOVWF  50
043B:  CALL   354
043C:  MOVF   79,W
043D:  MOVWF  55
043E:  MOVF   78,W
043F:  MOVWF  54
0440:  CALL   373
0441:  MOVF   7A,W
0442:  MOVWF  4C
0443:  MOVF   79,W
0444:  MOVWF  4B
0445:  MOVF   78,W
0446:  MOVWF  4A
0447:  MOVF   77,W
0448:  MOVWF  49
0449:  GOTO   507
....................  
....................    else if (y < 10000000.0) 
044A:  MOVF   48,W
044B:  MOVWF  53
044C:  MOVF   47,W
044D:  MOVWF  52
044E:  MOVF   46,W
044F:  MOVWF  51
0450:  MOVF   45,W
0451:  MOVWF  50
0452:  MOVLW  80
0453:  MOVWF  57
0454:  MOVLW  96
0455:  MOVWF  56
0456:  MOVLW  18
0457:  MOVWF  55
0458:  MOVLW  96
0459:  MOVWF  54
045A:  CALL   315
045B:  BTFSS  03.0
045C:  GOTO   4FF
....................    { 
....................       l = (unsigned int16)(y * 0.000030517578125); 
045D:  MOVF   48,W
045E:  MOVWF  53
045F:  MOVF   47,W
0460:  MOVWF  52
0461:  MOVF   46,W
0462:  MOVWF  51
0463:  MOVF   45,W
0464:  MOVWF  50
0465:  CLRF   57
0466:  CLRF   56
0467:  CLRF   55
0468:  MOVLW  70
0469:  MOVWF  54
046A:  CALL   390
046B:  MOVF   7A,W
046C:  MOVWF  53
046D:  MOVF   79,W
046E:  MOVWF  52
046F:  MOVF   78,W
0470:  MOVWF  51
0471:  MOVF   77,W
0472:  MOVWF  50
0473:  CALL   354
0474:  MOVF   79,W
0475:  MOVWF  4E
0476:  MOVF   78,W
0477:  MOVWF  4D
....................       y = 32768.0 * (y * 0.000030517578125 - (float32)l); 
0478:  MOVF   48,W
0479:  MOVWF  53
047A:  MOVF   47,W
047B:  MOVWF  52
047C:  MOVF   46,W
047D:  MOVWF  51
047E:  MOVF   45,W
047F:  MOVWF  50
0480:  CLRF   57
0481:  CLRF   56
0482:  CLRF   55
0483:  MOVLW  70
0484:  MOVWF  54
0485:  CALL   390
0486:  MOVF   7A,W
0487:  MOVWF  53
0488:  MOVF   79,W
0489:  MOVWF  52
048A:  MOVF   78,W
048B:  MOVWF  51
048C:  MOVF   77,W
048D:  MOVWF  50
048E:  MOVF   4E,W
048F:  MOVWF  55
0490:  MOVF   4D,W
0491:  MOVWF  54
0492:  CALL   373
0493:  BSF    03.1
0494:  MOVF   53,W
0495:  MOVWF  57
0496:  MOVF   52,W
0497:  MOVWF  56
0498:  MOVF   51,W
0499:  MOVWF  55
049A:  MOVF   50,W
049B:  MOVWF  54
049C:  MOVF   7A,W
049D:  MOVWF  5B
049E:  MOVF   79,W
049F:  MOVWF  5A
04A0:  MOVF   78,W
04A1:  MOVWF  59
04A2:  MOVF   77,W
04A3:  MOVWF  58
04A4:  CALL   10A
04A5:  CLRF   53
04A6:  CLRF   52
04A7:  CLRF   51
04A8:  MOVLW  8E
04A9:  MOVWF  50
04AA:  MOVF   7A,W
04AB:  MOVWF  57
04AC:  MOVF   79,W
04AD:  MOVWF  56
04AE:  MOVF   78,W
04AF:  MOVWF  55
04B0:  MOVF   77,W
04B1:  MOVWF  54
04B2:  CALL   390
04B3:  MOVF   7A,W
04B4:  MOVWF  48
04B5:  MOVF   79,W
04B6:  MOVWF  47
04B7:  MOVF   78,W
04B8:  MOVWF  46
04B9:  MOVF   77,W
04BA:  MOVWF  45
....................       res = 32768.0 * (float32)l; 
04BB:  MOVF   4E,W
04BC:  MOVWF  55
04BD:  MOVF   4D,W
04BE:  MOVWF  54
04BF:  CALL   373
04C0:  CLRF   53
04C1:  CLRF   52
04C2:  CLRF   51
04C3:  MOVLW  8E
04C4:  MOVWF  50
04C5:  MOVF   7A,W
04C6:  MOVWF  57
04C7:  MOVF   79,W
04C8:  MOVWF  56
04C9:  MOVF   78,W
04CA:  MOVWF  55
04CB:  MOVF   77,W
04CC:  MOVWF  54
04CD:  CALL   390
04CE:  MOVF   7A,W
04CF:  MOVWF  4C
04D0:  MOVF   79,W
04D1:  MOVWF  4B
04D2:  MOVF   78,W
04D3:  MOVWF  4A
04D4:  MOVF   77,W
04D5:  MOVWF  49
....................       res += (float32)(unsigned int16)y; 
04D6:  MOVF   48,W
04D7:  MOVWF  53
04D8:  MOVF   47,W
04D9:  MOVWF  52
04DA:  MOVF   46,W
04DB:  MOVWF  51
04DC:  MOVF   45,W
04DD:  MOVWF  50
04DE:  CALL   354
04DF:  MOVF   79,W
04E0:  MOVWF  55
04E1:  MOVF   78,W
04E2:  MOVWF  54
04E3:  CALL   373
04E4:  BCF    03.1
04E5:  MOVF   4C,W
04E6:  MOVWF  57
04E7:  MOVF   4B,W
04E8:  MOVWF  56
04E9:  MOVF   4A,W
04EA:  MOVWF  55
04EB:  MOVF   49,W
04EC:  MOVWF  54
04ED:  MOVF   7A,W
04EE:  MOVWF  5B
04EF:  MOVF   79,W
04F0:  MOVWF  5A
04F1:  MOVF   78,W
04F2:  MOVWF  59
04F3:  MOVF   77,W
04F4:  MOVWF  58
04F5:  CALL   10A
04F6:  MOVF   7A,W
04F7:  MOVWF  4C
04F8:  MOVF   79,W
04F9:  MOVWF  4B
04FA:  MOVF   78,W
04FB:  MOVWF  4A
04FC:  MOVF   77,W
04FD:  MOVWF  49
....................    } 
04FE:  GOTO   507
....................  
....................    else 
....................       res = y; 
04FF:  MOVF   48,W
0500:  MOVWF  4C
0501:  MOVF   47,W
0502:  MOVWF  4B
0503:  MOVF   46,W
0504:  MOVWF  4A
0505:  MOVF   45,W
0506:  MOVWF  49
....................  
....................    y = y - (float32)(unsigned int16)y; 
0507:  MOVF   48,W
0508:  MOVWF  53
0509:  MOVF   47,W
050A:  MOVWF  52
050B:  MOVF   46,W
050C:  MOVWF  51
050D:  MOVF   45,W
050E:  MOVWF  50
050F:  CALL   354
0510:  MOVF   79,W
0511:  MOVWF  55
0512:  MOVF   78,W
0513:  MOVWF  54
0514:  CALL   373
0515:  BSF    03.1
0516:  MOVF   48,W
0517:  MOVWF  57
0518:  MOVF   47,W
0519:  MOVWF  56
051A:  MOVF   46,W
051B:  MOVWF  55
051C:  MOVF   45,W
051D:  MOVWF  54
051E:  MOVF   7A,W
051F:  MOVWF  5B
0520:  MOVF   79,W
0521:  MOVWF  5A
0522:  MOVF   78,W
0523:  MOVWF  59
0524:  MOVF   77,W
0525:  MOVWF  58
0526:  CALL   10A
0527:  MOVF   7A,W
0528:  MOVWF  48
0529:  MOVF   79,W
052A:  MOVWF  47
052B:  MOVF   78,W
052C:  MOVWF  46
052D:  MOVF   77,W
052E:  MOVWF  45
....................  
....................    if (s) 
052F:  BTFSS  4F.0
0530:  GOTO   534
....................       res = -res; 
0531:  MOVF   4A,W
0532:  XORLW  80
0533:  MOVWF  4A
....................  
....................    if (y != 0) 
0534:  MOVF   48,W
0535:  MOVWF  53
0536:  MOVF   47,W
0537:  MOVWF  52
0538:  MOVF   46,W
0539:  MOVWF  51
053A:  MOVF   45,W
053B:  MOVWF  50
053C:  CLRF   57
053D:  CLRF   56
053E:  CLRF   55
053F:  CLRF   54
0540:  CALL   315
0541:  BTFSC  03.2
0542:  GOTO   55C
....................    { 
....................       if (s == 1) 
0543:  BTFSS  4F.0
0544:  GOTO   55C
....................          res -= 1.0; 
0545:  BSF    03.1
0546:  MOVF   4C,W
0547:  MOVWF  57
0548:  MOVF   4B,W
0549:  MOVWF  56
054A:  MOVF   4A,W
054B:  MOVWF  55
054C:  MOVF   49,W
054D:  MOVWF  54
054E:  CLRF   5B
054F:  CLRF   5A
0550:  CLRF   59
0551:  MOVLW  7F
0552:  MOVWF  58
0553:  CALL   10A
0554:  MOVF   7A,W
0555:  MOVWF  4C
0556:  MOVF   79,W
0557:  MOVWF  4B
0558:  MOVF   78,W
0559:  MOVWF  4A
055A:  MOVF   77,W
055B:  MOVWF  49
....................    } 
....................    if (x == 0) 
055C:  MOVF   44,W
055D:  MOVWF  53
055E:  MOVF   43,W
055F:  MOVWF  52
0560:  MOVF   42,W
0561:  MOVWF  51
0562:  MOVF   41,W
0563:  MOVWF  50
0564:  CLRF   57
0565:  CLRF   56
0566:  CLRF   55
0567:  CLRF   54
0568:  CALL   315
0569:  BTFSS  03.2
056A:  GOTO   56F
....................       res = 0; 
056B:  CLRF   4C
056C:  CLRF   4B
056D:  CLRF   4A
056E:  CLRF   49
....................  
....................    return (res); 
056F:  MOVF   49,W
0570:  MOVWF  77
0571:  MOVF   4A,W
0572:  MOVWF  78
0573:  MOVF   4B,W
0574:  MOVWF  79
0575:  MOVF   4C,W
0576:  MOVWF  7A
0577:  RETURN
.................... } 
....................  
....................  
.................... //================================================== VARIABLES ================================================== 
....................  
.................... // set angle (10 levels). more angle, weaker motor 
.................... int32 angleStarter = 0; 
.................... int32 angleRingTheBell = 0; 
.................... // volatile int32 angleStarter = read_eeprom(0x00); 
.................... // volatile int32 angleRingTheBell = read_eeprom(0x01); 
....................  
.................... // int32 valTimer0SetStarter = (int32)FLOOR((13.1072 - angleStarter) / 0.0512) - 1; 
.................... // int32 valTimer0SetRingTheBell = (int32)FLOOR((13.1072 - angleRingTheBell) / 0.0512) - 1; 
....................  
.................... int32 valTimer0SetStarter = 0;     // init in DipSwitchState() 
.................... int32 valTimer0SetRingTheBell = 0; // init in DipSwitchState() 
....................  
.................... volatile signed int16 count = 0; 
.................... // volatile int16 iTimer2OverFlow; 
.................... int1 flagForward = true, flagStarter = true, flagSTOP = true; 
....................  
.................... signed int16 ProtectRotate = 0; // init in DipSwitchState() 
....................  
.................... //================================================== ISR Func() ================================================== 
....................  
.................... // #INT_COMP 
.................... // void isrComparator() 
.................... // { // A mismatch condition will continue to set flag bit CMIF. Reading CMCON will end the mismatch condition and allow flag bit CMIF to be cleared 
.................... //    char charas = CMCON; 
.................... //    output_low(relayOut);   // safety switch 
.................... //    output_high(PIN_RESET); // reset mcu 
.................... // } 
....................  
.................... #INT_EXT 
.................... void ext_isr() 
.................... { 
....................    // cross zero point detector 50Hz >> 1/50/2 sec per half pulse after diode brighet 
....................  
....................    output_low(triac1Out); 
*
0048:  BSF    03.5
0049:  BCF    08.0
004A:  BCF    03.5
004B:  BCF    08.0
....................    output_low(triac2Out); 
004C:  BSF    03.5
004D:  BCF    08.1
004E:  BCF    03.5
004F:  BCF    08.1
....................  
....................    if (flagStarter) 
0050:  BTFSS  39.1
0051:  GOTO   055
....................       set_timer0(valTimer0SetStarter); 
0052:  MOVF   2F,W
0053:  MOVWF  01
0054:  GOTO   057
....................    else 
....................       set_timer0(valTimer0SetRingTheBell); 
0055:  MOVF   33,W
0056:  MOVWF  01
....................  
....................    clear_interrupt(INT_TIMER0); 
0057:  BCF    0B.2
....................    enable_interrupts(INT_TIMER0); 
0058:  BSF    0B.5
....................    clear_interrupt(INT_EXT); // waiting for next EXT 
0059:  BCF    0B.1
.................... } 
....................  
005A:  BCF    0B.1
005B:  BCF    0A.3
005C:  BCF    0A.4
005D:  GOTO   02B
.................... #INT_TIMER0 
.................... void timer0_isr() 
.................... { 
....................    if (flagForward && !flagSTOP) 
005E:  BTFSS  39.0
005F:  GOTO   067
0060:  BTFSC  39.2
0061:  GOTO   067
....................       output_high(triac1Out); 
0062:  BSF    03.5
0063:  BCF    08.0
0064:  BCF    03.5
0065:  BSF    08.0
0066:  GOTO   06F
....................    else if (!flagForward && !flagSTOP) 
0067:  BTFSC  39.0
0068:  GOTO   06F
0069:  BTFSC  39.2
006A:  GOTO   06F
....................       output_high(triac2Out); 
006B:  BSF    03.5
006C:  BCF    08.1
006D:  BCF    03.5
006E:  BSF    08.1
....................  
....................    // set_timer0(200.00); 
....................    disable_interrupts(INT_TIMER0); 
006F:  BCF    0B.5
.................... } 
....................  
0070:  BCF    0B.2
0071:  BCF    0A.3
0072:  BCF    0A.4
0073:  GOTO   02B
.................... #INT_TIMER2 
.................... void timer2_isr() 
.................... { 
....................    // --iTimer2OverFlow; 
....................    // if (!(--iTimer2OverFlow)) 
....................    // if (!iTimer2OverFlow) 
....................    { 
....................       // reset neu quay qua 4 vong 
....................       // if (flagForward) 
....................       // { 
....................       if (count >= ProtectRotate) // (+)ProtectRotate rotate 
0074:  BTFSS  3B.7
0075:  GOTO   079
0076:  BTFSS  38.7
0077:  GOTO   085
0078:  GOTO   07B
0079:  BTFSC  38.7
007A:  GOTO   08D
007B:  MOVF   3B,W
007C:  SUBWF  38,W
007D:  BTFSS  03.0
007E:  GOTO   08D
007F:  BTFSS  03.2
0080:  GOTO   085
0081:  MOVF   3A,W
0082:  SUBWF  37,W
0083:  BTFSS  03.0
0084:  GOTO   08D
....................       { 
....................          output_low(relayOut); // safety switch 
0085:  BCF    3C.0
0086:  MOVF   3C,W
0087:  BSF    03.5
0088:  MOVWF  07
0089:  BCF    03.5
008A:  BCF    07.0
....................          reset_cpu(); 
008B:  CLRF   0A
008C:  GOTO   000
....................       } 
....................       // } 
....................       //else 
....................       //{ 
....................       if (count <= -1 * ProtectRotate) // (-)ProtectRotate rotate 
008D:  MOVLW  FF
008E:  MOVWF  65
008F:  MOVWF  64
0090:  MOVF   3B,W
0091:  MOVWF  67
0092:  MOVF   3A,W
0093:  MOVWF  66
*
00C1:  MOVF   79,W
00C2:  MOVWF  7A
00C3:  MOVF   78,W
00C4:  BTFSS  38.7
00C5:  GOTO   0C9
00C6:  BTFSS  7A.7
00C7:  GOTO   0D5
00C8:  GOTO   0CB
00C9:  BTFSC  7A.7
00CA:  GOTO   0DD
00CB:  MOVF   38,W
00CC:  SUBWF  7A,W
00CD:  BTFSS  03.0
00CE:  GOTO   0DD
00CF:  BTFSS  03.2
00D0:  GOTO   0D5
00D1:  MOVF   37,W
00D2:  SUBWF  78,W
00D3:  BTFSS  03.0
00D4:  GOTO   0DD
....................       { 
....................          output_low(relayOut); // safety switch 
00D5:  BCF    3C.0
00D6:  MOVF   3C,W
00D7:  BSF    03.5
00D8:  MOVWF  07
00D9:  BCF    03.5
00DA:  BCF    07.0
....................          reset_cpu(); 
00DB:  CLRF   0A
00DC:  GOTO   000
....................       } 
....................       //} 
....................    } 
.................... } 
....................  
00DD:  BCF    0C.1
00DE:  BCF    0A.3
00DF:  BCF    0A.4
00E0:  GOTO   02B
.................... #INT_CCP1 
.................... void ccp1_isr() 
.................... { 
....................    if (RC1) 
00E1:  BTFSS  07.1
00E2:  GOTO   0E7
....................       ++count; 
00E3:  INCF   37,F
00E4:  BTFSC  03.2
00E5:  INCF   38,F
00E6:  GOTO   0EB
....................    else 
....................       --count; 
00E7:  MOVF   37,W
00E8:  BTFSC  03.2
00E9:  DECF   38,F
00EA:  DECF   37,F
....................    // clear_interrupt(INT_CCP1); 
00EB:  BCF    0C.2
00EC:  BCF    0A.3
00ED:  BCF    0A.4
00EE:  GOTO   02B
.................... } 
....................  
.................... //================================================== Func() ================================================== 
....................  
.................... void FORWARD() 
.................... { 
....................    output_low(triac2Out); 
*
0600:  BSF    03.5
0601:  BCF    08.1
0602:  BCF    03.5
0603:  BCF    08.1
....................  
....................    flagForward = true; 
0604:  BSF    39.0
....................    flagSTOP = false; 
0605:  BCF    39.2
0606:  RETURN
.................... } 
.................... void REVERSE() 
.................... { 
....................    output_low(triac1Out); 
*
0611:  BSF    03.5
0612:  BCF    08.0
0613:  BCF    03.5
0614:  BCF    08.0
....................    flagForward = flagSTOP = false; 
0615:  BCF    39.2
0616:  BCF    39.0
0617:  RETURN
.................... } 
.................... void STOP() 
.................... { 
....................    flagSTOP = true; 
*
0607:  BSF    39.2
....................    output_low(triac1Out); 
0608:  BSF    03.5
0609:  BCF    08.0
060A:  BCF    03.5
060B:  BCF    08.0
....................    output_low(triac2Out); 
060C:  BSF    03.5
060D:  BCF    08.1
060E:  BCF    03.5
060F:  BCF    08.1
0610:  RETURN
.................... } 
....................  
.................... void starter() 
.................... { 
....................    // half rotate 
....................    while (count <= 200) 
*
0618:  BTFSC  38.7
0619:  GOTO   621
061A:  MOVF   38,F
061B:  BTFSS  03.2
061C:  GOTO   623
061D:  MOVF   37,W
061E:  SUBLW  C8
061F:  BTFSS  03.0
0620:  GOTO   623
....................       FORWARD(); 
0621:  CALL   600
0622:  GOTO   618
....................    STOP(); 
0623:  CALL   607
....................    while (count >= 0) 
0624:  BTFSC  38.7
0625:  GOTO   628
....................       STOP(); 
0626:  CALL   607
0627:  GOTO   624
....................    while (count >= -200) 
0628:  BTFSS  38.7
0629:  GOTO   635
062A:  MOVF   38,W
062B:  SUBLW  FE
062C:  BTFSC  03.0
062D:  GOTO   637
062E:  XORLW  FF
062F:  BTFSS  03.2
0630:  GOTO   635
0631:  MOVF   37,W
0632:  SUBLW  37
0633:  BTFSC  03.0
0634:  GOTO   637
....................       REVERSE(); 
0635:  CALL   611
0636:  GOTO   628
....................    STOP(); 
0637:  CALL   607
....................    while (count <= 0) 
0638:  BTFSC  38.7
0639:  GOTO   641
063A:  MOVF   38,F
063B:  BTFSS  03.2
063C:  GOTO   643
063D:  MOVF   37,W
063E:  SUBLW  00
063F:  BTFSS  03.0
0640:  GOTO   643
....................       STOP(); 
0641:  CALL   607
0642:  GOTO   638
....................  
....................    // 1 rotate 
....................    while (count <= 400) 
0643:  BTFSC  38.7
0644:  GOTO   64F
0645:  MOVF   38,W
0646:  SUBLW  01
0647:  BTFSS  03.0
0648:  GOTO   651
0649:  BTFSS  03.2
064A:  GOTO   64F
064B:  MOVF   37,W
064C:  SUBLW  90
064D:  BTFSS  03.0
064E:  GOTO   651
....................       FORWARD(); 
064F:  CALL   600
0650:  GOTO   643
....................    STOP(); 
0651:  CALL   607
....................    while (count >= 0) 
0652:  BTFSC  38.7
0653:  GOTO   656
....................       STOP(); 
0654:  CALL   607
0655:  GOTO   652
....................    while (count >= -400) 
0656:  BTFSS  38.7
0657:  GOTO   663
0658:  MOVF   38,W
0659:  SUBLW  FD
065A:  BTFSC  03.0
065B:  GOTO   665
065C:  XORLW  FF
065D:  BTFSS  03.2
065E:  GOTO   663
065F:  MOVF   37,W
0660:  SUBLW  6F
0661:  BTFSC  03.0
0662:  GOTO   665
....................       REVERSE(); 
0663:  CALL   611
0664:  GOTO   656
....................    STOP(); 
0665:  CALL   607
....................    while (count <= 0) 
0666:  BTFSC  38.7
0667:  GOTO   66F
0668:  MOVF   38,F
0669:  BTFSS  03.2
066A:  GOTO   671
066B:  MOVF   37,W
066C:  SUBLW  00
066D:  BTFSS  03.0
066E:  GOTO   671
....................       STOP(); 
066F:  CALL   607
0670:  GOTO   666
....................  
....................    // 2 rotates 
....................    while (count <= 800) 
0671:  BTFSC  38.7
0672:  GOTO   67D
0673:  MOVF   38,W
0674:  SUBLW  03
0675:  BTFSS  03.0
0676:  GOTO   67F
0677:  BTFSS  03.2
0678:  GOTO   67D
0679:  MOVF   37,W
067A:  SUBLW  20
067B:  BTFSS  03.0
067C:  GOTO   67F
....................       FORWARD(); 
067D:  CALL   600
067E:  GOTO   671
....................    STOP(); 
067F:  CALL   607
....................    while (count >= 0) 
0680:  BTFSC  38.7
0681:  GOTO   684
....................       STOP(); 
0682:  CALL   607
0683:  GOTO   680
....................    while (count >= -800) 
0684:  BTFSS  38.7
0685:  GOTO   691
0686:  MOVF   38,W
0687:  SUBLW  FB
0688:  BTFSC  03.0
0689:  GOTO   693
068A:  XORLW  FF
068B:  BTFSS  03.2
068C:  GOTO   691
068D:  MOVF   37,W
068E:  SUBLW  DF
068F:  BTFSC  03.0
0690:  GOTO   693
....................       REVERSE(); 
0691:  CALL   611
0692:  GOTO   684
....................    STOP(); 
0693:  CALL   607
....................    while (count <= 0) 
0694:  BTFSC  38.7
0695:  GOTO   69D
0696:  MOVF   38,F
0697:  BTFSS  03.2
0698:  GOTO   69F
0699:  MOVF   37,W
069A:  SUBLW  00
069B:  BTFSS  03.0
069C:  GOTO   69F
....................       STOP(); 
069D:  CALL   607
069E:  GOTO   694
....................  
....................    // 3 rotates 1 side 
....................    while (count <= 1200) 
069F:  BTFSC  38.7
06A0:  GOTO   6AB
06A1:  MOVF   38,W
06A2:  SUBLW  04
06A3:  BTFSS  03.0
06A4:  GOTO   6AD
06A5:  BTFSS  03.2
06A6:  GOTO   6AB
06A7:  MOVF   37,W
06A8:  SUBLW  B0
06A9:  BTFSS  03.0
06AA:  GOTO   6AD
....................       FORWARD(); 
06AB:  CALL   600
06AC:  GOTO   69F
....................    STOP(); 
06AD:  CALL   607
....................  
....................    flagStarter = false; 
06AE:  BCF    39.1
06AF:  BSF    0A.3
06B0:  BCF    0A.4
06B1:  GOTO   206 (RETURN)
.................... } 
....................  
.................... void RingTheBell() 
.................... { 
....................    while (count >= 400) 
06B2:  BTFSC  38.7
06B3:  GOTO   6C1
06B4:  MOVF   38,W
06B5:  SUBLW  00
06B6:  BTFSC  03.0
06B7:  GOTO   6C1
06B8:  XORLW  FF
06B9:  BTFSS  03.2
06BA:  GOTO   6BF
06BB:  MOVF   37,W
06BC:  SUBLW  8F
06BD:  BTFSC  03.0
06BE:  GOTO   6C1
....................       STOP(); 
06BF:  CALL   607
06C0:  GOTO   6B2
....................  
....................    while (count >= -800) 
06C1:  BTFSS  38.7
06C2:  GOTO   6CE
06C3:  MOVF   38,W
06C4:  SUBLW  FB
06C5:  BTFSC  03.0
06C6:  GOTO   6D0
06C7:  XORLW  FF
06C8:  BTFSS  03.2
06C9:  GOTO   6CE
06CA:  MOVF   37,W
06CB:  SUBLW  DF
06CC:  BTFSC  03.0
06CD:  GOTO   6D0
....................       REVERSE(); 
06CE:  CALL   611
06CF:  GOTO   6C1
....................    STOP(); 
06D0:  CALL   607
....................  
....................    while (count <= -400) 
06D1:  BTFSS  38.7
06D2:  GOTO   6DF
06D3:  MOVF   38,W
06D4:  SUBLW  FE
06D5:  BTFSS  03.0
06D6:  GOTO   6DF
06D7:  BTFSS  03.2
06D8:  GOTO   6DD
06D9:  MOVF   37,W
06DA:  SUBLW  70
06DB:  BTFSS  03.0
06DC:  GOTO   6DF
....................       STOP(); 
06DD:  CALL   607
06DE:  GOTO   6D1
....................  
....................    while (count <= 800) 
06DF:  BTFSC  38.7
06E0:  GOTO   6EB
06E1:  MOVF   38,W
06E2:  SUBLW  03
06E3:  BTFSS  03.0
06E4:  GOTO   6ED
06E5:  BTFSS  03.2
06E6:  GOTO   6EB
06E7:  MOVF   37,W
06E8:  SUBLW  20
06E9:  BTFSS  03.0
06EA:  GOTO   6ED
....................       FORWARD(); 
06EB:  CALL   600
06EC:  GOTO   6DF
....................    STOP(); 
06ED:  CALL   607
06EE:  BSF    0A.3
06EF:  BCF    0A.4
06F0:  GOTO   213 (RETURN)
.................... } 
....................  
.................... // pic 20mhz 5.10^6 = 1sec 
.................... // motor 2000rpm 
.................... // quay co tai: 0.5rps -> 200xung/s -> 1/200 s/xung 
.................... void checkSafetyFirst(int32 sec) 
.................... { 
....................    flagSTOP = true; 
*
05AB:  BSF    39.2
....................    output_low(relayOut); // safety switch 
05AC:  BCF    3C.0
05AD:  MOVF   3C,W
05AE:  BSF    03.5
05AF:  MOVWF  07
05B0:  BCF    03.5
05B1:  BCF    07.0
....................  
....................    signed int16 lastCount = count; 
05B2:  MOVF   38,W
05B3:  MOVWF  42
05B4:  MOVF   37,W
05B5:  MOVWF  41
....................    for (int32 i = sec; --i;) // waitting steady 
05B6:  MOVF   40,W
05B7:  MOVWF  46
05B8:  MOVF   3F,W
05B9:  MOVWF  45
05BA:  MOVF   3E,W
05BB:  MOVWF  44
05BC:  MOVF   3D,W
05BD:  MOVWF  43
05BE:  MOVLW  FF
05BF:  ADDWF  43,F
05C0:  BTFSS  03.0
05C1:  ADDWF  44,F
05C2:  BTFSS  03.0
05C3:  ADDWF  45,F
05C4:  BTFSS  03.0
05C5:  ADDWF  46,F
05C6:  MOVF   43,F
05C7:  BTFSS  03.2
05C8:  GOTO   5D2
05C9:  MOVF   44,F
05CA:  BTFSS  03.2
05CB:  GOTO   5D2
05CC:  MOVF   45,F
05CD:  BTFSS  03.2
05CE:  GOTO   5D2
05CF:  MOVF   46,F
05D0:  BTFSC  03.2
05D1:  GOTO   5EA
....................    { 
....................       if (count != lastCount) 
05D2:  MOVF   41,W
05D3:  SUBWF  37,W
05D4:  BTFSS  03.2
05D5:  GOTO   5DA
05D6:  MOVF   42,W
05D7:  SUBWF  38,W
05D8:  BTFSC  03.2
05D9:  GOTO   5E9
....................       { 
....................          i = sec; // reset 
05DA:  MOVF   40,W
05DB:  MOVWF  46
05DC:  MOVF   3F,W
05DD:  MOVWF  45
05DE:  MOVF   3E,W
05DF:  MOVWF  44
05E0:  MOVF   3D,W
05E1:  MOVWF  43
....................          lastCount = count; 
05E2:  MOVF   38,W
05E3:  MOVWF  42
05E4:  MOVF   37,W
05E5:  MOVWF  41
....................          delay_ms(30); // pray for couting up 
05E6:  MOVLW  1E
05E7:  MOVWF  48
05E8:  CALL   597
....................       } 
05E9:  GOTO   5BE
....................    } 
....................  
....................    count = 0; // update 0 point 
05EA:  CLRF   38
05EB:  CLRF   37
....................    output_high(relayOut); 
05EC:  BCF    3C.0
05ED:  MOVF   3C,W
05EE:  BSF    03.5
05EF:  MOVWF  07
05F0:  BCF    03.5
05F1:  BSF    07.0
....................    delay_ms(3000); // ngăn hồ quang nếu cùng lúc đóng triac lập tức 
05F2:  MOVLW  0C
05F3:  MOVWF  47
05F4:  MOVLW  FA
05F5:  MOVWF  48
05F6:  CALL   597
05F7:  DECFSZ 47,F
05F8:  GOTO   5F4
....................    enable_interrupts(INT_TIMER2); 
05F9:  BSF    03.5
05FA:  BSF    0C.1
....................    flagSTOP = false; 
05FB:  BCF    03.5
05FC:  BCF    39.2
05FD:  BSF    0A.3
05FE:  BCF    0A.4
05FF:  GOTO   1FB (RETURN)
.................... } 
....................  
.................... void initDipSwitchState(int32 &angleStarter, int32 &angleRingTheBell, signed int16 &ProtectRotate) 
.................... { 
....................    TRISB5 = TRISB4 = TRISB3 = TRISB2 = TRISB1 = TRISD6 = TRISD5 = 1; 
*
0837:  BSF    08.5
0838:  BSF    08.6
0839:  BSF    06.1
083A:  BSF    06.2
083B:  BSF    06.3
083C:  BSF    06.4
083D:  BSF    06.5
....................  
....................    // Dip swith Start 
....................    switch (PORTB & 0b00110000) 
083E:  BCF    03.5
083F:  MOVF   06,W
0840:  ANDLW  30
0841:  BTFSC  03.2
0842:  GOTO   04D
0843:  XORLW  10
0844:  BTFSC  03.2
0845:  GOTO   053
0846:  XORLW  30
0847:  BTFSC  03.2
0848:  GOTO   059
0849:  XORLW  10
084A:  BTFSC  03.2
084B:  GOTO   05F
084C:  GOTO   064
....................    // switch (PORTB & 0x30) 
....................    { 
....................    // case 0b00: 
....................    case 0: 
....................       angleStarter = 1; 
084D:  CLRF   2A
084E:  CLRF   29
084F:  CLRF   28
0850:  MOVLW  01
0851:  MOVWF  27
....................       // output_high(ledRINGING); // debug 
....................       // delay_ms(100); 
....................       // output_low(ledRINGING); 
....................       // delay_ms(100); 
....................       // output_high(ledRINGING); 
....................       // delay_ms(100); 
....................       // output_low(ledRINGING); 
....................       break; 
0852:  GOTO   064
....................    // case 0b01: 
....................    case 0b00010000: 
....................       angleStarter = 2; 
0853:  CLRF   2A
0854:  CLRF   29
0855:  CLRF   28
0856:  MOVLW  02
0857:  MOVWF  27
....................       break; 
0858:  GOTO   064
....................    // case 0b10: 
....................    case 0b00100000: 
....................       angleStarter = 3; 
0859:  CLRF   2A
085A:  CLRF   29
085B:  CLRF   28
085C:  MOVLW  03
085D:  MOVWF  27
....................       break; 
085E:  GOTO   064
....................    case 0b00110000: 
....................       // case 3: 
....................       angleStarter = 4; 
085F:  CLRF   2A
0860:  CLRF   29
0861:  CLRF   28
0862:  MOVLW  04
0863:  MOVWF  27
....................       break; 
....................    } 
....................  
....................    // Dip swith Ringing 
....................    switch (PORTB & 0b00001110) 
0864:  MOVF   06,W
0865:  ANDLW  0E
0866:  BTFSC  03.2
0867:  GOTO   07E
0868:  XORLW  02
0869:  BTFSC  03.2
086A:  GOTO   084
086B:  XORLW  06
086C:  BTFSC  03.2
086D:  GOTO   08A
086E:  XORLW  02
086F:  BTFSC  03.2
0870:  GOTO   090
0871:  XORLW  0E
0872:  BTFSC  03.2
0873:  GOTO   096
0874:  XORLW  02
0875:  BTFSC  03.2
0876:  GOTO   09C
0877:  XORLW  06
0878:  BTFSC  03.2
0879:  GOTO   0A2
087A:  XORLW  02
087B:  BTFSC  03.2
087C:  GOTO   0A8
087D:  GOTO   0AD
....................    // switch (PORTB & 0x0E) 
....................    { 
....................    case 0b0000: 
....................       angleRingTheBell = 2; 
087E:  CLRF   2E
087F:  CLRF   2D
0880:  CLRF   2C
0881:  MOVLW  02
0882:  MOVWF  2B
....................       break; 
0883:  GOTO   0AD
....................    case 0b0010: 
....................       angleRingTheBell = 3; 
0884:  CLRF   2E
0885:  CLRF   2D
0886:  CLRF   2C
0887:  MOVLW  03
0888:  MOVWF  2B
....................       break; 
0889:  GOTO   0AD
....................    case 0b0100: 
....................       angleRingTheBell = 4; 
088A:  CLRF   2E
088B:  CLRF   2D
088C:  CLRF   2C
088D:  MOVLW  04
088E:  MOVWF  2B
....................       break; 
088F:  GOTO   0AD
....................    case 0b0110: 
....................       angleRingTheBell = 5; 
0890:  CLRF   2E
0891:  CLRF   2D
0892:  CLRF   2C
0893:  MOVLW  05
0894:  MOVWF  2B
....................       break; 
0895:  GOTO   0AD
....................    case 0b1000: 
....................       angleRingTheBell = 6; 
0896:  CLRF   2E
0897:  CLRF   2D
0898:  CLRF   2C
0899:  MOVLW  06
089A:  MOVWF  2B
....................       break; 
089B:  GOTO   0AD
....................    case 0b1010: 
....................       angleRingTheBell = 7; 
089C:  CLRF   2E
089D:  CLRF   2D
089E:  CLRF   2C
089F:  MOVLW  07
08A0:  MOVWF  2B
....................       break; 
08A1:  GOTO   0AD
....................    case 0b1100: 
....................       angleRingTheBell = 8; 
08A2:  CLRF   2E
08A3:  CLRF   2D
08A4:  CLRF   2C
08A5:  MOVLW  08
08A6:  MOVWF  2B
....................       break; 
08A7:  GOTO   0AD
....................    case 0b1110: 
....................       angleRingTheBell = 9; 
08A8:  CLRF   2E
08A9:  CLRF   2D
08AA:  CLRF   2C
08AB:  MOVLW  09
08AC:  MOVWF  2B
....................       break; 
....................    } 
....................  
....................    // Dip swith Protector Rotate 
....................    switch (PORTD & 0b01100000) 
08AD:  MOVF   08,W
08AE:  ANDLW  60
08AF:  BTFSC  03.2
08B0:  GOTO   0BB
08B1:  XORLW  20
08B2:  BTFSC  03.2
08B3:  GOTO   0C0
08B4:  XORLW  60
08B5:  BTFSC  03.2
08B6:  GOTO   0C5
08B7:  XORLW  20
08B8:  BTFSC  03.2
08B9:  GOTO   0CA
08BA:  GOTO   0CE
....................    // switch (PORTD & 0x60) 
....................    { 
....................    case 0b0000000: 
....................       ProtectRotate = 2000; 
08BB:  MOVLW  07
08BC:  MOVWF  3B
08BD:  MOVLW  D0
08BE:  MOVWF  3A
....................       break; 
08BF:  GOTO   0CE
....................    case 0b0100000: 
....................       ProtectRotate = 2400; 
08C0:  MOVLW  09
08C1:  MOVWF  3B
08C2:  MOVLW  60
08C3:  MOVWF  3A
....................       break; 
08C4:  GOTO   0CE
....................    case 0b1000000: 
....................       ProtectRotate = 2800; 
08C5:  MOVLW  0A
08C6:  MOVWF  3B
08C7:  MOVLW  F0
08C8:  MOVWF  3A
....................       break; 
08C9:  GOTO   0CE
....................    case 0b1100000: 
....................       ProtectRotate = 3200; 
08CA:  MOVLW  0C
08CB:  MOVWF  3B
08CC:  MOVLW  80
08CD:  MOVWF  3A
....................       break; 
....................    } 
.................... } 
....................  
.................... //================================================== MAIN ================================================== 
....................  
.................... void main() 
*
0800:  MOVF   03,W
0801:  ANDLW  1F
0802:  MOVWF  03
0803:  CLRF   2A
0804:  CLRF   29
0805:  CLRF   28
0806:  CLRF   27
0807:  CLRF   2E
0808:  CLRF   2D
0809:  CLRF   2C
080A:  CLRF   2B
080B:  CLRF   32
080C:  CLRF   31
080D:  CLRF   30
080E:  CLRF   2F
080F:  CLRF   36
0810:  CLRF   35
0811:  CLRF   34
0812:  CLRF   33
0813:  CLRF   38
0814:  CLRF   37
0815:  BSF    39.0
0816:  BSF    39.1
0817:  BSF    39.2
0818:  CLRF   3B
0819:  CLRF   3A
081A:  MOVLW  FF
081B:  MOVWF  3C
081C:  BSF    03.5
081D:  BSF    03.6
081E:  MOVF   09,W
081F:  ANDLW  C0
0820:  MOVWF  09
0821:  BCF    03.6
0822:  BCF    1F.4
0823:  BCF    1F.5
0824:  MOVLW  00
0825:  BSF    03.6
0826:  MOVWF  08
0827:  BCF    03.5
0828:  CLRF   07
0829:  CLRF   08
082A:  CLRF   09
082B:  BCF    03.7
.................... { 
....................    TRISB0 = TRISC1 = TRISC2 = 1;          //input 
082C:  BSF    03.5
082D:  BCF    03.6
082E:  BSF    07.2
082F:  BSF    07.1
0830:  BSF    06.0
....................    TRISC0 = TRISD2 = TRISD3 = TRISC5 = 0; //output 
0831:  BCF    07.5
0832:  BCF    08.3
0833:  BCF    08.2
0834:  BCF    07.0
....................  
....................    // triac 
....................    TRISD0 = TRISD1 = 0; 
0835:  BCF    08.1
0836:  BCF    08.0
....................    // TRISC6 = TRISC7 = 0; 
....................  
....................    initDipSwitchState(angleStarter, angleRingTheBell, ProtectRotate); 
....................    valTimer0SetStarter = (int32)FLOOR((13.1072 - angleStarter) / 0.0512) - 1; 
*
08CE:  MOVF   2A,W
08CF:  MOVWF  40
08D0:  MOVF   29,W
08D1:  MOVWF  3F
08D2:  MOVF   28,W
08D3:  MOVWF  3E
08D4:  MOVF   27,W
08D5:  MOVWF  3D
08D6:  BCF    0A.3
08D7:  CALL   0EF
08D8:  BSF    0A.3
08D9:  BSF    03.1
08DA:  MOVLW  17
08DB:  MOVWF  57
08DC:  MOVLW  B7
08DD:  MOVWF  56
08DE:  MOVLW  51
08DF:  MOVWF  55
08E0:  MOVLW  82
08E1:  MOVWF  54
08E2:  MOVF   7A,W
08E3:  MOVWF  5B
08E4:  MOVF   79,W
08E5:  MOVWF  5A
08E6:  MOVF   78,W
08E7:  MOVWF  59
08E8:  MOVF   77,W
08E9:  MOVWF  58
08EA:  BCF    0A.3
08EB:  CALL   10A
08EC:  BSF    0A.3
08ED:  MOVF   7A,W
08EE:  MOVWF  40
08EF:  MOVF   79,W
08F0:  MOVWF  3F
08F1:  MOVF   78,W
08F2:  MOVWF  3E
08F3:  MOVF   77,W
08F4:  MOVWF  3D
08F5:  MOVF   40,W
08F6:  MOVWF  44
08F7:  MOVF   3F,W
08F8:  MOVWF  43
08F9:  MOVF   3E,W
08FA:  MOVWF  42
08FB:  MOVF   3D,W
08FC:  MOVWF  41
08FD:  MOVLW  17
08FE:  MOVWF  48
08FF:  MOVLW  B7
0900:  MOVWF  47
0901:  MOVLW  51
0902:  MOVWF  46
0903:  MOVLW  7A
0904:  MOVWF  45
0905:  BCF    0A.3
0906:  CALL   24B
0907:  BSF    0A.3
0908:  MOVF   7A,W
0909:  MOVWF  40
090A:  MOVF   79,W
090B:  MOVWF  3F
090C:  MOVF   78,W
090D:  MOVWF  3E
090E:  MOVF   77,W
090F:  MOVWF  3D
0910:  MOVF   40,W
0911:  MOVWF  44
0912:  MOVF   3F,W
0913:  MOVWF  43
0914:  MOVF   3E,W
0915:  MOVWF  42
0916:  MOVF   3D,W
0917:  MOVWF  41
0918:  BCF    0A.3
0919:  CALL   405
091A:  BSF    0A.3
091B:  MOVF   7A,W
091C:  MOVWF  40
091D:  MOVF   79,W
091E:  MOVWF  3F
091F:  MOVF   78,W
0920:  MOVWF  3E
0921:  MOVF   77,W
0922:  MOVWF  3D
0923:  BCF    0A.3
0924:  CALL   578
0925:  BSF    0A.3
0926:  MOVF   7A,W
0927:  MOVWF  40
0928:  MOVF   79,W
0929:  MOVWF  3F
092A:  MOVF   78,W
092B:  MOVWF  3E
092C:  MOVF   77,W
092D:  MOVWF  3D
092E:  MOVLW  01
092F:  SUBWF  3D,W
0930:  MOVWF  2F
0931:  MOVF   3E,W
0932:  MOVWF  30
0933:  MOVLW  00
0934:  BTFSS  03.0
0935:  MOVLW  01
0936:  SUBWF  30,F
0937:  MOVF   3F,W
0938:  MOVWF  31
0939:  MOVLW  00
093A:  BTFSS  03.0
093B:  MOVLW  01
093C:  SUBWF  31,F
093D:  MOVF   40,W
093E:  MOVWF  32
093F:  MOVLW  00
0940:  BTFSS  03.0
0941:  MOVLW  01
0942:  SUBWF  32,F
....................    valTimer0SetRingTheBell = (int32)FLOOR((13.1072 - angleRingTheBell) / 0.0512) - 1; 
0943:  MOVF   2E,W
0944:  MOVWF  40
0945:  MOVF   2D,W
0946:  MOVWF  3F
0947:  MOVF   2C,W
0948:  MOVWF  3E
0949:  MOVF   2B,W
094A:  MOVWF  3D
094B:  BCF    0A.3
094C:  CALL   0EF
094D:  BSF    0A.3
094E:  BSF    03.1
094F:  MOVLW  17
0950:  MOVWF  57
0951:  MOVLW  B7
0952:  MOVWF  56
0953:  MOVLW  51
0954:  MOVWF  55
0955:  MOVLW  82
0956:  MOVWF  54
0957:  MOVF   7A,W
0958:  MOVWF  5B
0959:  MOVF   79,W
095A:  MOVWF  5A
095B:  MOVF   78,W
095C:  MOVWF  59
095D:  MOVF   77,W
095E:  MOVWF  58
095F:  BCF    0A.3
0960:  CALL   10A
0961:  BSF    0A.3
0962:  MOVF   7A,W
0963:  MOVWF  40
0964:  MOVF   79,W
0965:  MOVWF  3F
0966:  MOVF   78,W
0967:  MOVWF  3E
0968:  MOVF   77,W
0969:  MOVWF  3D
096A:  MOVF   40,W
096B:  MOVWF  44
096C:  MOVF   3F,W
096D:  MOVWF  43
096E:  MOVF   3E,W
096F:  MOVWF  42
0970:  MOVF   3D,W
0971:  MOVWF  41
0972:  MOVLW  17
0973:  MOVWF  48
0974:  MOVLW  B7
0975:  MOVWF  47
0976:  MOVLW  51
0977:  MOVWF  46
0978:  MOVLW  7A
0979:  MOVWF  45
097A:  BCF    0A.3
097B:  CALL   24B
097C:  BSF    0A.3
097D:  MOVF   7A,W
097E:  MOVWF  40
097F:  MOVF   79,W
0980:  MOVWF  3F
0981:  MOVF   78,W
0982:  MOVWF  3E
0983:  MOVF   77,W
0984:  MOVWF  3D
0985:  MOVF   40,W
0986:  MOVWF  44
0987:  MOVF   3F,W
0988:  MOVWF  43
0989:  MOVF   3E,W
098A:  MOVWF  42
098B:  MOVF   3D,W
098C:  MOVWF  41
098D:  BCF    0A.3
098E:  CALL   405
098F:  BSF    0A.3
0990:  MOVF   7A,W
0991:  MOVWF  40
0992:  MOVF   79,W
0993:  MOVWF  3F
0994:  MOVF   78,W
0995:  MOVWF  3E
0996:  MOVF   77,W
0997:  MOVWF  3D
0998:  BCF    0A.3
0999:  CALL   578
099A:  BSF    0A.3
099B:  MOVF   7A,W
099C:  MOVWF  40
099D:  MOVF   79,W
099E:  MOVWF  3F
099F:  MOVF   78,W
09A0:  MOVWF  3E
09A1:  MOVF   77,W
09A2:  MOVWF  3D
09A3:  MOVLW  01
09A4:  SUBWF  3D,W
09A5:  MOVWF  33
09A6:  MOVF   3E,W
09A7:  MOVWF  34
09A8:  MOVLW  00
09A9:  BTFSS  03.0
09AA:  MOVLW  01
09AB:  SUBWF  34,F
09AC:  MOVF   3F,W
09AD:  MOVWF  35
09AE:  MOVLW  00
09AF:  BTFSS  03.0
09B0:  MOVLW  01
09B1:  SUBWF  35,F
09B2:  MOVF   40,W
09B3:  MOVWF  36
09B4:  MOVLW  00
09B5:  BTFSS  03.0
09B6:  MOVLW  01
09B7:  SUBWF  36,F
....................  
....................    output_low(ledSAFETY);   // CLEAR reset pin 
09B8:  BSF    03.5
09B9:  BCF    08.2
09BA:  BCF    03.5
09BB:  BCF    08.2
....................    output_low(ledSTARTING); // CLEAR reset pin 
09BC:  BSF    03.5
09BD:  BCF    08.3
09BE:  BCF    03.5
09BF:  BCF    08.3
....................    output_low(ledRINGING);  // CLEAR reset pin 
09C0:  BCF    3C.5
09C1:  MOVF   3C,W
09C2:  BSF    03.5
09C3:  MOVWF  07
09C4:  BCF    03.5
09C5:  BCF    07.5
....................  
....................    clear_interrupt(INT_EXT); 
09C6:  BCF    0B.1
....................    enable_interrupts(INT_EXT); 
09C7:  BSF    0B.4
....................    ext_int_edge(H_TO_L); 
09C8:  BSF    03.5
09C9:  BCF    01.6
....................  
....................    setup_timer_0(RTCC_INTERNAL | RTCC_DIV_256); // 51.2us 
09CA:  MOVF   01,W
09CB:  ANDLW  C0
09CC:  IORLW  07
09CD:  MOVWF  01
....................    enable_interrupts(INT_TIMER0); 
09CE:  BCF    03.5
09CF:  BSF    0B.5
....................  
....................    setup_ccp1(CCP_CAPTURE_FE); 
09D0:  BSF    3C.2
09D1:  MOVF   3C,W
09D2:  BSF    03.5
09D3:  MOVWF  07
09D4:  BCF    03.5
09D5:  CLRF   17
09D6:  MOVLW  04
09D7:  MOVWF  17
09D8:  BSF    03.5
09D9:  CLRF   1B
09DA:  CLRF   1C
09DB:  MOVLW  01
09DC:  MOVWF  1D
....................    setup_timer_1(T1_INTERNAL); 
09DD:  MOVLW  05
09DE:  BCF    03.5
09DF:  MOVWF  10
....................    enable_interrupts(INT_CCP1); 
09E0:  BSF    03.5
09E1:  BSF    0C.2
....................  
....................    setup_timer_2(T2_DIV_BY_16, 255, 16); // Overflow every 13.056us 
09E2:  MOVLW  78
09E3:  MOVWF  78
09E4:  IORLW  06
09E5:  BCF    03.5
09E6:  MOVWF  12
09E7:  MOVLW  FF
09E8:  BSF    03.5
09E9:  MOVWF  12
....................    set_timer2(0); 
09EA:  BCF    03.5
09EB:  CLRF   11
....................    // iTimer2OverFlow = 50; // 100ms every command 
....................    // iTimer2OverFlow = 7660; // 100ms every command 
....................  
....................    // setup_comparator(A0_VR_A1_VR); 
....................    // setup_vref(VREF_HIGH | 5); 
....................    // enable_interrupts(INT_COMP); 
....................  
....................    enable_interrupts(GLOBAL); 
09EC:  MOVLW  C0
09ED:  IORWF  0B,F
....................  
....................    output_high(ledSAFETY); 
09EE:  BSF    03.5
09EF:  BCF    08.2
09F0:  BCF    03.5
09F1:  BSF    08.2
....................    checkSafetyFirst(1500000); // ~~ 6 seconds 
09F2:  CLRF   40
09F3:  MOVLW  16
09F4:  MOVWF  3F
09F5:  MOVLW  E3
09F6:  MOVWF  3E
09F7:  MOVLW  60
09F8:  MOVWF  3D
09F9:  BCF    0A.3
09FA:  GOTO   5AB
09FB:  BSF    0A.3
....................    output_low(ledSAFETY); 
09FC:  BSF    03.5
09FD:  BCF    08.2
09FE:  BCF    03.5
09FF:  BCF    08.2
....................  
....................    output_high(ledSTARTING); 
0A00:  BSF    03.5
0A01:  BCF    08.3
0A02:  BCF    03.5
0A03:  BSF    08.3
....................    starter(); 
0A04:  BCF    0A.3
0A05:  GOTO   618
0A06:  BSF    0A.3
....................    output_low(ledSTARTING); 
0A07:  BSF    03.5
0A08:  BCF    08.3
0A09:  BCF    03.5
0A0A:  BCF    08.3
....................  
....................    output_high(ledRINGING); 
0A0B:  BCF    3C.5
0A0C:  MOVF   3C,W
0A0D:  BSF    03.5
0A0E:  MOVWF  07
0A0F:  BCF    03.5
0A10:  BSF    07.5
....................    while (TRUE) 
....................    { 
....................       RingTheBell(); 
0A11:  BCF    0A.3
0A12:  GOTO   6B2
0A13:  BSF    0A.3
0A14:  GOTO   211
....................    } 
.................... } 
0A15:  SLEEP

Configuration Fuses:
   Word  1: 2CE2   HS NOWDT PUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
