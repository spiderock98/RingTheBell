CCS PCM C Compiler, Version 5.025, 47277               07-Apr-20 09:12

               Filename:   D:\Desktop\RingTheBell\PIC\main.lst

               ROM used:   1899 words (23%)
                           Largest free fragment is 2048
               RAM used:   46 (12%) at main() level
                           87 (24%) worst case
               Stack used: 3 locations (2 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  06
0001:  MOVWF  0A
0002:  GOTO   645
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.4
0018:  GOTO   01B
0019:  BTFSC  0B.1
001A:  GOTO   036
001B:  MOVLW  8C
001C:  MOVWF  04
001D:  BTFSS  00.2
001E:  GOTO   021
001F:  BTFSC  0C.2
0020:  GOTO   039
0021:  BTFSS  0B.5
0022:  GOTO   025
0023:  BTFSC  0B.2
0024:  GOTO   03C
0025:  MOVF   22,W
0026:  MOVWF  04
0027:  MOVF   23,W
0028:  MOVWF  77
0029:  MOVF   24,W
002A:  MOVWF  78
002B:  MOVF   25,W
002C:  MOVWF  79
002D:  MOVF   26,W
002E:  MOVWF  7A
002F:  MOVF   20,W
0030:  MOVWF  0A
0031:  SWAPF  21,W
0032:  MOVWF  03
0033:  SWAPF  7F,F
0034:  SWAPF  7F,W
0035:  RETFIE
0036:  BCF    0A.3
0037:  BCF    0A.4
0038:  GOTO   03F
0039:  BCF    0A.3
003A:  BCF    0A.4
003B:  GOTO   073
003C:  BCF    0A.3
003D:  BCF    0A.4
003E:  GOTO   059
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
*
008A:  MOVLW  80
008B:  BTFSC  03.1
008C:  XORWF  67,F
008D:  CLRF   6C
008E:  CLRF   6D
008F:  MOVF   63,W
0090:  MOVWF  6B
0091:  MOVF   67,W
0092:  XORWF  6B,F
0093:  MOVF   62,W
0094:  BTFSC  03.2
0095:  GOTO   17A
0096:  MOVWF  6A
0097:  MOVWF  77
0098:  MOVF   66,W
0099:  BTFSC  03.2
009A:  GOTO   183
009B:  SUBWF  6A,F
009C:  BTFSC  03.2
009D:  GOTO   11F
009E:  BTFSS  03.0
009F:  GOTO   0DD
00A0:  MOVF   67,W
00A1:  MOVWF  70
00A2:  BSF    70.7
00A3:  MOVF   68,W
00A4:  MOVWF  6F
00A5:  MOVF   69,W
00A6:  MOVWF  6E
00A7:  CLRF   6D
00A8:  BCF    03.0
00A9:  RRF    70,F
00AA:  RRF    6F,F
00AB:  RRF    6E,F
00AC:  RRF    6D,F
00AD:  DECFSZ 6A,F
00AE:  GOTO   0A7
00AF:  BTFSS  6B.7
00B0:  GOTO   0B4
00B1:  BSF    6C.0
00B2:  GOTO   197
00B3:  BCF    6C.0
00B4:  BCF    6A.0
00B5:  BSF    6C.4
00B6:  MOVLW  65
00B7:  MOVWF  04
00B8:  BCF    03.7
00B9:  GOTO   1AC
00BA:  BCF    6C.4
00BB:  BTFSC  6B.7
00BC:  GOTO   0C7
00BD:  BTFSS  6A.0
00BE:  GOTO   0D2
00BF:  RRF    70,F
00C0:  RRF    6F,F
00C1:  RRF    6E,F
00C2:  RRF    6D,F
00C3:  INCF   77,F
00C4:  BTFSC  03.2
00C5:  GOTO   192
00C6:  GOTO   0D2
00C7:  BTFSC  70.7
00C8:  GOTO   0D5
00C9:  BCF    03.0
00CA:  RLF    6D,F
00CB:  RLF    6E,F
00CC:  RLF    6F,F
00CD:  RLF    70,F
00CE:  DECF   77,F
00CF:  BTFSC  03.2
00D0:  GOTO   192
00D1:  GOTO   0C7
00D2:  BSF    6C.6
00D3:  GOTO   13F
00D4:  BCF    6C.6
00D5:  MOVF   63,W
00D6:  MOVWF  6B
00D7:  BTFSS  6B.7
00D8:  GOTO   0DB
00D9:  BSF    70.7
00DA:  GOTO   18B
00DB:  BCF    70.7
00DC:  GOTO   18B
00DD:  MOVF   66,W
00DE:  MOVWF  6A
00DF:  MOVWF  77
00E0:  MOVF   62,W
00E1:  SUBWF  6A,F
00E2:  MOVF   63,W
00E3:  MOVWF  70
00E4:  BSF    70.7
00E5:  MOVF   64,W
00E6:  MOVWF  6F
00E7:  MOVF   65,W
00E8:  MOVWF  6E
00E9:  CLRF   6D
00EA:  BCF    03.0
00EB:  RRF    70,F
00EC:  RRF    6F,F
00ED:  RRF    6E,F
00EE:  RRF    6D,F
00EF:  DECFSZ 6A,F
00F0:  GOTO   0E9
00F1:  BTFSS  6B.7
00F2:  GOTO   0F6
00F3:  BSF    6C.1
00F4:  GOTO   197
00F5:  BCF    6C.1
00F6:  BCF    6A.0
00F7:  BSF    6C.5
00F8:  MOVLW  69
00F9:  MOVWF  04
00FA:  BCF    03.7
00FB:  GOTO   1AC
00FC:  BCF    6C.5
00FD:  BTFSC  6B.7
00FE:  GOTO   109
00FF:  BTFSS  6A.0
0100:  GOTO   114
0101:  RRF    70,F
0102:  RRF    6F,F
0103:  RRF    6E,F
0104:  RRF    6D,F
0105:  INCF   77,F
0106:  BTFSC  03.2
0107:  GOTO   192
0108:  GOTO   114
0109:  BTFSC  70.7
010A:  GOTO   117
010B:  BCF    03.0
010C:  RLF    6D,F
010D:  RLF    6E,F
010E:  RLF    6F,F
010F:  RLF    70,F
0110:  DECF   77,F
0111:  BTFSC  03.2
0112:  GOTO   192
0113:  GOTO   109
0114:  BSF    6C.7
0115:  GOTO   13F
0116:  BCF    6C.7
0117:  MOVF   67,W
0118:  MOVWF  6B
0119:  BTFSS  6B.7
011A:  GOTO   11D
011B:  BSF    70.7
011C:  GOTO   18B
011D:  BCF    70.7
011E:  GOTO   18B
011F:  MOVF   67,W
0120:  MOVWF  70
0121:  BSF    70.7
0122:  MOVF   68,W
0123:  MOVWF  6F
0124:  MOVF   69,W
0125:  MOVWF  6E
0126:  BTFSS  6B.7
0127:  GOTO   12C
0128:  BCF    70.7
0129:  BSF    6C.2
012A:  GOTO   197
012B:  BCF    6C.2
012C:  CLRF   6D
012D:  BCF    6A.0
012E:  MOVLW  65
012F:  MOVWF  04
0130:  BCF    03.7
0131:  GOTO   1AC
0132:  BTFSC  6B.7
0133:  GOTO   155
0134:  MOVF   63,W
0135:  MOVWF  6B
0136:  BTFSS  6A.0
0137:  GOTO   13F
0138:  RRF    70,F
0139:  RRF    6F,F
013A:  RRF    6E,F
013B:  RRF    6D,F
013C:  INCF   77,F
013D:  BTFSC  03.2
013E:  GOTO   192
013F:  BTFSS  6D.7
0140:  GOTO   150
0141:  INCF   6E,F
0142:  BTFSS  03.2
0143:  GOTO   150
0144:  INCF   6F,F
0145:  BTFSS  03.2
0146:  GOTO   150
0147:  INCF   70,F
0148:  BTFSS  03.2
0149:  GOTO   150
014A:  RRF    70,F
014B:  RRF    6F,F
014C:  RRF    6E,F
014D:  INCF   77,F
014E:  BTFSC  03.2
014F:  GOTO   192
0150:  BTFSC  6C.6
0151:  GOTO   0D4
0152:  BTFSC  6C.7
0153:  GOTO   116
0154:  GOTO   174
0155:  MOVLW  80
0156:  XORWF  70,F
0157:  BTFSS  70.7
0158:  GOTO   15D
0159:  GOTO   197
015A:  MOVF   67,W
015B:  MOVWF  6B
015C:  GOTO   16A
015D:  MOVF   63,W
015E:  MOVWF  6B
015F:  MOVF   70,F
0160:  BTFSS  03.2
0161:  GOTO   16A
0162:  MOVF   6F,F
0163:  BTFSS  03.2
0164:  GOTO   16A
0165:  MOVF   6E,F
0166:  BTFSS  03.2
0167:  GOTO   16A
0168:  CLRF   77
0169:  GOTO   18B
016A:  BTFSC  70.7
016B:  GOTO   174
016C:  BCF    03.0
016D:  RLF    6D,F
016E:  RLF    6E,F
016F:  RLF    6F,F
0170:  RLF    70,F
0171:  DECFSZ 77,F
0172:  GOTO   16A
0173:  GOTO   192
0174:  BTFSS  6B.7
0175:  GOTO   178
0176:  BSF    70.7
0177:  GOTO   18B
0178:  BCF    70.7
0179:  GOTO   18B
017A:  MOVF   66,W
017B:  MOVWF  77
017C:  MOVF   67,W
017D:  MOVWF  70
017E:  MOVF   68,W
017F:  MOVWF  6F
0180:  MOVF   69,W
0181:  MOVWF  6E
0182:  GOTO   18B
0183:  MOVF   62,W
0184:  MOVWF  77
0185:  MOVF   63,W
0186:  MOVWF  70
0187:  MOVF   64,W
0188:  MOVWF  6F
0189:  MOVF   65,W
018A:  MOVWF  6E
018B:  MOVF   70,W
018C:  MOVWF  78
018D:  MOVF   6F,W
018E:  MOVWF  79
018F:  MOVF   6E,W
0190:  MOVWF  7A
0191:  GOTO   1CA
0192:  CLRF   77
0193:  CLRF   78
0194:  CLRF   79
0195:  CLRF   7A
0196:  GOTO   1CA
0197:  CLRF   6D
0198:  COMF   6E,F
0199:  COMF   6F,F
019A:  COMF   70,F
019B:  COMF   6D,F
019C:  INCF   6D,F
019D:  BTFSS  03.2
019E:  GOTO   1A5
019F:  INCF   6E,F
01A0:  BTFSS  03.2
01A1:  GOTO   1A5
01A2:  INCF   6F,F
01A3:  BTFSC  03.2
01A4:  INCF   70,F
01A5:  BTFSC  6C.0
01A6:  GOTO   0B3
01A7:  BTFSC  6C.1
01A8:  GOTO   0F5
01A9:  BTFSC  6C.2
01AA:  GOTO   12B
01AB:  GOTO   15A
01AC:  MOVF   00,W
01AD:  ADDWF  6E,F
01AE:  BTFSS  03.0
01AF:  GOTO   1B6
01B0:  INCF   6F,F
01B1:  BTFSS  03.2
01B2:  GOTO   1B6
01B3:  INCF   70,F
01B4:  BTFSC  03.2
01B5:  BSF    6A.0
01B6:  DECF   04,F
01B7:  MOVF   00,W
01B8:  ADDWF  6F,F
01B9:  BTFSS  03.0
01BA:  GOTO   1BE
01BB:  INCF   70,F
01BC:  BTFSC  03.2
01BD:  BSF    6A.0
01BE:  DECF   04,F
01BF:  MOVF   00,W
01C0:  BTFSS  00.7
01C1:  XORLW  80
01C2:  ADDWF  70,F
01C3:  BTFSC  03.0
01C4:  BSF    6A.0
01C5:  BTFSC  6C.4
01C6:  GOTO   0BA
01C7:  BTFSC  6C.5
01C8:  GOTO   0FC
01C9:  GOTO   132
01CA:  RETURN
01CB:  MOVF   4F,W
01CC:  BTFSC  03.2
01CD:  GOTO   290
01CE:  MOVWF  5B
01CF:  MOVF   53,W
01D0:  BTFSC  03.2
01D1:  GOTO   290
01D2:  SUBWF  5B,F
01D3:  BTFSS  03.0
01D4:  GOTO   1DA
01D5:  MOVLW  7F
01D6:  ADDWF  5B,F
01D7:  BTFSC  03.0
01D8:  GOTO   290
01D9:  GOTO   1E0
01DA:  MOVLW  81
01DB:  SUBWF  5B,F
01DC:  BTFSS  03.0
01DD:  GOTO   290
01DE:  BTFSC  03.2
01DF:  GOTO   290
01E0:  MOVF   5B,W
01E1:  MOVWF  77
01E2:  CLRF   78
01E3:  CLRF   79
01E4:  CLRF   7A
01E5:  CLRF   5A
01E6:  MOVF   50,W
01E7:  MOVWF  59
01E8:  BSF    59.7
01E9:  MOVF   51,W
01EA:  MOVWF  58
01EB:  MOVF   52,W
01EC:  MOVWF  57
01ED:  MOVLW  19
01EE:  MOVWF  5B
01EF:  MOVF   56,W
01F0:  SUBWF  57,F
01F1:  BTFSC  03.0
01F2:  GOTO   203
01F3:  MOVLW  01
01F4:  SUBWF  58,F
01F5:  BTFSC  03.0
01F6:  GOTO   203
01F7:  SUBWF  59,F
01F8:  BTFSC  03.0
01F9:  GOTO   203
01FA:  SUBWF  5A,F
01FB:  BTFSC  03.0
01FC:  GOTO   203
01FD:  INCF   5A,F
01FE:  INCF   59,F
01FF:  INCF   58,F
0200:  MOVF   56,W
0201:  ADDWF  57,F
0202:  GOTO   235
0203:  MOVF   55,W
0204:  SUBWF  58,F
0205:  BTFSC  03.0
0206:  GOTO   21E
0207:  MOVLW  01
0208:  SUBWF  59,F
0209:  BTFSC  03.0
020A:  GOTO   21E
020B:  SUBWF  5A,F
020C:  BTFSC  03.0
020D:  GOTO   21E
020E:  INCF   5A,F
020F:  INCF   59,F
0210:  MOVF   55,W
0211:  ADDWF  58,F
0212:  MOVF   56,W
0213:  ADDWF  57,F
0214:  BTFSS  03.0
0215:  GOTO   235
0216:  INCF   58,F
0217:  BTFSS  03.2
0218:  GOTO   235
0219:  INCF   59,F
021A:  BTFSS  03.2
021B:  GOTO   235
021C:  INCF   5A,F
021D:  GOTO   235
021E:  MOVF   54,W
021F:  IORLW  80
0220:  SUBWF  59,F
0221:  BTFSC  03.0
0222:  GOTO   234
0223:  MOVLW  01
0224:  SUBWF  5A,F
0225:  BTFSC  03.0
0226:  GOTO   234
0227:  INCF   5A,F
0228:  MOVF   54,W
0229:  IORLW  80
022A:  ADDWF  59,F
022B:  MOVF   55,W
022C:  ADDWF  58,F
022D:  BTFSS  03.0
022E:  GOTO   212
022F:  INCF   59,F
0230:  BTFSS  03.2
0231:  GOTO   212
0232:  INCF   5A,F
0233:  GOTO   212
0234:  BSF    7A.0
0235:  DECFSZ 5B,F
0236:  GOTO   238
0237:  GOTO   243
0238:  BCF    03.0
0239:  RLF    57,F
023A:  RLF    58,F
023B:  RLF    59,F
023C:  RLF    5A,F
023D:  BCF    03.0
023E:  RLF    7A,F
023F:  RLF    79,F
0240:  RLF    78,F
0241:  RLF    5C,F
0242:  GOTO   1EF
0243:  BTFSS  5C.0
0244:  GOTO   24B
0245:  BCF    03.0
0246:  RRF    78,F
0247:  RRF    79,F
0248:  RRF    7A,F
0249:  RRF    5C,F
024A:  GOTO   24E
024B:  DECF   77,F
024C:  BTFSC  03.2
024D:  GOTO   290
024E:  BTFSC  5C.7
024F:  GOTO   277
0250:  BCF    03.0
0251:  RLF    57,F
0252:  RLF    58,F
0253:  RLF    59,F
0254:  RLF    5A,F
0255:  MOVF   56,W
0256:  SUBWF  57,F
0257:  BTFSC  03.0
0258:  GOTO   263
0259:  MOVLW  01
025A:  SUBWF  58,F
025B:  BTFSC  03.0
025C:  GOTO   263
025D:  SUBWF  59,F
025E:  BTFSC  03.0
025F:  GOTO   263
0260:  SUBWF  5A,F
0261:  BTFSS  03.0
0262:  GOTO   286
0263:  MOVF   55,W
0264:  SUBWF  58,F
0265:  BTFSC  03.0
0266:  GOTO   26E
0267:  MOVLW  01
0268:  SUBWF  59,F
0269:  BTFSC  03.0
026A:  GOTO   26E
026B:  SUBWF  5A,F
026C:  BTFSS  03.0
026D:  GOTO   286
026E:  MOVF   54,W
026F:  IORLW  80
0270:  SUBWF  59,F
0271:  BTFSC  03.0
0272:  GOTO   277
0273:  MOVLW  01
0274:  SUBWF  5A,F
0275:  BTFSS  03.0
0276:  GOTO   286
0277:  INCF   7A,F
0278:  BTFSS  03.2
0279:  GOTO   286
027A:  INCF   79,F
027B:  BTFSS  03.2
027C:  GOTO   286
027D:  INCF   78,F
027E:  BTFSS  03.2
027F:  GOTO   286
0280:  INCF   77,F
0281:  BTFSC  03.2
0282:  GOTO   290
0283:  RRF    78,F
0284:  RRF    79,F
0285:  RRF    7A,F
0286:  MOVF   50,W
0287:  MOVWF  5B
0288:  MOVF   54,W
0289:  XORWF  5B,F
028A:  BTFSS  5B.7
028B:  GOTO   28E
028C:  BSF    78.7
028D:  GOTO   294
028E:  BCF    78.7
028F:  GOTO   294
0290:  CLRF   77
0291:  CLRF   78
0292:  CLRF   79
0293:  CLRF   7A
0294:  RETURN
0295:  MOVF   5F,W
0296:  MOVWF  66
0297:  MOVF   63,W
0298:  XORWF  66,F
0299:  BTFSS  66.7
029A:  GOTO   2A0
029B:  BCF    03.2
029C:  BCF    03.0
029D:  BTFSC  5F.7
029E:  BSF    03.0
029F:  GOTO   2D3
02A0:  MOVF   5F,W
02A1:  MOVWF  66
02A2:  MOVF   62,W
02A3:  MOVWF  67
02A4:  MOVF   5E,W
02A5:  SUBWF  67,F
02A6:  BTFSC  03.2
02A7:  GOTO   2AE
02A8:  BTFSS  66.7
02A9:  GOTO   2D3
02AA:  MOVF   03,W
02AB:  XORLW  01
02AC:  MOVWF  03
02AD:  GOTO   2D3
02AE:  MOVF   63,W
02AF:  MOVWF  67
02B0:  MOVF   5F,W
02B1:  SUBWF  67,F
02B2:  BTFSC  03.2
02B3:  GOTO   2BA
02B4:  BTFSS  66.7
02B5:  GOTO   2D3
02B6:  MOVF   03,W
02B7:  XORLW  01
02B8:  MOVWF  03
02B9:  GOTO   2D3
02BA:  MOVF   64,W
02BB:  MOVWF  67
02BC:  MOVF   60,W
02BD:  SUBWF  67,F
02BE:  BTFSC  03.2
02BF:  GOTO   2C6
02C0:  BTFSS  66.7
02C1:  GOTO   2D3
02C2:  MOVF   03,W
02C3:  XORLW  01
02C4:  MOVWF  03
02C5:  GOTO   2D3
02C6:  MOVF   65,W
02C7:  MOVWF  67
02C8:  MOVF   61,W
02C9:  SUBWF  67,F
02CA:  BTFSC  03.2
02CB:  GOTO   2D2
02CC:  BTFSS  66.7
02CD:  GOTO   2D3
02CE:  MOVF   03,W
02CF:  XORLW  01
02D0:  MOVWF  03
02D1:  GOTO   2D3
02D2:  BCF    03.0
02D3:  RETURN
02D4:  MOVLW  8E
02D5:  MOVWF  77
02D6:  MOVF   5E,W
02D7:  SUBWF  77,F
02D8:  MOVF   5F,W
02D9:  MOVWF  79
02DA:  MOVF   60,W
02DB:  MOVWF  78
02DC:  BSF    79.7
02DD:  MOVF   77,F
02DE:  BTFSC  03.2
02DF:  GOTO   2EB
02E0:  BCF    03.0
02E1:  MOVF   79,F
02E2:  BTFSS  03.2
02E3:  GOTO   2E7
02E4:  MOVF   78,F
02E5:  BTFSC  03.2
02E6:  GOTO   2EB
02E7:  RRF    79,F
02E8:  RRF    78,F
02E9:  DECFSZ 77,F
02EA:  GOTO   2E0
02EB:  BTFSS  5F.7
02EC:  GOTO   2F2
02ED:  COMF   78,F
02EE:  COMF   79,F
02EF:  INCF   78,F
02F0:  BTFSC  03.2
02F1:  INCF   79,F
02F2:  RETURN
02F3:  MOVLW  8E
02F4:  MOVWF  77
02F5:  MOVF   63,W
02F6:  MOVWF  78
02F7:  MOVF   62,W
02F8:  MOVWF  79
02F9:  CLRF   7A
02FA:  MOVF   78,F
02FB:  BTFSS  03.2
02FC:  GOTO   307
02FD:  MOVF   79,W
02FE:  MOVWF  78
02FF:  CLRF   79
0300:  MOVLW  08
0301:  SUBWF  77,F
0302:  MOVF   78,F
0303:  BTFSS  03.2
0304:  GOTO   307
0305:  CLRF   77
0306:  GOTO   30F
0307:  BCF    03.0
0308:  BTFSC  78.7
0309:  GOTO   30E
030A:  RLF    79,F
030B:  RLF    78,F
030C:  DECF   77,F
030D:  GOTO   307
030E:  BCF    78.7
030F:  RETURN
0310:  MOVF   5E,W
0311:  BTFSC  03.2
0312:  GOTO   380
0313:  MOVWF  66
0314:  MOVF   62,W
0315:  BTFSC  03.2
0316:  GOTO   380
0317:  ADDWF  66,F
0318:  BTFSC  03.0
0319:  GOTO   321
031A:  MOVLW  7F
031B:  SUBWF  66,F
031C:  BTFSS  03.0
031D:  GOTO   380
031E:  BTFSC  03.2
031F:  GOTO   380
0320:  GOTO   325
0321:  MOVLW  81
0322:  ADDWF  66,F
0323:  BTFSC  03.0
0324:  GOTO   380
0325:  MOVF   66,W
0326:  MOVWF  77
0327:  CLRF   78
0328:  CLRF   79
0329:  CLRF   7A
032A:  MOVF   5F,W
032B:  MOVWF  6A
032C:  BSF    6A.7
032D:  MOVF   60,W
032E:  MOVWF  69
032F:  MOVF   61,W
0330:  MOVWF  68
0331:  MOVLW  18
0332:  MOVWF  66
0333:  CLRF   67
0334:  BTFSS  68.0
0335:  GOTO   34E
0336:  MOVF   65,W
0337:  ADDWF  7A,F
0338:  BTFSS  03.0
0339:  GOTO   340
033A:  INCF   79,F
033B:  BTFSS  03.2
033C:  GOTO   340
033D:  INCF   78,F
033E:  BTFSC  03.2
033F:  BSF    67.7
0340:  MOVF   64,W
0341:  ADDWF  79,F
0342:  BTFSS  03.0
0343:  GOTO   347
0344:  INCF   78,F
0345:  BTFSC  03.2
0346:  BSF    67.7
0347:  MOVF   63,W
0348:  MOVWF  60
0349:  BSF    60.7
034A:  MOVF   60,W
034B:  ADDWF  78,F
034C:  BTFSC  03.0
034D:  BSF    67.7
034E:  RLF    67,F
034F:  RRF    78,F
0350:  RRF    79,F
0351:  RRF    7A,F
0352:  RRF    6A,F
0353:  RRF    69,F
0354:  RRF    68,F
0355:  BCF    03.0
0356:  DECFSZ 66,F
0357:  GOTO   333
0358:  MOVLW  01
0359:  ADDWF  77,F
035A:  BTFSC  03.0
035B:  GOTO   380
035C:  BTFSC  78.7
035D:  GOTO   365
035E:  RLF    6A,F
035F:  RLF    7A,F
0360:  RLF    79,F
0361:  RLF    78,F
0362:  DECF   77,F
0363:  BTFSC  03.2
0364:  GOTO   380
0365:  BTFSS  6A.7
0366:  GOTO   376
0367:  INCF   7A,F
0368:  BTFSS  03.2
0369:  GOTO   376
036A:  INCF   79,F
036B:  BTFSS  03.2
036C:  GOTO   376
036D:  INCF   78,F
036E:  BTFSS  03.2
036F:  GOTO   376
0370:  RRF    78,F
0371:  RRF    79,F
0372:  RRF    7A,F
0373:  INCF   77,F
0374:  BTFSC  03.2
0375:  GOTO   380
0376:  MOVF   5F,W
0377:  MOVWF  67
0378:  MOVF   63,W
0379:  XORWF  67,F
037A:  BTFSS  67.7
037B:  GOTO   37E
037C:  BSF    78.7
037D:  GOTO   384
037E:  BCF    78.7
037F:  GOTO   384
0380:  CLRF   77
0381:  CLRF   78
0382:  CLRF   79
0383:  CLRF   7A
0384:  RETURN
*
04F8:  MOVF   4B,W
04F9:  SUBLW  B6
04FA:  MOVWF  4B
04FB:  CLRF   7A
04FC:  MOVF   4C,W
04FD:  MOVWF  4F
04FE:  BSF    4C.7
04FF:  BCF    03.0
0500:  RRF    4C,F
0501:  RRF    4D,F
0502:  RRF    4E,F
0503:  RRF    7A,F
0504:  RRF    79,F
0505:  RRF    78,F
0506:  RRF    77,F
0507:  DECFSZ 4B,F
0508:  GOTO   4FF
0509:  BTFSS  4F.7
050A:  GOTO   516
050B:  COMF   77,F
050C:  COMF   78,F
050D:  COMF   79,F
050E:  COMF   7A,F
050F:  INCF   77,F
0510:  BTFSC  03.2
0511:  INCF   78,F
0512:  BTFSC  03.2
0513:  INCF   79,F
0514:  BTFSC  03.2
0515:  INCF   7A,F
0516:  RETURN
....................  
.................... #list 
....................  
.................... #include <def_16f877a.h> 
.................... //========================= Register Definitions ========================== 
.................... //-----Register Files------------------------------------------------------ 
.................... #byte INDF         =0x00 
.................... #byte TMR0         =0x01 
.................... #byte PCL          =0x02 
.................... #byte STATUS       =0x03 
.................... #byte FSR          =0x04 
.................... #byte PORTA    = 0x05 
.................... #byte PORTB    = 0x06 
.................... #byte PORTC    = 0x07 
.................... #byte PORTD    = 0x08 
.................... #byte PORTE    = 0x09 
.................... #byte PCLATH       =0x0A 
.................... #byte INTCON       =0x0B 
.................... #byte PIR1	   =0x0C 
.................... #byte PIR2	   =0x0D 
.................... #byte TMR1L	   =0x0E 
.................... #byte TMR1H        =0x0F 
.................... #byte T1CON        =0x10 
.................... #byte TMR2	   =0x11 
.................... #byte T2CON	   =0x12 
.................... #byte SSPBUF       =0x13 
.................... #byte SSPCON       =0x14 
.................... #byte CCPR1L       =0x15 
.................... #byte CCPR1H       =0x16 
.................... #byte CCP1CON      =0x17 
.................... #byte RCSTA        =0x18 
.................... #byte TXREG        =0x19 
.................... #byte RCREG        =0x1A 
.................... #byte CCPR2L       =0x1B 
.................... #byte CCPR2H       =0x1C 
.................... #byte CCP2CON      =0x1D 
.................... #byte ADRESH       =0x1E 
.................... #byte ADCON0	   =0x1F 
.................... #byte OPTION_REG   =0x81 
.................... //-------------- TRIS PORT ----------------------------- 
.................... #byte TRISA        =0x85 
.................... #byte TRISB	   =0x86 
.................... #byte TRISC	   =0x87 
.................... #byte TRISD        =0x88 
.................... #byte TRISE	   =0x89 
.................... #byte PIE1	   =0x8C 
.................... #byte PIE2	   =0x8D 
.................... #byte PCON	   =0x8E 
....................  
.................... #byte SSPCON2      =0x91 
.................... #byte PR2          =0x92 
.................... #byte SSPADD       =0x93 
.................... #byte SSPSTAT      =0x94 
....................  
.................... #byte TXSTA        =0x98 
.................... #byte SPBRG        =0x99 
....................  
.................... #byte ADRESL       =0x9E 
.................... #byte ADCON1       =0x9F 
....................  
.................... /*	bank 2 registers */ 
....................  
.................... #byte EEDATA	   =0x010C 
.................... #byte EEADR	   =0x010D 
.................... #byte EEDATH       =0x010E 
.................... #byte EEADRH       =0x010F 
....................  
.................... /*	bank 3 registers */ 
....................  
.................... #byte EECON1	   =0x018C 
.................... #byte EECON2	   =0x018D 
....................  
.................... //----- STATUS Bits -------------------------------------------------------- 
....................  
.................... // For Assembly Language - Note upper case 
.................... #define IRP 	7 
.................... #define RP1 	6 
.................... #define RP0 	5 
.................... #define NOT_TO 	4 
.................... #define NOT_PD 	3 
.................... #define Z 	2 
.................... #define DC 	1 
.................... #define C  	0 
....................  
.................... //---------------- TRIS BIT PORT-------------------------------------- 
.................... //------------------TRISA bits--------------------------- 
....................  
.................... #bit TRISA5     =0x85.5 
.................... #bit TRISA4     =0x85.4 
.................... #bit TRISA3     =0x85.3 
.................... #bit TRISA2     =0x85.2 
.................... #bit TRISA1     =0x85.1 
.................... #bit TRISA0     =0x85.0 
....................  
.................... //-----------------TRISB bits----------------------------- 
....................  
.................... #bit TRISB7     =0x86.7 
.................... #bit TRISB6     =0x86.6 
.................... #bit TRISB5     =0x86.5 
.................... #bit TRISB4     =0x86.4 
.................... #bit TRISB3     =0x86.3 
.................... #bit TRISB2     =0x86.2 
.................... #bit TRISB1     =0x86.1 
.................... #bit TRISB0     =0x86.0 
....................  
.................... //----------------TRISC bits------------------- 
....................  
.................... #bit TRISC7     =0x87.7 
.................... #bit TRISC6     =0x87.6 
.................... #bit TRISC5     =0x87.5 
.................... #bit TRISC4     =0x87.4 
.................... #bit TRISC3     =0x87.3 
.................... #bit TRISC2     =0x87.2 
.................... #bit TRISC1     =0x87.1 
.................... #bit TRISC0     =0x87.0 
.................... //------------------TRISD bit------------------ 
.................... #bit TRISD7     =0x88.7 
.................... #bit TRISD6     =0x88.6 
.................... #bit TRISD5     =0x88.5 
.................... #bit TRISD4     =0x88.4 
.................... #bit TRISD3     =0x88.3 
.................... #bit TRISD2     =0x88.2 
.................... #bit TRISD1     =0x88.1 
.................... #bit TRISD0     =0x88.0 
.................... //-------------TRISE bit---------------------- 
.................... #bit TRISE2     =0x89.2 
.................... #bit TRISE1     =0x89.1 
.................... #bit TRISE0     =0x89.0 
.................... //--------------------------------------------------------------------------- 
.................... //---------PORTA bits------------------ 
.................... #bit RA4			= 0x05.4 
.................... #bit RA3			= 0x05.3 
.................... #bit RA2			= 0x05.2 
.................... #bit RA1			= 0x05.1 
.................... #bit RA0			= 0x05.0 
.................... //---------PORTB bits------------------ 
.................... #bit RB7			= 0x06.7 
.................... #bit RB6			= 0x06.6 
.................... #bit RB5			= 0x06.5 
.................... #bit RB4			= 0x06.4 
.................... #bit RB3			= 0x06.3 
.................... #bit RB2			= 0x06.2 
.................... #bit RB1			= 0x06.1 
.................... #bit RB0			= 0x06.0 
.................... //---------PORTC bits------------------ 
.................... #bit RC7			= 0x07.7 
.................... #bit RC6			= 0x07.6 
.................... #bit RC5			= 0x07.5 
.................... #bit RC4			= 0x07.4 
.................... #bit RC3			= 0x07.3 
.................... #bit RC2			= 0x07.2 
.................... #bit RC1			= 0x07.1 
.................... #bit RC0			= 0x07.0 
.................... //---------PORTD bits------------------ 
.................... #bit RD7			= 0x08.7 
.................... #bit RD6			= 0x08.6 
.................... #bit RD5			= 0x08.5 
.................... #bit RD4			= 0x08.4 
.................... #bit RD3			= 0x08.3 
.................... #bit RD2			= 0x08.2 
.................... #bit RD1			= 0x08.1 
.................... #bit RD0			= 0x08.0 
.................... //---------PORTE bits------------------ 
.................... #bit RE2			= 0x09.2 
.................... #bit RE1			= 0x09.1 
.................... #bit RE0			= 0x09.0 
....................  
.................... //----- INTCON ------------------------------------------------------------- 
....................  
.................... #bit	GIE      = 0x0b.7 
.................... #bit	PEIE     = 0x0b.6 
.................... #bit	TMR0IE   = 0x0b.5 
.................... #bit	INTE     = 0x0b.4 
.................... #bit	RBIE     = 0x0b.3 
.................... #bit	TMR0IF   = 0x0b.2 
.................... #bit	INTF     = 0x0b.1 
.................... #bit	RBIF     = 0x0b.0 
....................  
.................... //----- PIR1 --------------------------------------------------------------- 
....................  
.................... #bit pspif     = 0x0c.7 
.................... #bit adif      = 0x0c.6 
.................... #bit rcif      = 0x0c.5 
.................... #bit txif      = 0x0c.4 
.................... #bit sspif     = 0x0c.3 
.................... #bit ccp1if    = 0x0c.2 
.................... #bit tmr2if    = 0x0c.1 
.................... #bit tmr1if    = 0x0c.0 
....................  
.................... //----- PIR2 --------------------------------------------------------------- 
....................  
.................... #bit cmif      = 0x0d.6 
.................... #bit eeif      = 0x0d.4 
.................... #bit bclif     = 0x0d.3 
.................... #bit ccp2if    = 0x0d.0 
....................  
.................... //----- PIE1 --------------------------------------------------------------- 
....................  
.................... #bit pspie     = 0x8c.7 
.................... #bit adie      = 0x8c.6 
.................... #bit rcie      = 0x8c.5 
.................... #bit txie      = 0x8c.4 
.................... #bit sspie     = 0x8c.3 
.................... #bit ccp1ie    = 0x8c.2 
.................... #bit tmr2ie    = 0x8c.1 
.................... #bit tmr1ie    = 0x8c.0 
....................  
.................... //----- PIE2 --------------------------------------------------------------- 
....................  
.................... #bit cmie      = 0x8d.6 
.................... #bit eeie      = 0x8d.4 
.................... #bit bclie     = 0x8d.3 
.................... #bit ccp2ie    = 0x8d.0 
.................... //----- T1CON Bits --------------------------------------------------------- 
.................... #bit T1CKPS1    =0x10.5 
.................... #bit T1CKPS0    =0x10.4 
.................... #bit T1OSCEN    =0x10.3 
.................... #bit T1SYNC     =0x10.2 
.................... #bit TMR1CS     =0x10.1 
.................... #bit TMR1ON     =0x10.0 
....................  
.................... //----- T2CON Bits --------------------------------------------------------- 
.................... #bit TOUTPS3    =0x12.6 
.................... #bit TOUTPS2    =0x12.5 
.................... #bit TOUTPS1    =0x12.4 
.................... #bit TOUTPS0    =0x12.3 
.................... #bit TMR2ON     =0x12.2 
.................... #bit T2CKPS1    =0x12.1 
.................... #bit T2CKPS0    =0x12.0 
....................  
.................... //-------------SSPCON bits-------------------------- 
.................... #bit WCOL       =0x14.7 
.................... #bit SSPOV      =0x14.6 
.................... #bit SSPEN      =0x14.5 
.................... #bit CKP        =0x14.4 
.................... #bit SSPM3      =0x14.3 
.................... #bit SSPM2      =0x14.2 
.................... #bit SSPM1      =0x14.1 
.................... #bit SSPM0      =0x14.0 
....................  
.................... //---------------CCP1CON bits-------- 
.................... #bit CCP1X      =0x17.5 
.................... #bit CCP1Y      =0x17.4 
.................... #bit CCP1M3     =0x17.3 
.................... #bit CCP1M2     =0x17.2 
.................... #bit CCP1M1     =0x17.1 
.................... #bit CCP1M0     =0x17.0 
....................  
.................... //---------------RCSTA bits------------------- 
....................  
.................... #bit SPEN       =0x18.7 
.................... #bit RX9        =0x18.6 
.................... #bit SREN       =0x18.5 
.................... #bit CREN       =0x18.4 
.................... #bit ADDEN      =0x18.3 
.................... #bit FERR       =0x18.2 
.................... #bit OERR       =0x18.1 
.................... #bit RX9D       =0x18.0 
....................  
.................... //-----------------------CCP2CON bits---------- 
....................  
.................... #bit CCP2X      =0x1D.5 
.................... #bit CCP2Y      =0x1D.4 
.................... #bit CCP2M3     =0x1D.3 
.................... #bit CCP2M2     =0x1D.2 
.................... #bit CCP2M1     =0x1D.1 
.................... #bit CCP2M0     =0x1D.0 
....................  
.................... //----- ADCON0 Bits -------------------------------------------------------- 
.................... #bit ADCS1      =0x1F.7 
.................... #bit ADCS0      =0x1F.6 
.................... #bit CHS2       =0x1F.5 
.................... #bit CHS1       =0x1F.4 
.................... #bit CHS0       =0x1F.3 
.................... #bit ADGO       =0x1F.2 
.................... #bit ADON       =0x1F.0 
....................  
.................... //----- OPTION_reg Bits -------------------------------------------------------- 
....................  
.................... #bit RBPU       =0x81.7 
.................... #bit INTEDG     =0x81.6 
.................... #bit T0CS       =0x81.5 
.................... #bit T0SE       =0x81.4 
.................... #bit PSA        =0x81.3 
.................... #bit PS2        =0x81.2 
.................... #bit PS1        =0x81.1 
.................... #bit PS0        =0x81.0 
.................... //----- PCON Bits ---------------------------------------------------------- 
....................  
.................... #bit POR        =0x8E.1 
.................... #bit BOD        =0x8E.0 
....................  
.................... //-----------SSPCON2 bits--------------------------------------------- 
....................  
.................... #bit GCEN       =0x91.7 
.................... #bit ACKSTAT    =0x91.6 
.................... #bit ACKDT      =0x91.5 
.................... #bit ACKEN      =0x91.4 
.................... #bit RCEN       =0x91.3 
.................... #bit PEN        =0x91.2 
.................... #bit RSEN       =0x91.1 
.................... #bit SEN        =0x91.0 
....................  
.................... //---------------------SSPSTAT bits------------------------ 
....................  
.................... #bit STAT_SMP   =0x94.7 
.................... #bit STAT_CKE   =0x94.6 
.................... #bit STAT_DA    =0x94.5 
.................... #bit STAT_P     =0x94.4 
.................... #bit STAT_S     =0x94.3 
.................... #bit STAT_RW    =0x94.2 
.................... #bit STAT_UA    =0x94.1 
.................... #bit STAT_BF    =0x94.0 
....................  
.................... //----------------TXSTA bits----------------- 
....................  
.................... #bit CSRC       =0x98.7 
.................... #bit TX9        =0x98.6 
.................... #bit TXEN       =0x98.5 
.................... #bit SYNC       =0x98.4 
.................... #bit BRGH       =0x98.2 
.................... #bit TRMT       =0x98.1 
.................... #bit TX9D       =0x98.0 
....................  
.................... //--------------ADCON1 bits--------------- 
....................  
.................... #bit ADFM       =0x9F.7 
.................... #bit ADCS2      =0x9F.6 
.................... #bit PCFG3      =0x9F.3 
.................... #bit PCFG2      =0x9F.2 
.................... #bit PCFG1      =0x9F.1 
.................... #bit PCFG0      =0x9F.0 
....................  
.................... //-----------EECON1 bits---------- 
....................  
.................... #bit EEPGD      =0x018C.7 
.................... #bit WRERR      =0x018C.3 
.................... #bit WREN       =0x018C.2 
.................... #bit WR         =0x018C.1 
.................... #bit RD         =0x018C.0 
....................  
....................  
.................... #device ADC = 16 
....................  
.................... #FUSES NOWDT      //No Watch Dog Timer 
.................... #FUSES NOBROWNOUT //No brownout reset 
.................... #FUSES NOLVP      //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal = 20000000) 
....................  
.................... #include "def_lcd.c" 
.................... #define RS RC3 
.................... #define RW RC4 
.................... #define E RC5 
.................... #define LCD PORTD 
....................  
.................... // CONST Char gd[4][21] = {"    Thap Chuong     ", 
.................... //                         "                    ", 
.................... //                         "Sensor 1:           ", 
.................... //                         "Sensor 2:           "}; 
.................... char arrNumber[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'}; 
*
072B:  MOVLW  30
072C:  BCF    03.5
072D:  MOVWF  27
072E:  MOVLW  31
072F:  MOVWF  28
0730:  MOVLW  32
0731:  MOVWF  29
0732:  MOVLW  33
0733:  MOVWF  2A
0734:  MOVLW  34
0735:  MOVWF  2B
0736:  MOVLW  35
0737:  MOVWF  2C
0738:  MOVLW  36
0739:  MOVWF  2D
073A:  MOVLW  37
073B:  MOVWF  2E
073C:  MOVLW  38
073D:  MOVWF  2F
073E:  MOVLW  39
073F:  MOVWF  30
....................  
.................... void ghima(int8 data) 
.................... { 
....................   LCD = data; 
....................   RS = 0; 
....................   RW = 0; 
....................   E = 1; 
....................   E = 0; 
....................   delay_us(1500); 
.................... } 
.................... void hienthi(int8 data) 
.................... { 
....................   LCD = data; 
....................   RS = 1; 
....................   RW = 0; 
....................   E = 1; 
....................   E = 0; 
....................   delay_us(1500); 
.................... } 
....................  
.................... void initLCD() 
.................... { 
....................   TRISD = 0; 
....................   TRISC3 = TRISC4 = TRISC5 = 0; 
....................  
....................   ghima(0x38); //giao tiep 8bit, hien thi 2 dong, kich thuoc 5x7 
....................   ghima(0x0C); //bat man hinh 
....................   ghima(0x01); //xoa man hinh 
....................   ghima(0x80); // dua con tro ve du dong 1 
....................  
....................   // int8 i, j; 
....................   // for (i = 0; i < 4; i++) 
....................   //   for (j = 0; j < 20; j++) 
....................   //   { 
....................   //     hienthi(gd[i][j]); 
....................   //     if ((j == 19) && (i == 0)) 
....................   //       ghima(0xc0); 
....................   //     if ((j == 19) && (i == 1)) 
....................   //       ghima(0x94); 
....................   //     if ((j == 19) && (i == 2)) 
....................   //       ghima(0xd4); 
....................   //   } 
.................... } 
....................  
.................... #include "floor.c" 
.................... float32 FLOOR(float32 x) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
*
0385:  BCF    5D.0
....................    y = x; 
0386:  MOVF   52,W
0387:  MOVWF  56
0388:  MOVF   51,W
0389:  MOVWF  55
038A:  MOVF   50,W
038B:  MOVWF  54
038C:  MOVF   4F,W
038D:  MOVWF  53
....................  
....................    if (x < 0) 
038E:  MOVF   52,W
038F:  MOVWF  61
0390:  MOVF   51,W
0391:  MOVWF  60
0392:  MOVF   50,W
0393:  MOVWF  5F
0394:  MOVF   4F,W
0395:  MOVWF  5E
0396:  CLRF   65
0397:  CLRF   64
0398:  CLRF   63
0399:  CLRF   62
039A:  CALL   295
039B:  BTFSS  03.0
039C:  GOTO   3A1
....................    { 
....................       s = 1; 
039D:  BSF    5D.0
....................       y = -y; 
039E:  MOVF   54,W
039F:  XORLW  80
03A0:  MOVWF  54
....................    } 
....................  
....................    if (y <= 32768.0) 
03A1:  MOVF   56,W
03A2:  MOVWF  61
03A3:  MOVF   55,W
03A4:  MOVWF  60
03A5:  MOVF   54,W
03A6:  MOVWF  5F
03A7:  MOVF   53,W
03A8:  MOVWF  5E
03A9:  CLRF   65
03AA:  CLRF   64
03AB:  CLRF   63
03AC:  MOVLW  8E
03AD:  MOVWF  62
03AE:  CALL   295
03AF:  BTFSC  03.0
03B0:  GOTO   3B3
03B1:  BTFSS  03.2
03B2:  GOTO   3CA
....................       res = (float32)(unsigned int16)y; 
03B3:  MOVF   56,W
03B4:  MOVWF  61
03B5:  MOVF   55,W
03B6:  MOVWF  60
03B7:  MOVF   54,W
03B8:  MOVWF  5F
03B9:  MOVF   53,W
03BA:  MOVWF  5E
03BB:  CALL   2D4
03BC:  MOVF   79,W
03BD:  MOVWF  63
03BE:  MOVF   78,W
03BF:  MOVWF  62
03C0:  CALL   2F3
03C1:  MOVF   7A,W
03C2:  MOVWF  5A
03C3:  MOVF   79,W
03C4:  MOVWF  59
03C5:  MOVF   78,W
03C6:  MOVWF  58
03C7:  MOVF   77,W
03C8:  MOVWF  57
03C9:  GOTO   487
....................  
....................    else if (y < 10000000.0) 
03CA:  MOVF   56,W
03CB:  MOVWF  61
03CC:  MOVF   55,W
03CD:  MOVWF  60
03CE:  MOVF   54,W
03CF:  MOVWF  5F
03D0:  MOVF   53,W
03D1:  MOVWF  5E
03D2:  MOVLW  80
03D3:  MOVWF  65
03D4:  MOVLW  96
03D5:  MOVWF  64
03D6:  MOVLW  18
03D7:  MOVWF  63
03D8:  MOVLW  96
03D9:  MOVWF  62
03DA:  CALL   295
03DB:  BTFSS  03.0
03DC:  GOTO   47F
....................    { 
....................       l = (unsigned int16)(y * 0.000030517578125); 
03DD:  MOVF   56,W
03DE:  MOVWF  61
03DF:  MOVF   55,W
03E0:  MOVWF  60
03E1:  MOVF   54,W
03E2:  MOVWF  5F
03E3:  MOVF   53,W
03E4:  MOVWF  5E
03E5:  CLRF   65
03E6:  CLRF   64
03E7:  CLRF   63
03E8:  MOVLW  70
03E9:  MOVWF  62
03EA:  CALL   310
03EB:  MOVF   7A,W
03EC:  MOVWF  61
03ED:  MOVF   79,W
03EE:  MOVWF  60
03EF:  MOVF   78,W
03F0:  MOVWF  5F
03F1:  MOVF   77,W
03F2:  MOVWF  5E
03F3:  CALL   2D4
03F4:  MOVF   79,W
03F5:  MOVWF  5C
03F6:  MOVF   78,W
03F7:  MOVWF  5B
....................       y = 32768.0 * (y * 0.000030517578125 - (float32)l); 
03F8:  MOVF   56,W
03F9:  MOVWF  61
03FA:  MOVF   55,W
03FB:  MOVWF  60
03FC:  MOVF   54,W
03FD:  MOVWF  5F
03FE:  MOVF   53,W
03FF:  MOVWF  5E
0400:  CLRF   65
0401:  CLRF   64
0402:  CLRF   63
0403:  MOVLW  70
0404:  MOVWF  62
0405:  CALL   310
0406:  MOVF   7A,W
0407:  MOVWF  61
0408:  MOVF   79,W
0409:  MOVWF  60
040A:  MOVF   78,W
040B:  MOVWF  5F
040C:  MOVF   77,W
040D:  MOVWF  5E
040E:  MOVF   5C,W
040F:  MOVWF  63
0410:  MOVF   5B,W
0411:  MOVWF  62
0412:  CALL   2F3
0413:  BSF    03.1
0414:  MOVF   61,W
0415:  MOVWF  65
0416:  MOVF   60,W
0417:  MOVWF  64
0418:  MOVF   5F,W
0419:  MOVWF  63
041A:  MOVF   5E,W
041B:  MOVWF  62
041C:  MOVF   7A,W
041D:  MOVWF  69
041E:  MOVF   79,W
041F:  MOVWF  68
0420:  MOVF   78,W
0421:  MOVWF  67
0422:  MOVF   77,W
0423:  MOVWF  66
0424:  CALL   08A
0425:  CLRF   61
0426:  CLRF   60
0427:  CLRF   5F
0428:  MOVLW  8E
0429:  MOVWF  5E
042A:  MOVF   7A,W
042B:  MOVWF  65
042C:  MOVF   79,W
042D:  MOVWF  64
042E:  MOVF   78,W
042F:  MOVWF  63
0430:  MOVF   77,W
0431:  MOVWF  62
0432:  CALL   310
0433:  MOVF   7A,W
0434:  MOVWF  56
0435:  MOVF   79,W
0436:  MOVWF  55
0437:  MOVF   78,W
0438:  MOVWF  54
0439:  MOVF   77,W
043A:  MOVWF  53
....................       res = 32768.0 * (float32)l; 
043B:  MOVF   5C,W
043C:  MOVWF  63
043D:  MOVF   5B,W
043E:  MOVWF  62
043F:  CALL   2F3
0440:  CLRF   61
0441:  CLRF   60
0442:  CLRF   5F
0443:  MOVLW  8E
0444:  MOVWF  5E
0445:  MOVF   7A,W
0446:  MOVWF  65
0447:  MOVF   79,W
0448:  MOVWF  64
0449:  MOVF   78,W
044A:  MOVWF  63
044B:  MOVF   77,W
044C:  MOVWF  62
044D:  CALL   310
044E:  MOVF   7A,W
044F:  MOVWF  5A
0450:  MOVF   79,W
0451:  MOVWF  59
0452:  MOVF   78,W
0453:  MOVWF  58
0454:  MOVF   77,W
0455:  MOVWF  57
....................       res += (float32)(unsigned int16)y; 
0456:  MOVF   56,W
0457:  MOVWF  61
0458:  MOVF   55,W
0459:  MOVWF  60
045A:  MOVF   54,W
045B:  MOVWF  5F
045C:  MOVF   53,W
045D:  MOVWF  5E
045E:  CALL   2D4
045F:  MOVF   79,W
0460:  MOVWF  63
0461:  MOVF   78,W
0462:  MOVWF  62
0463:  CALL   2F3
0464:  BCF    03.1
0465:  MOVF   5A,W
0466:  MOVWF  65
0467:  MOVF   59,W
0468:  MOVWF  64
0469:  MOVF   58,W
046A:  MOVWF  63
046B:  MOVF   57,W
046C:  MOVWF  62
046D:  MOVF   7A,W
046E:  MOVWF  69
046F:  MOVF   79,W
0470:  MOVWF  68
0471:  MOVF   78,W
0472:  MOVWF  67
0473:  MOVF   77,W
0474:  MOVWF  66
0475:  CALL   08A
0476:  MOVF   7A,W
0477:  MOVWF  5A
0478:  MOVF   79,W
0479:  MOVWF  59
047A:  MOVF   78,W
047B:  MOVWF  58
047C:  MOVF   77,W
047D:  MOVWF  57
....................    } 
047E:  GOTO   487
....................  
....................    else 
....................       res = y; 
047F:  MOVF   56,W
0480:  MOVWF  5A
0481:  MOVF   55,W
0482:  MOVWF  59
0483:  MOVF   54,W
0484:  MOVWF  58
0485:  MOVF   53,W
0486:  MOVWF  57
....................  
....................    y = y - (float32)(unsigned int16)y; 
0487:  MOVF   56,W
0488:  MOVWF  61
0489:  MOVF   55,W
048A:  MOVWF  60
048B:  MOVF   54,W
048C:  MOVWF  5F
048D:  MOVF   53,W
048E:  MOVWF  5E
048F:  CALL   2D4
0490:  MOVF   79,W
0491:  MOVWF  63
0492:  MOVF   78,W
0493:  MOVWF  62
0494:  CALL   2F3
0495:  BSF    03.1
0496:  MOVF   56,W
0497:  MOVWF  65
0498:  MOVF   55,W
0499:  MOVWF  64
049A:  MOVF   54,W
049B:  MOVWF  63
049C:  MOVF   53,W
049D:  MOVWF  62
049E:  MOVF   7A,W
049F:  MOVWF  69
04A0:  MOVF   79,W
04A1:  MOVWF  68
04A2:  MOVF   78,W
04A3:  MOVWF  67
04A4:  MOVF   77,W
04A5:  MOVWF  66
04A6:  CALL   08A
04A7:  MOVF   7A,W
04A8:  MOVWF  56
04A9:  MOVF   79,W
04AA:  MOVWF  55
04AB:  MOVF   78,W
04AC:  MOVWF  54
04AD:  MOVF   77,W
04AE:  MOVWF  53
....................  
....................    if (s) 
04AF:  BTFSS  5D.0
04B0:  GOTO   4B4
....................       res = -res; 
04B1:  MOVF   58,W
04B2:  XORLW  80
04B3:  MOVWF  58
....................  
....................    if (y != 0) 
04B4:  MOVF   56,W
04B5:  MOVWF  61
04B6:  MOVF   55,W
04B7:  MOVWF  60
04B8:  MOVF   54,W
04B9:  MOVWF  5F
04BA:  MOVF   53,W
04BB:  MOVWF  5E
04BC:  CLRF   65
04BD:  CLRF   64
04BE:  CLRF   63
04BF:  CLRF   62
04C0:  CALL   295
04C1:  BTFSC  03.2
04C2:  GOTO   4DC
....................    { 
....................       if (s == 1) 
04C3:  BTFSS  5D.0
04C4:  GOTO   4DC
....................          res -= 1.0; 
04C5:  BSF    03.1
04C6:  MOVF   5A,W
04C7:  MOVWF  65
04C8:  MOVF   59,W
04C9:  MOVWF  64
04CA:  MOVF   58,W
04CB:  MOVWF  63
04CC:  MOVF   57,W
04CD:  MOVWF  62
04CE:  CLRF   69
04CF:  CLRF   68
04D0:  CLRF   67
04D1:  MOVLW  7F
04D2:  MOVWF  66
04D3:  CALL   08A
04D4:  MOVF   7A,W
04D5:  MOVWF  5A
04D6:  MOVF   79,W
04D7:  MOVWF  59
04D8:  MOVF   78,W
04D9:  MOVWF  58
04DA:  MOVF   77,W
04DB:  MOVWF  57
....................    } 
....................    if (x == 0) 
04DC:  MOVF   52,W
04DD:  MOVWF  61
04DE:  MOVF   51,W
04DF:  MOVWF  60
04E0:  MOVF   50,W
04E1:  MOVWF  5F
04E2:  MOVF   4F,W
04E3:  MOVWF  5E
04E4:  CLRF   65
04E5:  CLRF   64
04E6:  CLRF   63
04E7:  CLRF   62
04E8:  CALL   295
04E9:  BTFSS  03.2
04EA:  GOTO   4EF
....................       res = 0; 
04EB:  CLRF   5A
04EC:  CLRF   59
04ED:  CLRF   58
04EE:  CLRF   57
....................  
....................    return (res); 
04EF:  MOVF   57,W
04F0:  MOVWF  77
04F1:  MOVF   58,W
04F2:  MOVWF  78
04F3:  MOVF   59,W
04F4:  MOVWF  79
04F5:  MOVF   5A,W
04F6:  MOVWF  7A
04F7:  RETURN
.................... } 
....................  
....................  
.................... #define triac1 RC6 
.................... #define triac1Out PIN_C6 
....................  
.................... #define triac2 RC7 
.................... #define triac2Out PIN_C7 
....................  
.................... #define relay RC1 
.................... #define relayOut PIN_C1 
....................  
.................... // set angle (10 levels). more angle, weaker motor 
.................... float32 angleStarter = 1; 
.................... float32 angleRingTheBell = 6; 
....................  
.................... int32 valTimer0SetStarter = (int32)FLOOR((13.1072 - angleStarter) / 0.0512) - 1; 
.................... int32 valTimer0SetRingTheBell = (int32)FLOOR((13.1072 - angleRingTheBell) / 0.0512) - 1; 
....................  
.................... signed int32 count = 0; 
.................... int8 countTime = 0, anglePercent = 0; 
.................... int1 flagForward = true, flagStarter = true, flagSTOP = false; 
....................  
.................... #INT_EXT 
.................... void ext_isr() 
.................... { 
....................    // cross zero point detector 50Hz >> 1/50/2 sec per half pulse after diode brighet 
....................  
....................    // if (flagForward) 
....................    //    triac1 = 0; 
....................    // else 
....................    //    triac2 = 0; 
....................  
....................    output_low(triac1Out); 
*
003F:  BCF    48.6
0040:  MOVF   48,W
0041:  BSF    03.5
0042:  MOVWF  07
0043:  BCF    03.5
0044:  BCF    07.6
....................    output_low(triac2Out); 
0045:  BCF    48.7
0046:  MOVF   48,W
0047:  BSF    03.5
0048:  MOVWF  07
0049:  BCF    03.5
004A:  BCF    07.7
....................  
....................    if (flagStarter) 
004B:  BTFSS  47.1
004C:  GOTO   050
....................       set_timer0(valTimer0SetStarter); 
004D:  MOVF   39,W
004E:  MOVWF  01
004F:  GOTO   052
....................    else 
....................       set_timer0(valTimer0SetRingTheBell); 
0050:  MOVF   3D,W
0051:  MOVWF  01
....................  
....................    clear_interrupt(INT_TIMER0); 
0052:  BCF    0B.2
....................    enable_interrupts(INT_TIMER0); 
0053:  BSF    0B.5
....................    clear_interrupt(INT_EXT); // waiting for next EXT 
0054:  BCF    0B.1
.................... } 
....................  
0055:  BCF    0B.1
0056:  BCF    0A.3
0057:  BCF    0A.4
0058:  GOTO   025
.................... #INT_TIMER0 
.................... void timer0_isr() 
.................... { 
....................    if (flagForward && !flagSTOP) 
0059:  BTFSS  47.0
005A:  GOTO   064
005B:  BTFSC  47.2
005C:  GOTO   064
....................       output_high(triac1Out); 
005D:  BCF    48.6
005E:  MOVF   48,W
005F:  BSF    03.5
0060:  MOVWF  07
0061:  BCF    03.5
0062:  BSF    07.6
0063:  GOTO   06E
....................    else if (!flagForward && !flagSTOP) 
0064:  BTFSC  47.0
0065:  GOTO   06E
0066:  BTFSC  47.2
0067:  GOTO   06E
....................       output_high(triac2Out); 
0068:  BCF    48.7
0069:  MOVF   48,W
006A:  BSF    03.5
006B:  MOVWF  07
006C:  BCF    03.5
006D:  BSF    07.7
....................  
....................    // set_timer0(200.00); 
....................    disable_interrupts(INT_TIMER0); 
006E:  BCF    0B.5
.................... } 
....................  
006F:  BCF    0B.2
0070:  BCF    0A.3
0071:  BCF    0A.4
0072:  GOTO   025
.................... #INT_CCP1 
.................... void ccp1_isr() 
.................... { 
....................    if (RC0) 
0073:  BTFSS  07.0
0074:  GOTO   07E
....................       ++count; 
0075:  MOVLW  01
0076:  ADDWF  41,F
0077:  BTFSC  03.0
0078:  INCF   42,F
0079:  BTFSC  03.2
007A:  INCF   43,F
007B:  BTFSC  03.2
007C:  INCF   44,F
007D:  GOTO   086
....................    else 
....................       --count; 
007E:  MOVLW  FF
007F:  ADDWF  41,F
0080:  BTFSS  03.0
0081:  ADDWF  42,F
0082:  BTFSS  03.0
0083:  ADDWF  43,F
0084:  BTFSS  03.0
0085:  ADDWF  44,F
....................    // clear_interrupt(INT_CCP1); 
0086:  BCF    0C.2
0087:  BCF    0A.3
0088:  BCF    0A.4
0089:  GOTO   025
.................... } 
....................  
.................... void FORWARD() 
.................... { 
....................    // output_high(relayOut); 
....................    output_low(triac2Out); 
*
0517:  BCF    48.7
0518:  MOVF   48,W
0519:  BSF    03.5
051A:  MOVWF  07
051B:  BCF    03.5
051C:  BCF    07.7
....................  
....................    flagForward = true; 
051D:  BSF    47.0
....................    flagSTOP = false; 
051E:  BCF    47.2
051F:  RETURN
.................... } 
.................... void REVERSE() 
.................... { 
....................    // output_high(relayOut); 
....................    output_low(triac1Out); 
*
052E:  BCF    48.6
052F:  MOVF   48,W
0530:  BSF    03.5
0531:  MOVWF  07
0532:  BCF    03.5
0533:  BCF    07.6
....................    flagForward = flagSTOP = false; 
0534:  BCF    47.2
0535:  BCF    47.0
0536:  RETURN
.................... } 
.................... void STOP() 
.................... { 
....................    // output_low(relayOut); 
....................    flagSTOP = true; 
*
0520:  BSF    47.2
....................    output_low(triac1Out); 
0521:  BCF    48.6
0522:  MOVF   48,W
0523:  BSF    03.5
0524:  MOVWF  07
0525:  BCF    03.5
0526:  BCF    07.6
....................    output_low(triac2Out); 
0527:  BCF    48.7
0528:  MOVF   48,W
0529:  BSF    03.5
052A:  MOVWF  07
052B:  BCF    03.5
052C:  BCF    07.7
052D:  RETURN
.................... } 
....................  
.................... void starter() 
.................... { 
....................    while (count <= 400) 
*
0537:  BTFSC  44.7
0538:  GOTO   549
0539:  MOVF   44,F
053A:  BTFSS  03.2
053B:  GOTO   54B
053C:  MOVF   43,F
053D:  BTFSS  03.2
053E:  GOTO   54B
053F:  MOVF   42,W
0540:  SUBLW  01
0541:  BTFSS  03.0
0542:  GOTO   54B
0543:  BTFSS  03.2
0544:  GOTO   549
0545:  MOVF   41,W
0546:  SUBLW  90
0547:  BTFSS  03.0
0548:  GOTO   54B
....................       FORWARD(); 
0549:  CALL   517
054A:  GOTO   537
....................    STOP(); 
054B:  CALL   520
....................  
....................    while (count >= 0) 
054C:  BTFSC  44.7
054D:  GOTO   550
....................       STOP(); 
054E:  CALL   520
054F:  GOTO   54C
....................  
....................    while (count >= -400) 
0550:  BTFSS  44.7
0551:  GOTO   56B
0552:  MOVF   44,W
0553:  SUBLW  FE
0554:  BTFSC  03.0
0555:  GOTO   56D
0556:  XORLW  FF
0557:  BTFSS  03.2
0558:  GOTO   56B
0559:  MOVF   43,W
055A:  SUBLW  FE
055B:  BTFSC  03.0
055C:  GOTO   56D
055D:  XORLW  FF
055E:  BTFSS  03.2
055F:  GOTO   56B
0560:  MOVF   42,W
0561:  SUBLW  FD
0562:  BTFSC  03.0
0563:  GOTO   56D
0564:  XORLW  FF
0565:  BTFSS  03.2
0566:  GOTO   56B
0567:  MOVF   41,W
0568:  SUBLW  6F
0569:  BTFSC  03.0
056A:  GOTO   56D
....................       REVERSE(); 
056B:  CALL   52E
056C:  GOTO   550
....................    STOP(); 
056D:  CALL   520
....................  
....................    while (count <= 0) 
056E:  BTFSC  44.7
056F:  GOTO   57D
0570:  MOVF   44,F
0571:  BTFSS  03.2
0572:  GOTO   57F
0573:  MOVF   43,F
0574:  BTFSS  03.2
0575:  GOTO   57F
0576:  MOVF   42,F
0577:  BTFSS  03.2
0578:  GOTO   57F
0579:  MOVF   41,W
057A:  SUBLW  00
057B:  BTFSS  03.0
057C:  GOTO   57F
....................       STOP(); 
057D:  CALL   520
057E:  GOTO   56E
....................  
....................    while (count <= 800) 
057F:  BTFSC  44.7
0580:  GOTO   591
0581:  MOVF   44,F
0582:  BTFSS  03.2
0583:  GOTO   593
0584:  MOVF   43,F
0585:  BTFSS  03.2
0586:  GOTO   593
0587:  MOVF   42,W
0588:  SUBLW  03
0589:  BTFSS  03.0
058A:  GOTO   593
058B:  BTFSS  03.2
058C:  GOTO   591
058D:  MOVF   41,W
058E:  SUBLW  20
058F:  BTFSS  03.0
0590:  GOTO   593
....................       FORWARD(); 
0591:  CALL   517
0592:  GOTO   57F
....................    STOP(); 
0593:  CALL   520
....................  
....................    while (count >= 0) 
0594:  BTFSC  44.7
0595:  GOTO   598
....................       STOP(); 
0596:  CALL   520
0597:  GOTO   594
....................  
....................    while (count >= -800) 
0598:  BTFSS  44.7
0599:  GOTO   5B3
059A:  MOVF   44,W
059B:  SUBLW  FE
059C:  BTFSC  03.0
059D:  GOTO   5B5
059E:  XORLW  FF
059F:  BTFSS  03.2
05A0:  GOTO   5B3
05A1:  MOVF   43,W
05A2:  SUBLW  FE
05A3:  BTFSC  03.0
05A4:  GOTO   5B5
05A5:  XORLW  FF
05A6:  BTFSS  03.2
05A7:  GOTO   5B3
05A8:  MOVF   42,W
05A9:  SUBLW  FB
05AA:  BTFSC  03.0
05AB:  GOTO   5B5
05AC:  XORLW  FF
05AD:  BTFSS  03.2
05AE:  GOTO   5B3
05AF:  MOVF   41,W
05B0:  SUBLW  DF
05B1:  BTFSC  03.0
05B2:  GOTO   5B5
....................       REVERSE(); 
05B3:  CALL   52E
05B4:  GOTO   598
....................    STOP(); 
05B5:  CALL   520
....................  
....................    while (count <= 0) 
05B6:  BTFSC  44.7
05B7:  GOTO   5C5
05B8:  MOVF   44,F
05B9:  BTFSS  03.2
05BA:  GOTO   5C7
05BB:  MOVF   43,F
05BC:  BTFSS  03.2
05BD:  GOTO   5C7
05BE:  MOVF   42,F
05BF:  BTFSS  03.2
05C0:  GOTO   5C7
05C1:  MOVF   41,W
05C2:  SUBLW  00
05C3:  BTFSS  03.0
05C4:  GOTO   5C7
....................       STOP(); 
05C5:  CALL   520
05C6:  GOTO   5B6
....................  
....................    while (count <= 1200) 
05C7:  BTFSC  44.7
05C8:  GOTO   5D9
05C9:  MOVF   44,F
05CA:  BTFSS  03.2
05CB:  GOTO   5DB
05CC:  MOVF   43,F
05CD:  BTFSS  03.2
05CE:  GOTO   5DB
05CF:  MOVF   42,W
05D0:  SUBLW  04
05D1:  BTFSS  03.0
05D2:  GOTO   5DB
05D3:  BTFSS  03.2
05D4:  GOTO   5D9
05D5:  MOVF   41,W
05D6:  SUBLW  B0
05D7:  BTFSS  03.0
05D8:  GOTO   5DB
....................       FORWARD(); 
05D9:  CALL   517
05DA:  GOTO   5C7
....................    STOP(); 
05DB:  CALL   520
....................  
....................    flagStarter = false; 
05DC:  BCF    47.1
05DD:  BCF    0A.3
05DE:  BCF    0A.4
05DF:  GOTO   768 (RETURN)
.................... } 
....................  
.................... void RingTheBell() 
.................... { 
....................    while (count >= 400) 
05E0:  BTFSC  44.7
05E1:  GOTO   5F5
05E2:  MOVF   44,F
05E3:  BTFSS  03.2
05E4:  GOTO   5F3
05E5:  MOVF   43,F
05E6:  BTFSS  03.2
05E7:  GOTO   5F3
05E8:  MOVF   42,W
05E9:  SUBLW  00
05EA:  BTFSC  03.0
05EB:  GOTO   5F5
05EC:  XORLW  FF
05ED:  BTFSS  03.2
05EE:  GOTO   5F3
05EF:  MOVF   41,W
05F0:  SUBLW  8F
05F1:  BTFSC  03.0
05F2:  GOTO   5F5
....................       STOP(); 
05F3:  CALL   520
05F4:  GOTO   5E0
....................  
....................    while (count >= -800) 
05F5:  BTFSS  44.7
05F6:  GOTO   610
05F7:  MOVF   44,W
05F8:  SUBLW  FE
05F9:  BTFSC  03.0
05FA:  GOTO   612
05FB:  XORLW  FF
05FC:  BTFSS  03.2
05FD:  GOTO   610
05FE:  MOVF   43,W
05FF:  SUBLW  FE
0600:  BTFSC  03.0
0601:  GOTO   612
0602:  XORLW  FF
0603:  BTFSS  03.2
0604:  GOTO   610
0605:  MOVF   42,W
0606:  SUBLW  FB
0607:  BTFSC  03.0
0608:  GOTO   612
0609:  XORLW  FF
060A:  BTFSS  03.2
060B:  GOTO   610
060C:  MOVF   41,W
060D:  SUBLW  DF
060E:  BTFSC  03.0
060F:  GOTO   612
....................       REVERSE(); 
0610:  CALL   52E
0611:  GOTO   5F5
....................    STOP(); 
0612:  CALL   520
....................  
....................    while (count <= -400) 
0613:  BTFSS  44.7
0614:  GOTO   62D
0615:  MOVF   44,W
0616:  SUBLW  FF
0617:  BTFSS  03.0
0618:  GOTO   62D
0619:  BTFSS  03.2
061A:  GOTO   62B
061B:  MOVF   43,W
061C:  SUBLW  FF
061D:  BTFSS  03.0
061E:  GOTO   62D
061F:  BTFSS  03.2
0620:  GOTO   62B
0621:  MOVF   42,W
0622:  SUBLW  FE
0623:  BTFSS  03.0
0624:  GOTO   62D
0625:  BTFSS  03.2
0626:  GOTO   62B
0627:  MOVF   41,W
0628:  SUBLW  70
0629:  BTFSS  03.0
062A:  GOTO   62D
....................       STOP(); 
062B:  CALL   520
062C:  GOTO   613
....................  
....................    while (count <= 800) 
062D:  BTFSC  44.7
062E:  GOTO   63F
062F:  MOVF   44,F
0630:  BTFSS  03.2
0631:  GOTO   641
0632:  MOVF   43,F
0633:  BTFSS  03.2
0634:  GOTO   641
0635:  MOVF   42,W
0636:  SUBLW  03
0637:  BTFSS  03.0
0638:  GOTO   641
0639:  BTFSS  03.2
063A:  GOTO   63F
063B:  MOVF   41,W
063C:  SUBLW  20
063D:  BTFSS  03.0
063E:  GOTO   641
....................       FORWARD(); 
063F:  CALL   517
0640:  GOTO   62D
....................    STOP(); 
0641:  CALL   520
0642:  BCF    0A.3
0643:  BCF    0A.4
0644:  GOTO   769 (RETURN)
.................... } 
....................  
.................... void main() 
0645:  MOVF   03,W
0646:  ANDLW  1F
0647:  MOVWF  03
0648:  CLRF   34
0649:  CLRF   33
064A:  CLRF   32
064B:  MOVLW  7F
064C:  MOVWF  31
064D:  CLRF   38
064E:  CLRF   37
064F:  MOVLW  40
0650:  MOVWF  36
0651:  MOVLW  81
0652:  MOVWF  35
0653:  BSF    03.1
0654:  MOVLW  17
0655:  MOVWF  65
0656:  MOVLW  B7
0657:  MOVWF  64
0658:  MOVLW  51
0659:  MOVWF  63
065A:  MOVLW  82
065B:  MOVWF  62
065C:  MOVF   34,W
065D:  MOVWF  69
065E:  MOVF   33,W
065F:  MOVWF  68
0660:  MOVF   32,W
0661:  MOVWF  67
0662:  MOVF   31,W
0663:  MOVWF  66
0664:  CALL   08A
0665:  MOVF   7A,W
0666:  MOVWF  4C
0667:  MOVF   79,W
0668:  MOVWF  4B
0669:  MOVF   78,W
066A:  MOVWF  4A
066B:  MOVF   77,W
066C:  MOVWF  49
066D:  MOVF   7A,W
066E:  MOVWF  52
066F:  MOVF   79,W
0670:  MOVWF  51
0671:  MOVF   78,W
0672:  MOVWF  50
0673:  MOVF   77,W
0674:  MOVWF  4F
0675:  MOVLW  17
0676:  MOVWF  56
0677:  MOVLW  B7
0678:  MOVWF  55
0679:  MOVLW  51
067A:  MOVWF  54
067B:  MOVLW  7A
067C:  MOVWF  53
067D:  CALL   1CB
067E:  MOVF   7A,W
067F:  MOVWF  4C
0680:  MOVF   79,W
0681:  MOVWF  4B
0682:  MOVF   78,W
0683:  MOVWF  4A
0684:  MOVF   77,W
0685:  MOVWF  49
0686:  MOVF   7A,W
0687:  MOVWF  52
0688:  MOVF   79,W
0689:  MOVWF  51
068A:  MOVF   78,W
068B:  MOVWF  50
068C:  MOVF   77,W
068D:  MOVWF  4F
068E:  CALL   385
068F:  MOVF   7A,W
0690:  MOVWF  4E
0691:  MOVF   79,W
0692:  MOVWF  4D
0693:  MOVF   78,W
0694:  MOVWF  4C
0695:  MOVF   77,W
0696:  MOVWF  4B
0697:  CALL   4F8
0698:  MOVF   7A,W
0699:  MOVWF  4C
069A:  MOVF   79,W
069B:  MOVWF  4B
069C:  MOVF   78,W
069D:  MOVWF  4A
069E:  MOVLW  01
069F:  SUBWF  77,W
06A0:  MOVWF  39
06A1:  MOVF   78,W
06A2:  MOVWF  3A
06A3:  MOVLW  00
06A4:  BTFSS  03.0
06A5:  MOVLW  01
06A6:  SUBWF  3A,F
06A7:  MOVF   79,W
06A8:  MOVWF  3B
06A9:  MOVLW  00
06AA:  BTFSS  03.0
06AB:  MOVLW  01
06AC:  SUBWF  3B,F
06AD:  MOVF   7A,W
06AE:  MOVWF  3C
06AF:  MOVLW  00
06B0:  BTFSS  03.0
06B1:  MOVLW  01
06B2:  SUBWF  3C,F
06B3:  CLRF   4A
06B4:  MOVF   04,W
06B5:  MOVWF  49
06B6:  BCF    4A.0
06B7:  BTFSC  03.7
06B8:  BSF    4A.0
06B9:  BSF    03.1
06BA:  MOVLW  17
06BB:  MOVWF  65
06BC:  MOVLW  B7
06BD:  MOVWF  64
06BE:  MOVLW  51
06BF:  MOVWF  63
06C0:  MOVLW  82
06C1:  MOVWF  62
06C2:  MOVF   38,W
06C3:  MOVWF  69
06C4:  MOVF   37,W
06C5:  MOVWF  68
06C6:  MOVF   36,W
06C7:  MOVWF  67
06C8:  MOVF   35,W
06C9:  MOVWF  66
06CA:  CALL   08A
06CB:  MOVF   49,W
06CC:  MOVWF  04
06CD:  BCF    03.7
06CE:  BTFSC  4A.0
06CF:  BSF    03.7
06D0:  MOVF   7A,W
06D1:  MOVWF  4E
06D2:  MOVF   79,W
06D3:  MOVWF  4D
06D4:  MOVF   78,W
06D5:  MOVWF  4C
06D6:  MOVF   77,W
06D7:  MOVWF  4B
06D8:  MOVF   7A,W
06D9:  MOVWF  52
06DA:  MOVF   79,W
06DB:  MOVWF  51
06DC:  MOVF   78,W
06DD:  MOVWF  50
06DE:  MOVF   77,W
06DF:  MOVWF  4F
06E0:  MOVLW  17
06E1:  MOVWF  56
06E2:  MOVLW  B7
06E3:  MOVWF  55
06E4:  MOVLW  51
06E5:  MOVWF  54
06E6:  MOVLW  7A
06E7:  MOVWF  53
06E8:  CALL   1CB
06E9:  MOVF   7A,W
06EA:  MOVWF  4E
06EB:  MOVF   79,W
06EC:  MOVWF  4D
06ED:  MOVF   78,W
06EE:  MOVWF  4C
06EF:  MOVF   77,W
06F0:  MOVWF  4B
06F1:  MOVF   7A,W
06F2:  MOVWF  52
06F3:  MOVF   79,W
06F4:  MOVWF  51
06F5:  MOVF   78,W
06F6:  MOVWF  50
06F7:  MOVF   77,W
06F8:  MOVWF  4F
06F9:  CALL   385
06FA:  MOVF   7A,W
06FB:  MOVWF  4E
06FC:  MOVF   79,W
06FD:  MOVWF  4D
06FE:  MOVF   78,W
06FF:  MOVWF  4C
0700:  MOVF   77,W
0701:  MOVWF  4B
0702:  CALL   4F8
0703:  MOVLW  01
0704:  SUBWF  77,W
0705:  MOVWF  3D
0706:  MOVF   78,W
0707:  MOVWF  3E
0708:  MOVLW  00
0709:  BTFSS  03.0
070A:  MOVLW  01
070B:  SUBWF  3E,F
070C:  MOVF   79,W
070D:  MOVWF  3F
070E:  MOVLW  00
070F:  BTFSS  03.0
0710:  MOVLW  01
0711:  SUBWF  3F,F
0712:  MOVF   7A,W
0713:  MOVWF  40
0714:  MOVLW  00
0715:  BTFSS  03.0
0716:  MOVLW  01
0717:  SUBWF  40,F
0718:  CLRF   44
0719:  CLRF   43
071A:  CLRF   42
071B:  CLRF   41
071C:  CLRF   45
071D:  CLRF   46
071E:  BSF    47.0
071F:  BSF    47.1
0720:  BCF    47.2
0721:  MOVLW  FF
0722:  MOVWF  48
0723:  BSF    03.5
0724:  BSF    1F.0
0725:  BSF    1F.1
0726:  BSF    1F.2
0727:  BCF    1F.3
0728:  MOVLW  07
0729:  MOVWF  1C
072A:  BCF    03.7
.................... { 
....................    // initLCD(); 
....................  
....................    // ghima(0x01); // clear 
....................    // ghima(0x80); // set 0,0 
....................    // hienthi(arrNumber[count / 10]); 
....................    // hienthi(arrNumber[count % 10]); 
....................  
....................    TRISB0 = TRISC0 = TRISC2 = 1; //input 
*
0740:  BSF    03.5
0741:  BSF    07.2
0742:  BSF    07.0
0743:  BSF    06.0
....................    TRISC6 = TRISC7 = TRISC1 = 0; //output 
0744:  BCF    07.1
0745:  BCF    07.7
0746:  BCF    07.6
....................  
....................    output_high(relayOut); 
0747:  BCF    03.5
0748:  BCF    48.1
0749:  MOVF   48,W
074A:  BSF    03.5
074B:  MOVWF  07
074C:  BCF    03.5
074D:  BSF    07.1
....................  
....................    clear_interrupt(INT_EXT); 
074E:  BCF    0B.1
....................    enable_interrupts(INT_EXT); 
074F:  BSF    0B.4
....................    ext_int_edge(H_TO_L); 
0750:  BSF    03.5
0751:  BCF    01.6
....................  
....................    setup_ccp1(CCP_CAPTURE_FE); 
0752:  BCF    03.5
0753:  BSF    48.2
0754:  MOVF   48,W
0755:  BSF    03.5
0756:  MOVWF  07
0757:  BCF    03.5
0758:  CLRF   17
0759:  MOVLW  04
075A:  MOVWF  17
....................    setup_timer_1(T1_INTERNAL); 
075B:  MOVLW  85
075C:  MOVWF  10
....................    enable_interrupts(INT_CCP1); 
075D:  BSF    03.5
075E:  BSF    0C.2
....................  
....................    setup_timer_0(RTCC_INTERNAL | RTCC_DIV_256); //51.2us 
075F:  MOVF   01,W
0760:  ANDLW  C0
0761:  IORLW  07
0762:  MOVWF  01
....................    // set_timer0(59);                             //10.086ms 
....................    enable_interrupts(INT_TIMER0); 
0763:  BCF    03.5
0764:  BSF    0B.5
....................  
....................    enable_interrupts(GLOBAL); 
0765:  MOVLW  C0
0766:  IORWF  0B,F
....................  
....................    starter(); 
0767:  GOTO   537
....................  
....................    // PORT_B_PULLUPS(0xff); 
....................  
....................    while (TRUE) 
....................    { 
....................       RingTheBell(); 
0768:  GOTO   5E0
0769:  GOTO   768
....................    } 
.................... } 
076A:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
