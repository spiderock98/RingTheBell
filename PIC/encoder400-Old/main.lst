CCS PCM C Compiler, Version 5.025, 38816               28-Apr-20 03:11

               Filename:   E:\Desktop\RingTheBell\PIC\encoder400-Old\main.lst

               ROM used:   2127 words (26%)
                           Largest free fragment is 2048
               RAM used:   34 (9%) at main() level
                           81 (22%) worst case
               Stack used: 3 locations (2 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  08
0001:  MOVWF  0A
0002:  GOTO   000
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.4
0018:  GOTO   01B
0019:  BTFSC  0B.1
001A:  GOTO   03C
001B:  MOVLW  8C
001C:  MOVWF  04
001D:  BTFSS  00.1
001E:  GOTO   021
001F:  BTFSC  0C.1
0020:  GOTO   03F
0021:  MOVLW  8C
0022:  MOVWF  04
0023:  BTFSS  00.2
0024:  GOTO   027
0025:  BTFSC  0C.2
0026:  GOTO   042
0027:  BTFSS  0B.5
0028:  GOTO   02B
0029:  BTFSC  0B.2
002A:  GOTO   045
002B:  MOVF   22,W
002C:  MOVWF  04
002D:  MOVF   23,W
002E:  MOVWF  77
002F:  MOVF   24,W
0030:  MOVWF  78
0031:  MOVF   25,W
0032:  MOVWF  79
0033:  MOVF   26,W
0034:  MOVWF  7A
0035:  MOVF   20,W
0036:  MOVWF  0A
0037:  SWAPF  21,W
0038:  MOVWF  03
0039:  SWAPF  7F,F
003A:  SWAPF  7F,W
003B:  RETFIE
003C:  BCF    0A.3
003D:  BCF    0A.4
003E:  GOTO   048
003F:  BCF    0A.3
0040:  BCF    0A.4
0041:  GOTO   07C
0042:  BCF    0A.3
0043:  BCF    0A.4
0044:  GOTO   0E9
0045:  BCF    0A.3
0046:  BCF    0A.4
0047:  GOTO   062
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
*
009C:  MOVF   67,W
009D:  XORWF  69,W
009E:  ANDLW  80
009F:  MOVWF  6B
00A0:  BTFSS  67.7
00A1:  GOTO   0A7
00A2:  COMF   66,F
00A3:  COMF   67,F
00A4:  INCF   66,F
00A5:  BTFSC  03.2
00A6:  INCF   67,F
00A7:  BTFSS  69.7
00A8:  GOTO   0AE
00A9:  COMF   68,F
00AA:  COMF   69,F
00AB:  INCF   68,F
00AC:  BTFSC  03.2
00AD:  INCF   69,F
00AE:  MOVLW  10
00AF:  MOVWF  6A
00B0:  CLRF   77
00B1:  CLRF   7A
00B2:  RRF    67,F
00B3:  RRF    66,F
00B4:  BTFSS  03.0
00B5:  GOTO   0BC
00B6:  MOVF   68,W
00B7:  ADDWF  77,F
00B8:  BTFSC  03.0
00B9:  INCF   7A,F
00BA:  MOVF   69,W
00BB:  ADDWF  7A,F
00BC:  RRF    7A,F
00BD:  RRF    77,F
00BE:  RRF    79,F
00BF:  RRF    78,F
00C0:  DECFSZ 6A,F
00C1:  GOTO   0B2
00C2:  BTFSS  6B.7
00C3:  GOTO   0C9
00C4:  COMF   78,F
00C5:  COMF   79,F
00C6:  INCF   78,F
00C7:  BTFSC  03.2
00C8:  INCF   79,F
*
00F7:  MOVLW  B6
00F8:  MOVWF  77
00F9:  CLRF   7A
00FA:  CLRF   79
00FB:  CLRF   78
00FC:  MOVF   3D,W
00FD:  IORWF  3E,W
00FE:  IORWF  3F,W
00FF:  IORWF  40,W
0100:  BTFSS  03.2
0101:  GOTO   104
0102:  CLRF   77
0103:  GOTO   111
0104:  BCF    03.0
0105:  BTFSC  78.7
0106:  GOTO   110
0107:  RLF    3D,F
0108:  RLF    3E,F
0109:  RLF    3F,F
010A:  RLF    40,F
010B:  RLF    7A,F
010C:  RLF    79,F
010D:  RLF    78,F
010E:  DECFSZ 77,F
010F:  GOTO   104
0110:  BCF    78.7
0111:  RETURN
0112:  MOVLW  80
0113:  BTFSC  03.1
0114:  XORWF  5B,F
0115:  CLRF   60
0116:  CLRF   61
0117:  MOVF   57,W
0118:  MOVWF  5F
0119:  MOVF   5B,W
011A:  XORWF  5F,F
011B:  MOVF   56,W
011C:  BTFSC  03.2
011D:  GOTO   202
011E:  MOVWF  5E
011F:  MOVWF  77
0120:  MOVF   5A,W
0121:  BTFSC  03.2
0122:  GOTO   20B
0123:  SUBWF  5E,F
0124:  BTFSC  03.2
0125:  GOTO   1A7
0126:  BTFSS  03.0
0127:  GOTO   165
0128:  MOVF   5B,W
0129:  MOVWF  64
012A:  BSF    64.7
012B:  MOVF   5C,W
012C:  MOVWF  63
012D:  MOVF   5D,W
012E:  MOVWF  62
012F:  CLRF   61
0130:  BCF    03.0
0131:  RRF    64,F
0132:  RRF    63,F
0133:  RRF    62,F
0134:  RRF    61,F
0135:  DECFSZ 5E,F
0136:  GOTO   12F
0137:  BTFSS  5F.7
0138:  GOTO   13C
0139:  BSF    60.0
013A:  GOTO   21F
013B:  BCF    60.0
013C:  BCF    5E.0
013D:  BSF    60.4
013E:  MOVLW  59
013F:  MOVWF  04
0140:  BCF    03.7
0141:  GOTO   234
0142:  BCF    60.4
0143:  BTFSC  5F.7
0144:  GOTO   14F
0145:  BTFSS  5E.0
0146:  GOTO   15A
0147:  RRF    64,F
0148:  RRF    63,F
0149:  RRF    62,F
014A:  RRF    61,F
014B:  INCF   77,F
014C:  BTFSC  03.2
014D:  GOTO   21A
014E:  GOTO   15A
014F:  BTFSC  64.7
0150:  GOTO   15D
0151:  BCF    03.0
0152:  RLF    61,F
0153:  RLF    62,F
0154:  RLF    63,F
0155:  RLF    64,F
0156:  DECF   77,F
0157:  BTFSC  03.2
0158:  GOTO   21A
0159:  GOTO   14F
015A:  BSF    60.6
015B:  GOTO   1C7
015C:  BCF    60.6
015D:  MOVF   57,W
015E:  MOVWF  5F
015F:  BTFSS  5F.7
0160:  GOTO   163
0161:  BSF    64.7
0162:  GOTO   213
0163:  BCF    64.7
0164:  GOTO   213
0165:  MOVF   5A,W
0166:  MOVWF  5E
0167:  MOVWF  77
0168:  MOVF   56,W
0169:  SUBWF  5E,F
016A:  MOVF   57,W
016B:  MOVWF  64
016C:  BSF    64.7
016D:  MOVF   58,W
016E:  MOVWF  63
016F:  MOVF   59,W
0170:  MOVWF  62
0171:  CLRF   61
0172:  BCF    03.0
0173:  RRF    64,F
0174:  RRF    63,F
0175:  RRF    62,F
0176:  RRF    61,F
0177:  DECFSZ 5E,F
0178:  GOTO   171
0179:  BTFSS  5F.7
017A:  GOTO   17E
017B:  BSF    60.1
017C:  GOTO   21F
017D:  BCF    60.1
017E:  BCF    5E.0
017F:  BSF    60.5
0180:  MOVLW  5D
0181:  MOVWF  04
0182:  BCF    03.7
0183:  GOTO   234
0184:  BCF    60.5
0185:  BTFSC  5F.7
0186:  GOTO   191
0187:  BTFSS  5E.0
0188:  GOTO   19C
0189:  RRF    64,F
018A:  RRF    63,F
018B:  RRF    62,F
018C:  RRF    61,F
018D:  INCF   77,F
018E:  BTFSC  03.2
018F:  GOTO   21A
0190:  GOTO   19C
0191:  BTFSC  64.7
0192:  GOTO   19F
0193:  BCF    03.0
0194:  RLF    61,F
0195:  RLF    62,F
0196:  RLF    63,F
0197:  RLF    64,F
0198:  DECF   77,F
0199:  BTFSC  03.2
019A:  GOTO   21A
019B:  GOTO   191
019C:  BSF    60.7
019D:  GOTO   1C7
019E:  BCF    60.7
019F:  MOVF   5B,W
01A0:  MOVWF  5F
01A1:  BTFSS  5F.7
01A2:  GOTO   1A5
01A3:  BSF    64.7
01A4:  GOTO   213
01A5:  BCF    64.7
01A6:  GOTO   213
01A7:  MOVF   5B,W
01A8:  MOVWF  64
01A9:  BSF    64.7
01AA:  MOVF   5C,W
01AB:  MOVWF  63
01AC:  MOVF   5D,W
01AD:  MOVWF  62
01AE:  BTFSS  5F.7
01AF:  GOTO   1B4
01B0:  BCF    64.7
01B1:  BSF    60.2
01B2:  GOTO   21F
01B3:  BCF    60.2
01B4:  CLRF   61
01B5:  BCF    5E.0
01B6:  MOVLW  59
01B7:  MOVWF  04
01B8:  BCF    03.7
01B9:  GOTO   234
01BA:  BTFSC  5F.7
01BB:  GOTO   1DD
01BC:  MOVF   57,W
01BD:  MOVWF  5F
01BE:  BTFSS  5E.0
01BF:  GOTO   1C7
01C0:  RRF    64,F
01C1:  RRF    63,F
01C2:  RRF    62,F
01C3:  RRF    61,F
01C4:  INCF   77,F
01C5:  BTFSC  03.2
01C6:  GOTO   21A
01C7:  BTFSS  61.7
01C8:  GOTO   1D8
01C9:  INCF   62,F
01CA:  BTFSS  03.2
01CB:  GOTO   1D8
01CC:  INCF   63,F
01CD:  BTFSS  03.2
01CE:  GOTO   1D8
01CF:  INCF   64,F
01D0:  BTFSS  03.2
01D1:  GOTO   1D8
01D2:  RRF    64,F
01D3:  RRF    63,F
01D4:  RRF    62,F
01D5:  INCF   77,F
01D6:  BTFSC  03.2
01D7:  GOTO   21A
01D8:  BTFSC  60.6
01D9:  GOTO   15C
01DA:  BTFSC  60.7
01DB:  GOTO   19E
01DC:  GOTO   1FC
01DD:  MOVLW  80
01DE:  XORWF  64,F
01DF:  BTFSS  64.7
01E0:  GOTO   1E5
01E1:  GOTO   21F
01E2:  MOVF   5B,W
01E3:  MOVWF  5F
01E4:  GOTO   1F2
01E5:  MOVF   57,W
01E6:  MOVWF  5F
01E7:  MOVF   64,F
01E8:  BTFSS  03.2
01E9:  GOTO   1F2
01EA:  MOVF   63,F
01EB:  BTFSS  03.2
01EC:  GOTO   1F2
01ED:  MOVF   62,F
01EE:  BTFSS  03.2
01EF:  GOTO   1F2
01F0:  CLRF   77
01F1:  GOTO   213
01F2:  BTFSC  64.7
01F3:  GOTO   1FC
01F4:  BCF    03.0
01F5:  RLF    61,F
01F6:  RLF    62,F
01F7:  RLF    63,F
01F8:  RLF    64,F
01F9:  DECFSZ 77,F
01FA:  GOTO   1F2
01FB:  GOTO   21A
01FC:  BTFSS  5F.7
01FD:  GOTO   200
01FE:  BSF    64.7
01FF:  GOTO   213
0200:  BCF    64.7
0201:  GOTO   213
0202:  MOVF   5A,W
0203:  MOVWF  77
0204:  MOVF   5B,W
0205:  MOVWF  64
0206:  MOVF   5C,W
0207:  MOVWF  63
0208:  MOVF   5D,W
0209:  MOVWF  62
020A:  GOTO   213
020B:  MOVF   56,W
020C:  MOVWF  77
020D:  MOVF   57,W
020E:  MOVWF  64
020F:  MOVF   58,W
0210:  MOVWF  63
0211:  MOVF   59,W
0212:  MOVWF  62
0213:  MOVF   64,W
0214:  MOVWF  78
0215:  MOVF   63,W
0216:  MOVWF  79
0217:  MOVF   62,W
0218:  MOVWF  7A
0219:  GOTO   252
021A:  CLRF   77
021B:  CLRF   78
021C:  CLRF   79
021D:  CLRF   7A
021E:  GOTO   252
021F:  CLRF   61
0220:  COMF   62,F
0221:  COMF   63,F
0222:  COMF   64,F
0223:  COMF   61,F
0224:  INCF   61,F
0225:  BTFSS  03.2
0226:  GOTO   22D
0227:  INCF   62,F
0228:  BTFSS  03.2
0229:  GOTO   22D
022A:  INCF   63,F
022B:  BTFSC  03.2
022C:  INCF   64,F
022D:  BTFSC  60.0
022E:  GOTO   13B
022F:  BTFSC  60.1
0230:  GOTO   17D
0231:  BTFSC  60.2
0232:  GOTO   1B3
0233:  GOTO   1E2
0234:  MOVF   00,W
0235:  ADDWF  62,F
0236:  BTFSS  03.0
0237:  GOTO   23E
0238:  INCF   63,F
0239:  BTFSS  03.2
023A:  GOTO   23E
023B:  INCF   64,F
023C:  BTFSC  03.2
023D:  BSF    5E.0
023E:  DECF   04,F
023F:  MOVF   00,W
0240:  ADDWF  63,F
0241:  BTFSS  03.0
0242:  GOTO   246
0243:  INCF   64,F
0244:  BTFSC  03.2
0245:  BSF    5E.0
0246:  DECF   04,F
0247:  MOVF   00,W
0248:  BTFSS  00.7
0249:  XORLW  80
024A:  ADDWF  64,F
024B:  BTFSC  03.0
024C:  BSF    5E.0
024D:  BTFSC  60.4
024E:  GOTO   142
024F:  BTFSC  60.5
0250:  GOTO   184
0251:  GOTO   1BA
0252:  RETURN
0253:  MOVF   43,W
0254:  BTFSC  03.2
0255:  GOTO   318
0256:  MOVWF  4F
0257:  MOVF   47,W
0258:  BTFSC  03.2
0259:  GOTO   318
025A:  SUBWF  4F,F
025B:  BTFSS  03.0
025C:  GOTO   262
025D:  MOVLW  7F
025E:  ADDWF  4F,F
025F:  BTFSC  03.0
0260:  GOTO   318
0261:  GOTO   268
0262:  MOVLW  81
0263:  SUBWF  4F,F
0264:  BTFSS  03.0
0265:  GOTO   318
0266:  BTFSC  03.2
0267:  GOTO   318
0268:  MOVF   4F,W
0269:  MOVWF  77
026A:  CLRF   78
026B:  CLRF   79
026C:  CLRF   7A
026D:  CLRF   4E
026E:  MOVF   44,W
026F:  MOVWF  4D
0270:  BSF    4D.7
0271:  MOVF   45,W
0272:  MOVWF  4C
0273:  MOVF   46,W
0274:  MOVWF  4B
0275:  MOVLW  19
0276:  MOVWF  4F
0277:  MOVF   4A,W
0278:  SUBWF  4B,F
0279:  BTFSC  03.0
027A:  GOTO   28B
027B:  MOVLW  01
027C:  SUBWF  4C,F
027D:  BTFSC  03.0
027E:  GOTO   28B
027F:  SUBWF  4D,F
0280:  BTFSC  03.0
0281:  GOTO   28B
0282:  SUBWF  4E,F
0283:  BTFSC  03.0
0284:  GOTO   28B
0285:  INCF   4E,F
0286:  INCF   4D,F
0287:  INCF   4C,F
0288:  MOVF   4A,W
0289:  ADDWF  4B,F
028A:  GOTO   2BD
028B:  MOVF   49,W
028C:  SUBWF  4C,F
028D:  BTFSC  03.0
028E:  GOTO   2A6
028F:  MOVLW  01
0290:  SUBWF  4D,F
0291:  BTFSC  03.0
0292:  GOTO   2A6
0293:  SUBWF  4E,F
0294:  BTFSC  03.0
0295:  GOTO   2A6
0296:  INCF   4E,F
0297:  INCF   4D,F
0298:  MOVF   49,W
0299:  ADDWF  4C,F
029A:  MOVF   4A,W
029B:  ADDWF  4B,F
029C:  BTFSS  03.0
029D:  GOTO   2BD
029E:  INCF   4C,F
029F:  BTFSS  03.2
02A0:  GOTO   2BD
02A1:  INCF   4D,F
02A2:  BTFSS  03.2
02A3:  GOTO   2BD
02A4:  INCF   4E,F
02A5:  GOTO   2BD
02A6:  MOVF   48,W
02A7:  IORLW  80
02A8:  SUBWF  4D,F
02A9:  BTFSC  03.0
02AA:  GOTO   2BC
02AB:  MOVLW  01
02AC:  SUBWF  4E,F
02AD:  BTFSC  03.0
02AE:  GOTO   2BC
02AF:  INCF   4E,F
02B0:  MOVF   48,W
02B1:  IORLW  80
02B2:  ADDWF  4D,F
02B3:  MOVF   49,W
02B4:  ADDWF  4C,F
02B5:  BTFSS  03.0
02B6:  GOTO   29A
02B7:  INCF   4D,F
02B8:  BTFSS  03.2
02B9:  GOTO   29A
02BA:  INCF   4E,F
02BB:  GOTO   29A
02BC:  BSF    7A.0
02BD:  DECFSZ 4F,F
02BE:  GOTO   2C0
02BF:  GOTO   2CB
02C0:  BCF    03.0
02C1:  RLF    4B,F
02C2:  RLF    4C,F
02C3:  RLF    4D,F
02C4:  RLF    4E,F
02C5:  BCF    03.0
02C6:  RLF    7A,F
02C7:  RLF    79,F
02C8:  RLF    78,F
02C9:  RLF    50,F
02CA:  GOTO   277
02CB:  BTFSS  50.0
02CC:  GOTO   2D3
02CD:  BCF    03.0
02CE:  RRF    78,F
02CF:  RRF    79,F
02D0:  RRF    7A,F
02D1:  RRF    50,F
02D2:  GOTO   2D6
02D3:  DECF   77,F
02D4:  BTFSC  03.2
02D5:  GOTO   318
02D6:  BTFSC  50.7
02D7:  GOTO   2FF
02D8:  BCF    03.0
02D9:  RLF    4B,F
02DA:  RLF    4C,F
02DB:  RLF    4D,F
02DC:  RLF    4E,F
02DD:  MOVF   4A,W
02DE:  SUBWF  4B,F
02DF:  BTFSC  03.0
02E0:  GOTO   2EB
02E1:  MOVLW  01
02E2:  SUBWF  4C,F
02E3:  BTFSC  03.0
02E4:  GOTO   2EB
02E5:  SUBWF  4D,F
02E6:  BTFSC  03.0
02E7:  GOTO   2EB
02E8:  SUBWF  4E,F
02E9:  BTFSS  03.0
02EA:  GOTO   30E
02EB:  MOVF   49,W
02EC:  SUBWF  4C,F
02ED:  BTFSC  03.0
02EE:  GOTO   2F6
02EF:  MOVLW  01
02F0:  SUBWF  4D,F
02F1:  BTFSC  03.0
02F2:  GOTO   2F6
02F3:  SUBWF  4E,F
02F4:  BTFSS  03.0
02F5:  GOTO   30E
02F6:  MOVF   48,W
02F7:  IORLW  80
02F8:  SUBWF  4D,F
02F9:  BTFSC  03.0
02FA:  GOTO   2FF
02FB:  MOVLW  01
02FC:  SUBWF  4E,F
02FD:  BTFSS  03.0
02FE:  GOTO   30E
02FF:  INCF   7A,F
0300:  BTFSS  03.2
0301:  GOTO   30E
0302:  INCF   79,F
0303:  BTFSS  03.2
0304:  GOTO   30E
0305:  INCF   78,F
0306:  BTFSS  03.2
0307:  GOTO   30E
0308:  INCF   77,F
0309:  BTFSC  03.2
030A:  GOTO   318
030B:  RRF    78,F
030C:  RRF    79,F
030D:  RRF    7A,F
030E:  MOVF   44,W
030F:  MOVWF  4F
0310:  MOVF   48,W
0311:  XORWF  4F,F
0312:  BTFSS  4F.7
0313:  GOTO   316
0314:  BSF    78.7
0315:  GOTO   31C
0316:  BCF    78.7
0317:  GOTO   31C
0318:  CLRF   77
0319:  CLRF   78
031A:  CLRF   79
031B:  CLRF   7A
031C:  RETURN
031D:  MOVF   53,W
031E:  MOVWF  5A
031F:  MOVF   57,W
0320:  XORWF  5A,F
0321:  BTFSS  5A.7
0322:  GOTO   328
0323:  BCF    03.2
0324:  BCF    03.0
0325:  BTFSC  53.7
0326:  BSF    03.0
0327:  GOTO   35B
0328:  MOVF   53,W
0329:  MOVWF  5A
032A:  MOVF   56,W
032B:  MOVWF  5B
032C:  MOVF   52,W
032D:  SUBWF  5B,F
032E:  BTFSC  03.2
032F:  GOTO   336
0330:  BTFSS  5A.7
0331:  GOTO   35B
0332:  MOVF   03,W
0333:  XORLW  01
0334:  MOVWF  03
0335:  GOTO   35B
0336:  MOVF   57,W
0337:  MOVWF  5B
0338:  MOVF   53,W
0339:  SUBWF  5B,F
033A:  BTFSC  03.2
033B:  GOTO   342
033C:  BTFSS  5A.7
033D:  GOTO   35B
033E:  MOVF   03,W
033F:  XORLW  01
0340:  MOVWF  03
0341:  GOTO   35B
0342:  MOVF   58,W
0343:  MOVWF  5B
0344:  MOVF   54,W
0345:  SUBWF  5B,F
0346:  BTFSC  03.2
0347:  GOTO   34E
0348:  BTFSS  5A.7
0349:  GOTO   35B
034A:  MOVF   03,W
034B:  XORLW  01
034C:  MOVWF  03
034D:  GOTO   35B
034E:  MOVF   59,W
034F:  MOVWF  5B
0350:  MOVF   55,W
0351:  SUBWF  5B,F
0352:  BTFSC  03.2
0353:  GOTO   35A
0354:  BTFSS  5A.7
0355:  GOTO   35B
0356:  MOVF   03,W
0357:  XORLW  01
0358:  MOVWF  03
0359:  GOTO   35B
035A:  BCF    03.0
035B:  RETURN
035C:  MOVLW  8E
035D:  MOVWF  77
035E:  MOVF   52,W
035F:  SUBWF  77,F
0360:  MOVF   53,W
0361:  MOVWF  79
0362:  MOVF   54,W
0363:  MOVWF  78
0364:  BSF    79.7
0365:  MOVF   77,F
0366:  BTFSC  03.2
0367:  GOTO   373
0368:  BCF    03.0
0369:  MOVF   79,F
036A:  BTFSS  03.2
036B:  GOTO   36F
036C:  MOVF   78,F
036D:  BTFSC  03.2
036E:  GOTO   373
036F:  RRF    79,F
0370:  RRF    78,F
0371:  DECFSZ 77,F
0372:  GOTO   368
0373:  BTFSS  53.7
0374:  GOTO   37A
0375:  COMF   78,F
0376:  COMF   79,F
0377:  INCF   78,F
0378:  BTFSC  03.2
0379:  INCF   79,F
037A:  RETURN
037B:  MOVLW  8E
037C:  MOVWF  77
037D:  MOVF   57,W
037E:  MOVWF  78
037F:  MOVF   56,W
0380:  MOVWF  79
0381:  CLRF   7A
0382:  MOVF   78,F
0383:  BTFSS  03.2
0384:  GOTO   38F
0385:  MOVF   79,W
0386:  MOVWF  78
0387:  CLRF   79
0388:  MOVLW  08
0389:  SUBWF  77,F
038A:  MOVF   78,F
038B:  BTFSS  03.2
038C:  GOTO   38F
038D:  CLRF   77
038E:  GOTO   397
038F:  BCF    03.0
0390:  BTFSC  78.7
0391:  GOTO   396
0392:  RLF    79,F
0393:  RLF    78,F
0394:  DECF   77,F
0395:  GOTO   38F
0396:  BCF    78.7
0397:  RETURN
0398:  MOVF   52,W
0399:  BTFSC  03.2
039A:  GOTO   408
039B:  MOVWF  5A
039C:  MOVF   56,W
039D:  BTFSC  03.2
039E:  GOTO   408
039F:  ADDWF  5A,F
03A0:  BTFSC  03.0
03A1:  GOTO   3A9
03A2:  MOVLW  7F
03A3:  SUBWF  5A,F
03A4:  BTFSS  03.0
03A5:  GOTO   408
03A6:  BTFSC  03.2
03A7:  GOTO   408
03A8:  GOTO   3AD
03A9:  MOVLW  81
03AA:  ADDWF  5A,F
03AB:  BTFSC  03.0
03AC:  GOTO   408
03AD:  MOVF   5A,W
03AE:  MOVWF  77
03AF:  CLRF   78
03B0:  CLRF   79
03B1:  CLRF   7A
03B2:  MOVF   53,W
03B3:  MOVWF  5E
03B4:  BSF    5E.7
03B5:  MOVF   54,W
03B6:  MOVWF  5D
03B7:  MOVF   55,W
03B8:  MOVWF  5C
03B9:  MOVLW  18
03BA:  MOVWF  5A
03BB:  CLRF   5B
03BC:  BTFSS  5C.0
03BD:  GOTO   3D6
03BE:  MOVF   59,W
03BF:  ADDWF  7A,F
03C0:  BTFSS  03.0
03C1:  GOTO   3C8
03C2:  INCF   79,F
03C3:  BTFSS  03.2
03C4:  GOTO   3C8
03C5:  INCF   78,F
03C6:  BTFSC  03.2
03C7:  BSF    5B.7
03C8:  MOVF   58,W
03C9:  ADDWF  79,F
03CA:  BTFSS  03.0
03CB:  GOTO   3CF
03CC:  INCF   78,F
03CD:  BTFSC  03.2
03CE:  BSF    5B.7
03CF:  MOVF   57,W
03D0:  MOVWF  54
03D1:  BSF    54.7
03D2:  MOVF   54,W
03D3:  ADDWF  78,F
03D4:  BTFSC  03.0
03D5:  BSF    5B.7
03D6:  RLF    5B,F
03D7:  RRF    78,F
03D8:  RRF    79,F
03D9:  RRF    7A,F
03DA:  RRF    5E,F
03DB:  RRF    5D,F
03DC:  RRF    5C,F
03DD:  BCF    03.0
03DE:  DECFSZ 5A,F
03DF:  GOTO   3BB
03E0:  MOVLW  01
03E1:  ADDWF  77,F
03E2:  BTFSC  03.0
03E3:  GOTO   408
03E4:  BTFSC  78.7
03E5:  GOTO   3ED
03E6:  RLF    5E,F
03E7:  RLF    7A,F
03E8:  RLF    79,F
03E9:  RLF    78,F
03EA:  DECF   77,F
03EB:  BTFSC  03.2
03EC:  GOTO   408
03ED:  BTFSS  5E.7
03EE:  GOTO   3FE
03EF:  INCF   7A,F
03F0:  BTFSS  03.2
03F1:  GOTO   3FE
03F2:  INCF   79,F
03F3:  BTFSS  03.2
03F4:  GOTO   3FE
03F5:  INCF   78,F
03F6:  BTFSS  03.2
03F7:  GOTO   3FE
03F8:  RRF    78,F
03F9:  RRF    79,F
03FA:  RRF    7A,F
03FB:  INCF   77,F
03FC:  BTFSC  03.2
03FD:  GOTO   408
03FE:  MOVF   53,W
03FF:  MOVWF  5B
0400:  MOVF   57,W
0401:  XORWF  5B,F
0402:  BTFSS  5B.7
0403:  GOTO   406
0404:  BSF    78.7
0405:  GOTO   40C
0406:  BCF    78.7
0407:  GOTO   40C
0408:  CLRF   77
0409:  CLRF   78
040A:  CLRF   79
040B:  CLRF   7A
040C:  RETURN
*
0580:  MOVF   3F,W
0581:  SUBLW  B6
0582:  MOVWF  3F
0583:  CLRF   7A
0584:  MOVF   40,W
0585:  MOVWF  43
0586:  BSF    40.7
0587:  BCF    03.0
0588:  RRF    40,F
0589:  RRF    41,F
058A:  RRF    42,F
058B:  RRF    7A,F
058C:  RRF    79,F
058D:  RRF    78,F
058E:  RRF    77,F
058F:  DECFSZ 3F,F
0590:  GOTO   587
0591:  BTFSS  43.7
0592:  GOTO   59E
0593:  COMF   77,F
0594:  COMF   78,F
0595:  COMF   79,F
0596:  COMF   7A,F
0597:  INCF   77,F
0598:  BTFSC  03.2
0599:  INCF   78,F
059A:  BTFSC  03.2
059B:  INCF   79,F
059C:  BTFSC  03.2
059D:  INCF   7A,F
059E:  RETURN
....................  
.................... #list 
....................  
.................... #include <def_16f877a.h> 
.................... //========================= Register Definitions ========================== 
.................... //-----Register Files------------------------------------------------------ 
.................... #byte INDF         =0x00 
.................... #byte TMR0         =0x01 
.................... #byte PCL          =0x02 
.................... #byte STATUS       =0x03 
.................... #byte FSR          =0x04 
.................... #byte PORTA    = 0x05 
.................... #byte PORTB    = 0x06 
.................... #byte PORTC    = 0x07 
.................... #byte PORTD    = 0x08 
.................... #byte PORTE    = 0x09 
.................... #byte PCLATH       =0x0A 
.................... #byte INTCON       =0x0B 
.................... #byte PIR1	   =0x0C 
.................... #byte PIR2	   =0x0D 
.................... #byte TMR1L	   =0x0E 
.................... #byte TMR1H        =0x0F 
.................... #byte T1CON        =0x10 
.................... #byte TMR2	   =0x11 
.................... #byte T2CON	   =0x12 
.................... #byte SSPBUF       =0x13 
.................... #byte SSPCON       =0x14 
.................... #byte CCPR1L       =0x15 
.................... #byte CCPR1H       =0x16 
.................... #byte CCP1CON      =0x17 
.................... #byte RCSTA        =0x18 
.................... #byte TXREG        =0x19 
.................... #byte RCREG        =0x1A 
.................... #byte CCPR2L       =0x1B 
.................... #byte CCPR2H       =0x1C 
.................... #byte CCP2CON      =0x1D 
.................... #byte ADRESH       =0x1E 
.................... #byte ADCON0	   =0x1F 
.................... #byte OPTION_REG   =0x81 
.................... //-------------- TRIS PORT ----------------------------- 
.................... #byte TRISA        =0x85 
.................... #byte TRISB	   =0x86 
.................... #byte TRISC	   =0x87 
.................... #byte TRISD        =0x88 
.................... #byte TRISE	   =0x89 
.................... #byte PIE1	   =0x8C 
.................... #byte PIE2	   =0x8D 
.................... #byte PCON	   =0x8E 
....................  
.................... #byte SSPCON2      =0x91 
.................... #byte PR2          =0x92 
.................... #byte SSPADD       =0x93 
.................... #byte SSPSTAT      =0x94 
....................  
.................... #byte TXSTA        =0x98 
.................... #byte SPBRG        =0x99 
....................  
.................... #byte ADRESL       =0x9E 
.................... #byte ADCON1       =0x9F 
....................  
.................... /*	bank 2 registers */ 
....................  
.................... #byte EEDATA	   =0x010C 
.................... #byte EEADR	   =0x010D 
.................... #byte EEDATH       =0x010E 
.................... #byte EEADRH       =0x010F 
....................  
.................... /*	bank 3 registers */ 
....................  
.................... #byte EECON1	   =0x018C 
.................... #byte EECON2	   =0x018D 
....................  
.................... //----- STATUS Bits -------------------------------------------------------- 
....................  
.................... // For Assembly Language - Note upper case 
.................... #define IRP 	7 
.................... #define RP1 	6 
.................... #define RP0 	5 
.................... #define NOT_TO 	4 
.................... #define NOT_PD 	3 
.................... #define Z 	2 
.................... #define DC 	1 
.................... #define C  	0 
....................  
.................... //---------------- TRIS BIT PORT-------------------------------------- 
.................... //------------------TRISA bits--------------------------- 
....................  
.................... #bit TRISA5     =0x85.5 
.................... #bit TRISA4     =0x85.4 
.................... #bit TRISA3     =0x85.3 
.................... #bit TRISA2     =0x85.2 
.................... #bit TRISA1     =0x85.1 
.................... #bit TRISA0     =0x85.0 
....................  
.................... //-----------------TRISB bits----------------------------- 
....................  
.................... #bit TRISB7     =0x86.7 
.................... #bit TRISB6     =0x86.6 
.................... #bit TRISB5     =0x86.5 
.................... #bit TRISB4     =0x86.4 
.................... #bit TRISB3     =0x86.3 
.................... #bit TRISB2     =0x86.2 
.................... #bit TRISB1     =0x86.1 
.................... #bit TRISB0     =0x86.0 
....................  
.................... //----------------TRISC bits------------------- 
....................  
.................... #bit TRISC7     =0x87.7 
.................... #bit TRISC6     =0x87.6 
.................... #bit TRISC5     =0x87.5 
.................... #bit TRISC4     =0x87.4 
.................... #bit TRISC3     =0x87.3 
.................... #bit TRISC2     =0x87.2 
.................... #bit TRISC1     =0x87.1 
.................... #bit TRISC0     =0x87.0 
.................... //------------------TRISD bit------------------ 
.................... #bit TRISD7     =0x88.7 
.................... #bit TRISD6     =0x88.6 
.................... #bit TRISD5     =0x88.5 
.................... #bit TRISD4     =0x88.4 
.................... #bit TRISD3     =0x88.3 
.................... #bit TRISD2     =0x88.2 
.................... #bit TRISD1     =0x88.1 
.................... #bit TRISD0     =0x88.0 
.................... //-------------TRISE bit---------------------- 
.................... #bit TRISE2     =0x89.2 
.................... #bit TRISE1     =0x89.1 
.................... #bit TRISE0     =0x89.0 
.................... //--------------------------------------------------------------------------- 
.................... //---------PORTA bits------------------ 
.................... #bit RA4			= 0x05.4 
.................... #bit RA3			= 0x05.3 
.................... #bit RA2			= 0x05.2 
.................... #bit RA1			= 0x05.1 
.................... #bit RA0			= 0x05.0 
.................... //---------PORTB bits------------------ 
.................... #bit RB7			= 0x06.7 
.................... #bit RB6			= 0x06.6 
.................... #bit RB5			= 0x06.5 
.................... #bit RB4			= 0x06.4 
.................... #bit RB3			= 0x06.3 
.................... #bit RB2			= 0x06.2 
.................... #bit RB1			= 0x06.1 
.................... #bit RB0			= 0x06.0 
.................... //---------PORTC bits------------------ 
.................... #bit RC7			= 0x07.7 
.................... #bit RC6			= 0x07.6 
.................... #bit RC5			= 0x07.5 
.................... #bit RC4			= 0x07.4 
.................... #bit RC3			= 0x07.3 
.................... #bit RC2			= 0x07.2 
.................... #bit RC1			= 0x07.1 
.................... #bit RC0			= 0x07.0 
.................... //---------PORTD bits------------------ 
.................... #bit RD7			= 0x08.7 
.................... #bit RD6			= 0x08.6 
.................... #bit RD5			= 0x08.5 
.................... #bit RD4			= 0x08.4 
.................... #bit RD3			= 0x08.3 
.................... #bit RD2			= 0x08.2 
.................... #bit RD1			= 0x08.1 
.................... #bit RD0			= 0x08.0 
.................... //---------PORTE bits------------------ 
.................... #bit RE2			= 0x09.2 
.................... #bit RE1			= 0x09.1 
.................... #bit RE0			= 0x09.0 
....................  
.................... //----- INTCON ------------------------------------------------------------- 
....................  
.................... #bit	GIE      = 0x0b.7 
.................... #bit	PEIE     = 0x0b.6 
.................... #bit	TMR0IE   = 0x0b.5 
.................... #bit	INTE     = 0x0b.4 
.................... #bit	RBIE     = 0x0b.3 
.................... #bit	TMR0IF   = 0x0b.2 
.................... #bit	INTF     = 0x0b.1 
.................... #bit	RBIF     = 0x0b.0 
....................  
.................... //----- PIR1 --------------------------------------------------------------- 
....................  
.................... #bit pspif     = 0x0c.7 
.................... #bit adif      = 0x0c.6 
.................... #bit rcif      = 0x0c.5 
.................... #bit txif      = 0x0c.4 
.................... #bit sspif     = 0x0c.3 
.................... #bit ccp1if    = 0x0c.2 
.................... #bit tmr2if    = 0x0c.1 
.................... #bit tmr1if    = 0x0c.0 
....................  
.................... //----- PIR2 --------------------------------------------------------------- 
....................  
.................... #bit cmif      = 0x0d.6 
.................... #bit eeif      = 0x0d.4 
.................... #bit bclif     = 0x0d.3 
.................... #bit ccp2if    = 0x0d.0 
....................  
.................... //----- PIE1 --------------------------------------------------------------- 
....................  
.................... #bit pspie     = 0x8c.7 
.................... #bit adie      = 0x8c.6 
.................... #bit rcie      = 0x8c.5 
.................... #bit txie      = 0x8c.4 
.................... #bit sspie     = 0x8c.3 
.................... #bit ccp1ie    = 0x8c.2 
.................... #bit tmr2ie    = 0x8c.1 
.................... #bit tmr1ie    = 0x8c.0 
....................  
.................... //----- PIE2 --------------------------------------------------------------- 
....................  
.................... #bit cmie      = 0x8d.6 
.................... #bit eeie      = 0x8d.4 
.................... #bit bclie     = 0x8d.3 
.................... #bit ccp2ie    = 0x8d.0 
.................... //----- T1CON Bits --------------------------------------------------------- 
.................... #bit T1CKPS1    =0x10.5 
.................... #bit T1CKPS0    =0x10.4 
.................... #bit T1OSCEN    =0x10.3 
.................... #bit T1SYNC     =0x10.2 
.................... #bit TMR1CS     =0x10.1 
.................... #bit TMR1ON     =0x10.0 
....................  
.................... //----- T2CON Bits --------------------------------------------------------- 
.................... #bit TOUTPS3    =0x12.6 
.................... #bit TOUTPS2    =0x12.5 
.................... #bit TOUTPS1    =0x12.4 
.................... #bit TOUTPS0    =0x12.3 
.................... #bit TMR2ON     =0x12.2 
.................... #bit T2CKPS1    =0x12.1 
.................... #bit T2CKPS0    =0x12.0 
....................  
.................... //-------------SSPCON bits-------------------------- 
.................... #bit WCOL       =0x14.7 
.................... #bit SSPOV      =0x14.6 
.................... #bit SSPEN      =0x14.5 
.................... #bit CKP        =0x14.4 
.................... #bit SSPM3      =0x14.3 
.................... #bit SSPM2      =0x14.2 
.................... #bit SSPM1      =0x14.1 
.................... #bit SSPM0      =0x14.0 
....................  
.................... //---------------CCP1CON bits-------- 
.................... #bit CCP1X      =0x17.5 
.................... #bit CCP1Y      =0x17.4 
.................... #bit CCP1M3     =0x17.3 
.................... #bit CCP1M2     =0x17.2 
.................... #bit CCP1M1     =0x17.1 
.................... #bit CCP1M0     =0x17.0 
....................  
.................... //---------------RCSTA bits------------------- 
....................  
.................... #bit SPEN       =0x18.7 
.................... #bit RX9        =0x18.6 
.................... #bit SREN       =0x18.5 
.................... #bit CREN       =0x18.4 
.................... #bit ADDEN      =0x18.3 
.................... #bit FERR       =0x18.2 
.................... #bit OERR       =0x18.1 
.................... #bit RX9D       =0x18.0 
....................  
.................... //-----------------------CCP2CON bits---------- 
....................  
.................... #bit CCP2X      =0x1D.5 
.................... #bit CCP2Y      =0x1D.4 
.................... #bit CCP2M3     =0x1D.3 
.................... #bit CCP2M2     =0x1D.2 
.................... #bit CCP2M1     =0x1D.1 
.................... #bit CCP2M0     =0x1D.0 
....................  
.................... //----- ADCON0 Bits -------------------------------------------------------- 
.................... #bit ADCS1      =0x1F.7 
.................... #bit ADCS0      =0x1F.6 
.................... #bit CHS2       =0x1F.5 
.................... #bit CHS1       =0x1F.4 
.................... #bit CHS0       =0x1F.3 
.................... #bit ADGO       =0x1F.2 
.................... #bit ADON       =0x1F.0 
....................  
.................... //----- OPTION_reg Bits -------------------------------------------------------- 
....................  
.................... #bit RBPU       =0x81.7 
.................... #bit INTEDG     =0x81.6 
.................... #bit T0CS       =0x81.5 
.................... #bit T0SE       =0x81.4 
.................... #bit PSA        =0x81.3 
.................... #bit PS2        =0x81.2 
.................... #bit PS1        =0x81.1 
.................... #bit PS0        =0x81.0 
.................... //----- PCON Bits ---------------------------------------------------------- 
....................  
.................... #bit POR        =0x8E.1 
.................... #bit BOD        =0x8E.0 
....................  
.................... //-----------SSPCON2 bits--------------------------------------------- 
....................  
.................... #bit GCEN       =0x91.7 
.................... #bit ACKSTAT    =0x91.6 
.................... #bit ACKDT      =0x91.5 
.................... #bit ACKEN      =0x91.4 
.................... #bit RCEN       =0x91.3 
.................... #bit PEN        =0x91.2 
.................... #bit RSEN       =0x91.1 
.................... #bit SEN        =0x91.0 
....................  
.................... //---------------------SSPSTAT bits------------------------ 
....................  
.................... #bit STAT_SMP   =0x94.7 
.................... #bit STAT_CKE   =0x94.6 
.................... #bit STAT_DA    =0x94.5 
.................... #bit STAT_P     =0x94.4 
.................... #bit STAT_S     =0x94.3 
.................... #bit STAT_RW    =0x94.2 
.................... #bit STAT_UA    =0x94.1 
.................... #bit STAT_BF    =0x94.0 
....................  
.................... //----------------TXSTA bits----------------- 
....................  
.................... #bit CSRC       =0x98.7 
.................... #bit TX9        =0x98.6 
.................... #bit TXEN       =0x98.5 
.................... #bit SYNC       =0x98.4 
.................... #bit BRGH       =0x98.2 
.................... #bit TRMT       =0x98.1 
.................... #bit TX9D       =0x98.0 
....................  
.................... //--------------ADCON1 bits--------------- 
....................  
.................... #bit ADFM       =0x9F.7 
.................... #bit ADCS2      =0x9F.6 
.................... #bit PCFG3      =0x9F.3 
.................... #bit PCFG2      =0x9F.2 
.................... #bit PCFG1      =0x9F.1 
.................... #bit PCFG0      =0x9F.0 
....................  
.................... //-----------EECON1 bits---------- 
....................  
.................... #bit EEPGD      =0x018C.7 
.................... #bit WRERR      =0x018C.3 
.................... #bit WREN       =0x018C.2 
.................... #bit WR         =0x018C.1 
.................... #bit RD         =0x018C.0 
....................  
....................  
.................... #device ADC = 16, WRITE_EEPROM = ASYNC 
....................  
.................... #FUSES NOWDT      //No Watch Dog Timer 
.................... #FUSES NOBROWNOUT //No brownout reset 
.................... #FUSES NOLVP      //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal = 20000000) 
059F:  MOVLW  48
05A0:  MOVWF  04
05A1:  BCF    03.7
05A2:  MOVF   00,W
05A3:  BTFSC  03.2
05A4:  GOTO   5B2
05A5:  MOVLW  06
05A6:  MOVWF  78
05A7:  CLRF   77
05A8:  DECFSZ 77,F
05A9:  GOTO   5A8
05AA:  DECFSZ 78,F
05AB:  GOTO   5A7
05AC:  MOVLW  7B
05AD:  MOVWF  77
05AE:  DECFSZ 77,F
05AF:  GOTO   5AE
05B0:  DECFSZ 00,F
05B1:  GOTO   5A5
05B2:  RETURN
....................  
.................... //================================================== PREPROSECSOR ================================================== 
....................  
.................... // 1 >> on 
.................... #define triac1Out PIN_C6 
.................... #define triac2Out PIN_C7 
.................... // #define triac1Out PIN_D0 
.................... // #define triac2Out PIN_D1 
.................... #define relayOut PIN_C1 
....................  
.................... #byte CMCON = 0x9C 
....................  
.................... #include "floor.c" 
.................... float32 FLOOR(float32 x) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
*
040D:  BCF    51.0
....................    y = x; 
040E:  MOVF   46,W
040F:  MOVWF  4A
0410:  MOVF   45,W
0411:  MOVWF  49
0412:  MOVF   44,W
0413:  MOVWF  48
0414:  MOVF   43,W
0415:  MOVWF  47
....................  
....................    if (x < 0) 
0416:  MOVF   46,W
0417:  MOVWF  55
0418:  MOVF   45,W
0419:  MOVWF  54
041A:  MOVF   44,W
041B:  MOVWF  53
041C:  MOVF   43,W
041D:  MOVWF  52
041E:  CLRF   59
041F:  CLRF   58
0420:  CLRF   57
0421:  CLRF   56
0422:  CALL   31D
0423:  BTFSS  03.0
0424:  GOTO   429
....................    { 
....................       s = 1; 
0425:  BSF    51.0
....................       y = -y; 
0426:  MOVF   48,W
0427:  XORLW  80
0428:  MOVWF  48
....................    } 
....................  
....................    if (y <= 32768.0) 
0429:  MOVF   4A,W
042A:  MOVWF  55
042B:  MOVF   49,W
042C:  MOVWF  54
042D:  MOVF   48,W
042E:  MOVWF  53
042F:  MOVF   47,W
0430:  MOVWF  52
0431:  CLRF   59
0432:  CLRF   58
0433:  CLRF   57
0434:  MOVLW  8E
0435:  MOVWF  56
0436:  CALL   31D
0437:  BTFSC  03.0
0438:  GOTO   43B
0439:  BTFSS  03.2
043A:  GOTO   452
....................       res = (float32)(unsigned int16)y; 
043B:  MOVF   4A,W
043C:  MOVWF  55
043D:  MOVF   49,W
043E:  MOVWF  54
043F:  MOVF   48,W
0440:  MOVWF  53
0441:  MOVF   47,W
0442:  MOVWF  52
0443:  CALL   35C
0444:  MOVF   79,W
0445:  MOVWF  57
0446:  MOVF   78,W
0447:  MOVWF  56
0448:  CALL   37B
0449:  MOVF   7A,W
044A:  MOVWF  4E
044B:  MOVF   79,W
044C:  MOVWF  4D
044D:  MOVF   78,W
044E:  MOVWF  4C
044F:  MOVF   77,W
0450:  MOVWF  4B
0451:  GOTO   50F
....................  
....................    else if (y < 10000000.0) 
0452:  MOVF   4A,W
0453:  MOVWF  55
0454:  MOVF   49,W
0455:  MOVWF  54
0456:  MOVF   48,W
0457:  MOVWF  53
0458:  MOVF   47,W
0459:  MOVWF  52
045A:  MOVLW  80
045B:  MOVWF  59
045C:  MOVLW  96
045D:  MOVWF  58
045E:  MOVLW  18
045F:  MOVWF  57
0460:  MOVLW  96
0461:  MOVWF  56
0462:  CALL   31D
0463:  BTFSS  03.0
0464:  GOTO   507
....................    { 
....................       l = (unsigned int16)(y * 0.000030517578125); 
0465:  MOVF   4A,W
0466:  MOVWF  55
0467:  MOVF   49,W
0468:  MOVWF  54
0469:  MOVF   48,W
046A:  MOVWF  53
046B:  MOVF   47,W
046C:  MOVWF  52
046D:  CLRF   59
046E:  CLRF   58
046F:  CLRF   57
0470:  MOVLW  70
0471:  MOVWF  56
0472:  CALL   398
0473:  MOVF   7A,W
0474:  MOVWF  55
0475:  MOVF   79,W
0476:  MOVWF  54
0477:  MOVF   78,W
0478:  MOVWF  53
0479:  MOVF   77,W
047A:  MOVWF  52
047B:  CALL   35C
047C:  MOVF   79,W
047D:  MOVWF  50
047E:  MOVF   78,W
047F:  MOVWF  4F
....................       y = 32768.0 * (y * 0.000030517578125 - (float32)l); 
0480:  MOVF   4A,W
0481:  MOVWF  55
0482:  MOVF   49,W
0483:  MOVWF  54
0484:  MOVF   48,W
0485:  MOVWF  53
0486:  MOVF   47,W
0487:  MOVWF  52
0488:  CLRF   59
0489:  CLRF   58
048A:  CLRF   57
048B:  MOVLW  70
048C:  MOVWF  56
048D:  CALL   398
048E:  MOVF   7A,W
048F:  MOVWF  55
0490:  MOVF   79,W
0491:  MOVWF  54
0492:  MOVF   78,W
0493:  MOVWF  53
0494:  MOVF   77,W
0495:  MOVWF  52
0496:  MOVF   50,W
0497:  MOVWF  57
0498:  MOVF   4F,W
0499:  MOVWF  56
049A:  CALL   37B
049B:  BSF    03.1
049C:  MOVF   55,W
049D:  MOVWF  59
049E:  MOVF   54,W
049F:  MOVWF  58
04A0:  MOVF   53,W
04A1:  MOVWF  57
04A2:  MOVF   52,W
04A3:  MOVWF  56
04A4:  MOVF   7A,W
04A5:  MOVWF  5D
04A6:  MOVF   79,W
04A7:  MOVWF  5C
04A8:  MOVF   78,W
04A9:  MOVWF  5B
04AA:  MOVF   77,W
04AB:  MOVWF  5A
04AC:  CALL   112
04AD:  CLRF   55
04AE:  CLRF   54
04AF:  CLRF   53
04B0:  MOVLW  8E
04B1:  MOVWF  52
04B2:  MOVF   7A,W
04B3:  MOVWF  59
04B4:  MOVF   79,W
04B5:  MOVWF  58
04B6:  MOVF   78,W
04B7:  MOVWF  57
04B8:  MOVF   77,W
04B9:  MOVWF  56
04BA:  CALL   398
04BB:  MOVF   7A,W
04BC:  MOVWF  4A
04BD:  MOVF   79,W
04BE:  MOVWF  49
04BF:  MOVF   78,W
04C0:  MOVWF  48
04C1:  MOVF   77,W
04C2:  MOVWF  47
....................       res = 32768.0 * (float32)l; 
04C3:  MOVF   50,W
04C4:  MOVWF  57
04C5:  MOVF   4F,W
04C6:  MOVWF  56
04C7:  CALL   37B
04C8:  CLRF   55
04C9:  CLRF   54
04CA:  CLRF   53
04CB:  MOVLW  8E
04CC:  MOVWF  52
04CD:  MOVF   7A,W
04CE:  MOVWF  59
04CF:  MOVF   79,W
04D0:  MOVWF  58
04D1:  MOVF   78,W
04D2:  MOVWF  57
04D3:  MOVF   77,W
04D4:  MOVWF  56
04D5:  CALL   398
04D6:  MOVF   7A,W
04D7:  MOVWF  4E
04D8:  MOVF   79,W
04D9:  MOVWF  4D
04DA:  MOVF   78,W
04DB:  MOVWF  4C
04DC:  MOVF   77,W
04DD:  MOVWF  4B
....................       res += (float32)(unsigned int16)y; 
04DE:  MOVF   4A,W
04DF:  MOVWF  55
04E0:  MOVF   49,W
04E1:  MOVWF  54
04E2:  MOVF   48,W
04E3:  MOVWF  53
04E4:  MOVF   47,W
04E5:  MOVWF  52
04E6:  CALL   35C
04E7:  MOVF   79,W
04E8:  MOVWF  57
04E9:  MOVF   78,W
04EA:  MOVWF  56
04EB:  CALL   37B
04EC:  BCF    03.1
04ED:  MOVF   4E,W
04EE:  MOVWF  59
04EF:  MOVF   4D,W
04F0:  MOVWF  58
04F1:  MOVF   4C,W
04F2:  MOVWF  57
04F3:  MOVF   4B,W
04F4:  MOVWF  56
04F5:  MOVF   7A,W
04F6:  MOVWF  5D
04F7:  MOVF   79,W
04F8:  MOVWF  5C
04F9:  MOVF   78,W
04FA:  MOVWF  5B
04FB:  MOVF   77,W
04FC:  MOVWF  5A
04FD:  CALL   112
04FE:  MOVF   7A,W
04FF:  MOVWF  4E
0500:  MOVF   79,W
0501:  MOVWF  4D
0502:  MOVF   78,W
0503:  MOVWF  4C
0504:  MOVF   77,W
0505:  MOVWF  4B
....................    } 
0506:  GOTO   50F
....................  
....................    else 
....................       res = y; 
0507:  MOVF   4A,W
0508:  MOVWF  4E
0509:  MOVF   49,W
050A:  MOVWF  4D
050B:  MOVF   48,W
050C:  MOVWF  4C
050D:  MOVF   47,W
050E:  MOVWF  4B
....................  
....................    y = y - (float32)(unsigned int16)y; 
050F:  MOVF   4A,W
0510:  MOVWF  55
0511:  MOVF   49,W
0512:  MOVWF  54
0513:  MOVF   48,W
0514:  MOVWF  53
0515:  MOVF   47,W
0516:  MOVWF  52
0517:  CALL   35C
0518:  MOVF   79,W
0519:  MOVWF  57
051A:  MOVF   78,W
051B:  MOVWF  56
051C:  CALL   37B
051D:  BSF    03.1
051E:  MOVF   4A,W
051F:  MOVWF  59
0520:  MOVF   49,W
0521:  MOVWF  58
0522:  MOVF   48,W
0523:  MOVWF  57
0524:  MOVF   47,W
0525:  MOVWF  56
0526:  MOVF   7A,W
0527:  MOVWF  5D
0528:  MOVF   79,W
0529:  MOVWF  5C
052A:  MOVF   78,W
052B:  MOVWF  5B
052C:  MOVF   77,W
052D:  MOVWF  5A
052E:  CALL   112
052F:  MOVF   7A,W
0530:  MOVWF  4A
0531:  MOVF   79,W
0532:  MOVWF  49
0533:  MOVF   78,W
0534:  MOVWF  48
0535:  MOVF   77,W
0536:  MOVWF  47
....................  
....................    if (s) 
0537:  BTFSS  51.0
0538:  GOTO   53C
....................       res = -res; 
0539:  MOVF   4C,W
053A:  XORLW  80
053B:  MOVWF  4C
....................  
....................    if (y != 0) 
053C:  MOVF   4A,W
053D:  MOVWF  55
053E:  MOVF   49,W
053F:  MOVWF  54
0540:  MOVF   48,W
0541:  MOVWF  53
0542:  MOVF   47,W
0543:  MOVWF  52
0544:  CLRF   59
0545:  CLRF   58
0546:  CLRF   57
0547:  CLRF   56
0548:  CALL   31D
0549:  BTFSC  03.2
054A:  GOTO   564
....................    { 
....................       if (s == 1) 
054B:  BTFSS  51.0
054C:  GOTO   564
....................          res -= 1.0; 
054D:  BSF    03.1
054E:  MOVF   4E,W
054F:  MOVWF  59
0550:  MOVF   4D,W
0551:  MOVWF  58
0552:  MOVF   4C,W
0553:  MOVWF  57
0554:  MOVF   4B,W
0555:  MOVWF  56
0556:  CLRF   5D
0557:  CLRF   5C
0558:  CLRF   5B
0559:  MOVLW  7F
055A:  MOVWF  5A
055B:  CALL   112
055C:  MOVF   7A,W
055D:  MOVWF  4E
055E:  MOVF   79,W
055F:  MOVWF  4D
0560:  MOVF   78,W
0561:  MOVWF  4C
0562:  MOVF   77,W
0563:  MOVWF  4B
....................    } 
....................    if (x == 0) 
0564:  MOVF   46,W
0565:  MOVWF  55
0566:  MOVF   45,W
0567:  MOVWF  54
0568:  MOVF   44,W
0569:  MOVWF  53
056A:  MOVF   43,W
056B:  MOVWF  52
056C:  CLRF   59
056D:  CLRF   58
056E:  CLRF   57
056F:  CLRF   56
0570:  CALL   31D
0571:  BTFSS  03.2
0572:  GOTO   577
....................       res = 0; 
0573:  CLRF   4E
0574:  CLRF   4D
0575:  CLRF   4C
0576:  CLRF   4B
....................  
....................    return (res); 
0577:  MOVF   4B,W
0578:  MOVWF  77
0579:  MOVF   4C,W
057A:  MOVWF  78
057B:  MOVF   4D,W
057C:  MOVWF  79
057D:  MOVF   4E,W
057E:  MOVWF  7A
057F:  RETURN
.................... } 
....................  
....................  
.................... //================================================== VARIABLES ================================================== 
....................  
.................... // set angle (10 levels). more angle, weaker motor 
.................... int32 angleStarter = 1; 
.................... int32 angleRingTheBell = 6; 
....................  
.................... int32 valTimer0SetStarter = (int32)FLOOR((13.1072 - angleStarter) / 0.0512) - 1; 
.................... int32 valTimer0SetRingTheBell = (int32)FLOOR((13.1072 - angleRingTheBell) / 0.0512) - 1; 
....................  
.................... volatile signed int16 count = 0; 
.................... int1 flagForward = true, flagStarter = true, flagSTOP = true; 
....................  
.................... signed int16 ProtectRotate = 2000; 
....................  
.................... //================================================== ISR Func() ================================================== 
....................  
.................... #INT_EXT 
.................... void ext_isr() 
.................... { 
....................    // cross zero point detector 50Hz >> 1/50/2 sec per half pulse after diode brighet 
....................  
....................    output_low(triac1Out); 
*
0048:  BCF    3C.6
0049:  MOVF   3C,W
004A:  BSF    03.5
004B:  MOVWF  07
004C:  BCF    03.5
004D:  BCF    07.6
....................    output_low(triac2Out); 
004E:  BCF    3C.7
004F:  MOVF   3C,W
0050:  BSF    03.5
0051:  MOVWF  07
0052:  BCF    03.5
0053:  BCF    07.7
....................  
....................    if (flagStarter) 
0054:  BTFSS  39.1
0055:  GOTO   059
....................       set_timer0(valTimer0SetStarter); 
0056:  MOVF   2F,W
0057:  MOVWF  01
0058:  GOTO   05B
....................    else 
....................       set_timer0(valTimer0SetRingTheBell); 
0059:  MOVF   33,W
005A:  MOVWF  01
....................  
....................    clear_interrupt(INT_TIMER0); 
005B:  BCF    0B.2
....................    enable_interrupts(INT_TIMER0); 
005C:  BSF    0B.5
....................    clear_interrupt(INT_EXT); // waiting for next EXT 
005D:  BCF    0B.1
.................... } 
....................  
005E:  BCF    0B.1
005F:  BCF    0A.3
0060:  BCF    0A.4
0061:  GOTO   02B
.................... #INT_TIMER0 
.................... void timer0_isr() 
.................... { 
....................    if (flagForward && !flagSTOP) 
0062:  BTFSS  39.0
0063:  GOTO   06D
0064:  BTFSC  39.2
0065:  GOTO   06D
....................       output_high(triac1Out); 
0066:  BCF    3C.6
0067:  MOVF   3C,W
0068:  BSF    03.5
0069:  MOVWF  07
006A:  BCF    03.5
006B:  BSF    07.6
006C:  GOTO   077
....................    else if (!flagForward && !flagSTOP) 
006D:  BTFSC  39.0
006E:  GOTO   077
006F:  BTFSC  39.2
0070:  GOTO   077
....................       output_high(triac2Out); 
0071:  BCF    3C.7
0072:  MOVF   3C,W
0073:  BSF    03.5
0074:  MOVWF  07
0075:  BCF    03.5
0076:  BSF    07.7
....................  
....................    // set_timer0(200.00); 
....................    disable_interrupts(INT_TIMER0); 
0077:  BCF    0B.5
.................... } 
....................  
0078:  BCF    0B.2
0079:  BCF    0A.3
007A:  BCF    0A.4
007B:  GOTO   02B
.................... #INT_TIMER2 
.................... void timer2_isr() 
.................... { 
....................    if (count >= ProtectRotate) // (+)ProtectRotate rotate 
007C:  BTFSS  3B.7
007D:  GOTO   081
007E:  BTFSS  38.7
007F:  GOTO   08D
0080:  GOTO   083
0081:  BTFSC  38.7
0082:  GOTO   095
0083:  MOVF   3B,W
0084:  SUBWF  38,W
0085:  BTFSS  03.0
0086:  GOTO   095
0087:  BTFSS  03.2
0088:  GOTO   08D
0089:  MOVF   3A,W
008A:  SUBWF  37,W
008B:  BTFSS  03.0
008C:  GOTO   095
....................    { 
....................       output_low(relayOut); // safety switch 
008D:  BCF    3C.1
008E:  MOVF   3C,W
008F:  BSF    03.5
0090:  MOVWF  07
0091:  BCF    03.5
0092:  BCF    07.1
....................       reset_cpu(); 
0093:  CLRF   0A
0094:  GOTO   000
....................    } 
....................    if (count <= -1 * ProtectRotate) // (-)ProtectRotate rotate 
0095:  MOVLW  FF
0096:  MOVWF  67
0097:  MOVWF  66
0098:  MOVF   3B,W
0099:  MOVWF  69
009A:  MOVF   3A,W
009B:  MOVWF  68
*
00C9:  MOVF   79,W
00CA:  MOVWF  7A
00CB:  MOVF   78,W
00CC:  BTFSS  38.7
00CD:  GOTO   0D1
00CE:  BTFSS  7A.7
00CF:  GOTO   0DD
00D0:  GOTO   0D3
00D1:  BTFSC  7A.7
00D2:  GOTO   0E5
00D3:  MOVF   38,W
00D4:  SUBWF  7A,W
00D5:  BTFSS  03.0
00D6:  GOTO   0E5
00D7:  BTFSS  03.2
00D8:  GOTO   0DD
00D9:  MOVF   37,W
00DA:  SUBWF  78,W
00DB:  BTFSS  03.0
00DC:  GOTO   0E5
....................    { 
....................       output_low(relayOut); // safety switch 
00DD:  BCF    3C.1
00DE:  MOVF   3C,W
00DF:  BSF    03.5
00E0:  MOVWF  07
00E1:  BCF    03.5
00E2:  BCF    07.1
....................       reset_cpu(); 
00E3:  CLRF   0A
00E4:  GOTO   000
....................    } 
.................... } 
....................  
00E5:  BCF    0C.1
00E6:  BCF    0A.3
00E7:  BCF    0A.4
00E8:  GOTO   02B
.................... #INT_CCP1 
.................... void ccp1_isr() 
.................... { 
....................    if (RC0) 
00E9:  BTFSS  07.0
00EA:  GOTO   0EF
....................       ++count; 
00EB:  INCF   37,F
00EC:  BTFSC  03.2
00ED:  INCF   38,F
00EE:  GOTO   0F3
....................    else 
....................       --count; 
00EF:  MOVF   37,W
00F0:  BTFSC  03.2
00F1:  DECF   38,F
00F2:  DECF   37,F
00F3:  BCF    0C.2
00F4:  BCF    0A.3
00F5:  BCF    0A.4
00F6:  GOTO   02B
.................... } 
....................  
.................... //================================================== Func() ================================================== 
....................  
.................... void FORWARD() 
.................... { 
....................    output_low(triac2Out); 
*
0608:  BCF    3C.7
0609:  MOVF   3C,W
060A:  BSF    03.5
060B:  MOVWF  07
060C:  BCF    03.5
060D:  BCF    07.7
....................  
....................    flagForward = true; 
060E:  BSF    39.0
....................    flagSTOP = false; 
060F:  BCF    39.2
0610:  RETURN
.................... } 
.................... void REVERSE() 
.................... { 
....................    output_low(triac1Out); 
*
061F:  BCF    3C.6
0620:  MOVF   3C,W
0621:  BSF    03.5
0622:  MOVWF  07
0623:  BCF    03.5
0624:  BCF    07.6
....................    flagForward = flagSTOP = false; 
0625:  BCF    39.2
0626:  BCF    39.0
0627:  RETURN
.................... } 
.................... void STOP() 
.................... { 
....................    flagSTOP = true; 
*
0611:  BSF    39.2
....................    output_low(triac1Out); 
0612:  BCF    3C.6
0613:  MOVF   3C,W
0614:  BSF    03.5
0615:  MOVWF  07
0616:  BCF    03.5
0617:  BCF    07.6
....................    output_low(triac2Out); 
0618:  BCF    3C.7
0619:  MOVF   3C,W
061A:  BSF    03.5
061B:  MOVWF  07
061C:  BCF    03.5
061D:  BCF    07.7
061E:  RETURN
.................... } 
....................  
.................... void starter() 
.................... { 
....................    // half rotate 
....................    while (count <= 200) 
*
0628:  BTFSC  38.7
0629:  GOTO   631
062A:  MOVF   38,F
062B:  BTFSS  03.2
062C:  GOTO   641
062D:  MOVF   37,W
062E:  SUBLW  C8
062F:  BTFSS  03.0
0630:  GOTO   641
....................    { 
....................       if (count <= -200) 
0631:  BTFSS  38.7
0632:  GOTO   63F
0633:  MOVF   38,W
0634:  SUBLW  FF
0635:  BTFSS  03.0
0636:  GOTO   63F
0637:  BTFSS  03.2
0638:  GOTO   63D
0639:  MOVF   37,W
063A:  SUBLW  38
063B:  BTFSS  03.0
063C:  GOTO   63F
....................          reset_cpu(); 
063D:  CLRF   0A
063E:  GOTO   000
....................       FORWARD(); 
063F:  CALL   608
0640:  GOTO   628
....................    } 
....................  
....................    STOP(); 
0641:  CALL   611
....................    while (count >= 0) 
0642:  BTFSC  38.7
0643:  GOTO   646
....................       STOP(); 
0644:  CALL   611
0645:  GOTO   642
....................    while (count >= -200) 
0646:  BTFSS  38.7
0647:  GOTO   653
0648:  MOVF   38,W
0649:  SUBLW  FE
064A:  BTFSC  03.0
064B:  GOTO   655
064C:  XORLW  FF
064D:  BTFSS  03.2
064E:  GOTO   653
064F:  MOVF   37,W
0650:  SUBLW  37
0651:  BTFSC  03.0
0652:  GOTO   655
....................       REVERSE(); 
0653:  CALL   61F
0654:  GOTO   646
....................    STOP(); 
0655:  CALL   611
....................    while (count <= 0) 
0656:  BTFSC  38.7
0657:  GOTO   65F
0658:  MOVF   38,F
0659:  BTFSS  03.2
065A:  GOTO   661
065B:  MOVF   37,W
065C:  SUBLW  00
065D:  BTFSS  03.0
065E:  GOTO   661
....................       STOP(); 
065F:  CALL   611
0660:  GOTO   656
....................  
....................    // 1 rotate 
....................    while (count <= 400) 
0661:  BTFSC  38.7
0662:  GOTO   66D
0663:  MOVF   38,W
0664:  SUBLW  01
0665:  BTFSS  03.0
0666:  GOTO   66F
0667:  BTFSS  03.2
0668:  GOTO   66D
0669:  MOVF   37,W
066A:  SUBLW  90
066B:  BTFSS  03.0
066C:  GOTO   66F
....................       FORWARD(); 
066D:  CALL   608
066E:  GOTO   661
....................    STOP(); 
066F:  CALL   611
....................    while (count >= 0) 
0670:  BTFSC  38.7
0671:  GOTO   674
....................       STOP(); 
0672:  CALL   611
0673:  GOTO   670
....................    while (count >= -400) 
0674:  BTFSS  38.7
0675:  GOTO   681
0676:  MOVF   38,W
0677:  SUBLW  FD
0678:  BTFSC  03.0
0679:  GOTO   683
067A:  XORLW  FF
067B:  BTFSS  03.2
067C:  GOTO   681
067D:  MOVF   37,W
067E:  SUBLW  6F
067F:  BTFSC  03.0
0680:  GOTO   683
....................       REVERSE(); 
0681:  CALL   61F
0682:  GOTO   674
....................    STOP(); 
0683:  CALL   611
....................    while (count <= 0) 
0684:  BTFSC  38.7
0685:  GOTO   68D
0686:  MOVF   38,F
0687:  BTFSS  03.2
0688:  GOTO   68F
0689:  MOVF   37,W
068A:  SUBLW  00
068B:  BTFSS  03.0
068C:  GOTO   68F
....................       STOP(); 
068D:  CALL   611
068E:  GOTO   684
....................  
....................    // 2 rotates 
....................    while (count <= 800) 
068F:  BTFSC  38.7
0690:  GOTO   69B
0691:  MOVF   38,W
0692:  SUBLW  03
0693:  BTFSS  03.0
0694:  GOTO   69D
0695:  BTFSS  03.2
0696:  GOTO   69B
0697:  MOVF   37,W
0698:  SUBLW  20
0699:  BTFSS  03.0
069A:  GOTO   69D
....................       FORWARD(); 
069B:  CALL   608
069C:  GOTO   68F
....................    STOP(); 
069D:  CALL   611
....................    while (count >= 0) 
069E:  BTFSC  38.7
069F:  GOTO   6A2
....................       STOP(); 
06A0:  CALL   611
06A1:  GOTO   69E
....................    while (count >= -800) 
06A2:  BTFSS  38.7
06A3:  GOTO   6AF
06A4:  MOVF   38,W
06A5:  SUBLW  FB
06A6:  BTFSC  03.0
06A7:  GOTO   6B1
06A8:  XORLW  FF
06A9:  BTFSS  03.2
06AA:  GOTO   6AF
06AB:  MOVF   37,W
06AC:  SUBLW  DF
06AD:  BTFSC  03.0
06AE:  GOTO   6B1
....................       REVERSE(); 
06AF:  CALL   61F
06B0:  GOTO   6A2
....................    STOP(); 
06B1:  CALL   611
....................    while (count <= 0) 
06B2:  BTFSC  38.7
06B3:  GOTO   6BB
06B4:  MOVF   38,F
06B5:  BTFSS  03.2
06B6:  GOTO   6BD
06B7:  MOVF   37,W
06B8:  SUBLW  00
06B9:  BTFSS  03.0
06BA:  GOTO   6BD
....................       STOP(); 
06BB:  CALL   611
06BC:  GOTO   6B2
....................  
....................    // 3 rotates 1 side 
....................    while (count <= 1200) 
06BD:  BTFSC  38.7
06BE:  GOTO   6C9
06BF:  MOVF   38,W
06C0:  SUBLW  04
06C1:  BTFSS  03.0
06C2:  GOTO   6CB
06C3:  BTFSS  03.2
06C4:  GOTO   6C9
06C5:  MOVF   37,W
06C6:  SUBLW  B0
06C7:  BTFSS  03.0
06C8:  GOTO   6CB
....................       FORWARD(); 
06C9:  CALL   608
06CA:  GOTO   6BD
....................    STOP(); 
06CB:  CALL   611
....................  
....................    flagStarter = false; 
06CC:  BCF    39.1
06CD:  BSF    0A.3
06CE:  BCF    0A.4
06CF:  GOTO   13A (RETURN)
.................... } 
....................  
.................... void RingTheBell() 
.................... { 
....................    while (count >= 400) 
06D0:  BTFSC  38.7
06D1:  GOTO   6DF
06D2:  MOVF   38,W
06D3:  SUBLW  00
06D4:  BTFSC  03.0
06D5:  GOTO   6DF
06D6:  XORLW  FF
06D7:  BTFSS  03.2
06D8:  GOTO   6DD
06D9:  MOVF   37,W
06DA:  SUBLW  8F
06DB:  BTFSC  03.0
06DC:  GOTO   6DF
....................       STOP(); 
06DD:  CALL   611
06DE:  GOTO   6D0
....................  
....................    while (count >= -800) 
06DF:  BTFSS  38.7
06E0:  GOTO   6EC
06E1:  MOVF   38,W
06E2:  SUBLW  FB
06E3:  BTFSC  03.0
06E4:  GOTO   6EE
06E5:  XORLW  FF
06E6:  BTFSS  03.2
06E7:  GOTO   6EC
06E8:  MOVF   37,W
06E9:  SUBLW  DF
06EA:  BTFSC  03.0
06EB:  GOTO   6EE
....................       REVERSE(); 
06EC:  CALL   61F
06ED:  GOTO   6DF
....................    STOP(); 
06EE:  CALL   611
....................  
....................    while (count <= -400) 
06EF:  BTFSS  38.7
06F0:  GOTO   6FD
06F1:  MOVF   38,W
06F2:  SUBLW  FE
06F3:  BTFSS  03.0
06F4:  GOTO   6FD
06F5:  BTFSS  03.2
06F6:  GOTO   6FB
06F7:  MOVF   37,W
06F8:  SUBLW  70
06F9:  BTFSS  03.0
06FA:  GOTO   6FD
....................       STOP(); 
06FB:  CALL   611
06FC:  GOTO   6EF
....................  
....................    while (count <= 800) 
06FD:  BTFSC  38.7
06FE:  GOTO   709
06FF:  MOVF   38,W
0700:  SUBLW  03
0701:  BTFSS  03.0
0702:  GOTO   70B
0703:  BTFSS  03.2
0704:  GOTO   709
0705:  MOVF   37,W
0706:  SUBLW  20
0707:  BTFSS  03.0
0708:  GOTO   70B
....................       FORWARD(); 
0709:  CALL   608
070A:  GOTO   6FD
....................    STOP(); 
070B:  CALL   611
070C:  BSF    0A.3
070D:  BCF    0A.4
070E:  GOTO   13D (RETURN)
.................... } 
....................  
.................... // pic 20mhz 5.10^6 = 1sec 
.................... // motor 2000rpm 
.................... // quay co tai: 0.5rps -> 200xung/s -> 1/200 s/xung 
.................... void checkSafetyFirst(int32 sec) 
.................... { 
....................    flagSTOP = true; 
*
05B3:  BSF    39.2
....................    output_low(relayOut); // safety switch 
05B4:  BCF    3C.1
05B5:  MOVF   3C,W
05B6:  BSF    03.5
05B7:  MOVWF  07
05B8:  BCF    03.5
05B9:  BCF    07.1
....................  
....................    signed int16 lastCount = count; 
05BA:  MOVF   38,W
05BB:  MOVWF  42
05BC:  MOVF   37,W
05BD:  MOVWF  41
....................    for (int32 i = sec; --i;) // waitting steady 
05BE:  MOVF   40,W
05BF:  MOVWF  46
05C0:  MOVF   3F,W
05C1:  MOVWF  45
05C2:  MOVF   3E,W
05C3:  MOVWF  44
05C4:  MOVF   3D,W
05C5:  MOVWF  43
05C6:  MOVLW  FF
05C7:  ADDWF  43,F
05C8:  BTFSS  03.0
05C9:  ADDWF  44,F
05CA:  BTFSS  03.0
05CB:  ADDWF  45,F
05CC:  BTFSS  03.0
05CD:  ADDWF  46,F
05CE:  MOVF   43,F
05CF:  BTFSS  03.2
05D0:  GOTO   5DA
05D1:  MOVF   44,F
05D2:  BTFSS  03.2
05D3:  GOTO   5DA
05D4:  MOVF   45,F
05D5:  BTFSS  03.2
05D6:  GOTO   5DA
05D7:  MOVF   46,F
05D8:  BTFSC  03.2
05D9:  GOTO   5F2
....................    { 
....................       if (count != lastCount) 
05DA:  MOVF   41,W
05DB:  SUBWF  37,W
05DC:  BTFSS  03.2
05DD:  GOTO   5E2
05DE:  MOVF   42,W
05DF:  SUBWF  38,W
05E0:  BTFSC  03.2
05E1:  GOTO   5F1
....................       { 
....................          i = sec; // reset 
05E2:  MOVF   40,W
05E3:  MOVWF  46
05E4:  MOVF   3F,W
05E5:  MOVWF  45
05E6:  MOVF   3E,W
05E7:  MOVWF  44
05E8:  MOVF   3D,W
05E9:  MOVWF  43
....................          lastCount = count; 
05EA:  MOVF   38,W
05EB:  MOVWF  42
05EC:  MOVF   37,W
05ED:  MOVWF  41
....................          delay_ms(30); // pray for couting up 
05EE:  MOVLW  1E
05EF:  MOVWF  48
05F0:  CALL   59F
....................       } 
05F1:  GOTO   5C6
....................    } 
....................  
....................    count = 0; // update 0 point 
05F2:  CLRF   38
05F3:  CLRF   37
....................    output_high(relayOut); 
05F4:  BCF    3C.1
05F5:  MOVF   3C,W
05F6:  BSF    03.5
05F7:  MOVWF  07
05F8:  BCF    03.5
05F9:  BSF    07.1
....................    delay_ms(3000); // ngăn hồ quang nếu cùng lúc đóng triac lập tức 
05FA:  MOVLW  0C
05FB:  MOVWF  47
05FC:  MOVLW  FA
05FD:  MOVWF  48
05FE:  CALL   59F
05FF:  DECFSZ 47,F
0600:  GOTO   5FC
....................    enable_interrupts(INT_TIMER2); 
0601:  BSF    03.5
0602:  BSF    0C.1
....................    flagSTOP = false; 
0603:  BCF    03.5
0604:  BCF    39.2
0605:  BSF    0A.3
0606:  BCF    0A.4
0607:  GOTO   137 (RETURN)
.................... } 
....................  
.................... //================================================== MAIN ================================================== 
....................  
.................... void main() 
*
0800:  MOVF   03,W
0801:  ANDLW  1F
0802:  MOVWF  03
0803:  CLRF   2A
0804:  CLRF   29
0805:  CLRF   28
0806:  MOVLW  01
0807:  MOVWF  27
0808:  CLRF   2E
0809:  CLRF   2D
080A:  CLRF   2C
080B:  MOVLW  06
080C:  MOVWF  2B
080D:  MOVF   2A,W
080E:  MOVWF  40
080F:  MOVF   29,W
0810:  MOVWF  3F
0811:  MOVF   28,W
0812:  MOVWF  3E
0813:  MOVF   27,W
0814:  MOVWF  3D
0815:  BCF    0A.3
0816:  CALL   0F7
0817:  BSF    0A.3
0818:  BSF    03.1
0819:  MOVLW  17
081A:  MOVWF  59
081B:  MOVLW  B7
081C:  MOVWF  58
081D:  MOVLW  51
081E:  MOVWF  57
081F:  MOVLW  82
0820:  MOVWF  56
0821:  MOVF   7A,W
0822:  MOVWF  5D
0823:  MOVF   79,W
0824:  MOVWF  5C
0825:  MOVF   78,W
0826:  MOVWF  5B
0827:  MOVF   77,W
0828:  MOVWF  5A
0829:  BCF    0A.3
082A:  CALL   112
082B:  BSF    0A.3
082C:  MOVF   7A,W
082D:  MOVWF  40
082E:  MOVF   79,W
082F:  MOVWF  3F
0830:  MOVF   78,W
0831:  MOVWF  3E
0832:  MOVF   77,W
0833:  MOVWF  3D
0834:  MOVF   7A,W
0835:  MOVWF  46
0836:  MOVF   79,W
0837:  MOVWF  45
0838:  MOVF   78,W
0839:  MOVWF  44
083A:  MOVF   77,W
083B:  MOVWF  43
083C:  MOVLW  17
083D:  MOVWF  4A
083E:  MOVLW  B7
083F:  MOVWF  49
0840:  MOVLW  51
0841:  MOVWF  48
0842:  MOVLW  7A
0843:  MOVWF  47
0844:  BCF    0A.3
0845:  CALL   253
0846:  BSF    0A.3
0847:  MOVF   7A,W
0848:  MOVWF  40
0849:  MOVF   79,W
084A:  MOVWF  3F
084B:  MOVF   78,W
084C:  MOVWF  3E
084D:  MOVF   77,W
084E:  MOVWF  3D
084F:  MOVF   7A,W
0850:  MOVWF  46
0851:  MOVF   79,W
0852:  MOVWF  45
0853:  MOVF   78,W
0854:  MOVWF  44
0855:  MOVF   77,W
0856:  MOVWF  43
0857:  BCF    0A.3
0858:  CALL   40D
0859:  BSF    0A.3
085A:  MOVF   7A,W
085B:  MOVWF  42
085C:  MOVF   79,W
085D:  MOVWF  41
085E:  MOVF   78,W
085F:  MOVWF  40
0860:  MOVF   77,W
0861:  MOVWF  3F
0862:  BCF    0A.3
0863:  CALL   580
0864:  BSF    0A.3
0865:  MOVLW  01
0866:  SUBWF  77,W
0867:  MOVWF  2F
0868:  MOVF   78,W
0869:  MOVWF  30
086A:  MOVLW  00
086B:  BTFSS  03.0
086C:  MOVLW  01
086D:  SUBWF  30,F
086E:  MOVF   79,W
086F:  MOVWF  31
0870:  MOVLW  00
0871:  BTFSS  03.0
0872:  MOVLW  01
0873:  SUBWF  31,F
0874:  MOVF   7A,W
0875:  MOVWF  32
0876:  MOVLW  00
0877:  BTFSS  03.0
0878:  MOVLW  01
0879:  SUBWF  32,F
087A:  MOVF   2E,W
087B:  MOVWF  40
087C:  MOVF   2D,W
087D:  MOVWF  3F
087E:  MOVF   2C,W
087F:  MOVWF  3E
0880:  MOVF   2B,W
0881:  MOVWF  3D
0882:  BCF    0A.3
0883:  CALL   0F7
0884:  BSF    0A.3
0885:  CLRF   3E
0886:  MOVF   04,W
0887:  MOVWF  3D
0888:  BCF    3E.0
0889:  BTFSC  03.7
088A:  BSF    3E.0
088B:  BSF    03.1
088C:  MOVLW  17
088D:  MOVWF  59
088E:  MOVLW  B7
088F:  MOVWF  58
0890:  MOVLW  51
0891:  MOVWF  57
0892:  MOVLW  82
0893:  MOVWF  56
0894:  MOVF   7A,W
0895:  MOVWF  5D
0896:  MOVF   79,W
0897:  MOVWF  5C
0898:  MOVF   78,W
0899:  MOVWF  5B
089A:  MOVF   77,W
089B:  MOVWF  5A
089C:  BCF    0A.3
089D:  CALL   112
089E:  BSF    0A.3
089F:  MOVF   3D,W
08A0:  MOVWF  04
08A1:  BCF    03.7
08A2:  BTFSC  3E.0
08A3:  BSF    03.7
08A4:  MOVF   7A,W
08A5:  MOVWF  42
08A6:  MOVF   79,W
08A7:  MOVWF  41
08A8:  MOVF   78,W
08A9:  MOVWF  40
08AA:  MOVF   77,W
08AB:  MOVWF  3F
08AC:  MOVF   7A,W
08AD:  MOVWF  46
08AE:  MOVF   79,W
08AF:  MOVWF  45
08B0:  MOVF   78,W
08B1:  MOVWF  44
08B2:  MOVF   77,W
08B3:  MOVWF  43
08B4:  MOVLW  17
08B5:  MOVWF  4A
08B6:  MOVLW  B7
08B7:  MOVWF  49
08B8:  MOVLW  51
08B9:  MOVWF  48
08BA:  MOVLW  7A
08BB:  MOVWF  47
08BC:  BCF    0A.3
08BD:  CALL   253
08BE:  BSF    0A.3
08BF:  MOVF   7A,W
08C0:  MOVWF  42
08C1:  MOVF   79,W
08C2:  MOVWF  41
08C3:  MOVF   78,W
08C4:  MOVWF  40
08C5:  MOVF   77,W
08C6:  MOVWF  3F
08C7:  MOVF   7A,W
08C8:  MOVWF  46
08C9:  MOVF   79,W
08CA:  MOVWF  45
08CB:  MOVF   78,W
08CC:  MOVWF  44
08CD:  MOVF   77,W
08CE:  MOVWF  43
08CF:  BCF    0A.3
08D0:  CALL   40D
08D1:  BSF    0A.3
08D2:  MOVF   7A,W
08D3:  MOVWF  42
08D4:  MOVF   79,W
08D5:  MOVWF  41
08D6:  MOVF   78,W
08D7:  MOVWF  40
08D8:  MOVF   77,W
08D9:  MOVWF  3F
08DA:  BCF    0A.3
08DB:  CALL   580
08DC:  BSF    0A.3
08DD:  MOVLW  01
08DE:  SUBWF  77,W
08DF:  MOVWF  33
08E0:  MOVF   78,W
08E1:  MOVWF  34
08E2:  MOVLW  00
08E3:  BTFSS  03.0
08E4:  MOVLW  01
08E5:  SUBWF  34,F
08E6:  MOVF   79,W
08E7:  MOVWF  35
08E8:  MOVLW  00
08E9:  BTFSS  03.0
08EA:  MOVLW  01
08EB:  SUBWF  35,F
08EC:  MOVF   7A,W
08ED:  MOVWF  36
08EE:  MOVLW  00
08EF:  BTFSS  03.0
08F0:  MOVLW  01
08F1:  SUBWF  36,F
08F2:  CLRF   38
08F3:  CLRF   37
08F4:  BSF    39.0
08F5:  BSF    39.1
08F6:  BSF    39.2
08F7:  MOVLW  07
08F8:  MOVWF  3B
08F9:  MOVLW  D0
08FA:  MOVWF  3A
08FB:  MOVLW  FF
08FC:  MOVWF  3C
08FD:  BSF    03.5
08FE:  BSF    1F.0
08FF:  BSF    1F.1
0900:  BSF    1F.2
0901:  BCF    1F.3
0902:  MOVLW  07
0903:  MOVWF  1C
0904:  BCF    03.7
.................... { 
....................    // encoder dir 
....................    TRISC0 = TRISC2 = 1; 
0905:  BSF    07.2
0906:  BSF    07.0
....................  
....................    // cross zero detector dir 
....................    TRISB0 = 1; 
0907:  BSF    06.0
....................  
....................    // Triac dir 
....................    // TRISD0 = TRISD1 = 0; 
....................    TRISC6 = TRISC7 = 0; 
0908:  BCF    07.7
0909:  BCF    07.6
....................  
....................    // relay dir 
....................    TRISC1 = 0; 
090A:  BCF    07.1
....................  
....................    clear_interrupt(INT_EXT); 
090B:  BCF    03.5
090C:  BCF    0B.1
....................    enable_interrupts(INT_EXT); 
090D:  BSF    0B.4
....................    ext_int_edge(H_TO_L); 
090E:  BSF    03.5
090F:  BCF    01.6
....................  
....................    setup_timer_0(RTCC_INTERNAL | RTCC_DIV_256); // 51.2us 
0910:  MOVF   01,W
0911:  ANDLW  C0
0912:  IORLW  07
0913:  MOVWF  01
....................    enable_interrupts(INT_TIMER0); 
0914:  BCF    03.5
0915:  BSF    0B.5
....................  
....................    setup_ccp1(CCP_CAPTURE_FE); 
0916:  BSF    3C.2
0917:  MOVF   3C,W
0918:  BSF    03.5
0919:  MOVWF  07
091A:  BCF    03.5
091B:  CLRF   17
091C:  MOVLW  04
091D:  MOVWF  17
....................    setup_timer_1(T1_INTERNAL); 
091E:  MOVLW  85
091F:  MOVWF  10
....................    enable_interrupts(INT_CCP1); 
0920:  BSF    03.5
0921:  BSF    0C.2
....................  
....................    setup_timer_2(T2_DIV_BY_16, 255, 16); // Overflow every 13.056us 
0922:  MOVLW  78
0923:  MOVWF  78
0924:  IORLW  06
0925:  BCF    03.5
0926:  MOVWF  12
0927:  MOVLW  FF
0928:  BSF    03.5
0929:  MOVWF  12
....................    set_timer2(0); 
092A:  BCF    03.5
092B:  CLRF   11
....................  
....................    enable_interrupts(GLOBAL); 
092C:  MOVLW  C0
092D:  IORWF  0B,F
....................  
....................    checkSafetyFirst(1500000); // ~~ 6 seconds 
092E:  CLRF   40
092F:  MOVLW  16
0930:  MOVWF  3F
0931:  MOVLW  E3
0932:  MOVWF  3E
0933:  MOVLW  60
0934:  MOVWF  3D
0935:  BCF    0A.3
0936:  GOTO   5B3
0937:  BSF    0A.3
....................  
....................    starter(); 
0938:  BCF    0A.3
0939:  GOTO   628
093A:  BSF    0A.3
....................  
....................    while (TRUE) 
....................    { 
....................       RingTheBell(); 
093B:  BCF    0A.3
093C:  GOTO   6D0
093D:  BSF    0A.3
093E:  GOTO   13B
....................    } 
.................... } 
093F:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
